
Soft_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a17c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  0800a350  0800a350  0001a350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aae8  0800aae8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaf0  0800aaf0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf0  0800aaf0  0001aaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaf4  0800aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800aaf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001e4  0800acdc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800acdc  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc0d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bf  00000000  00000000  0002fe21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00031fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00032e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023258  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105e1  00000000  00000000  00056da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3fae  00000000  00000000  00067381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b32f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  0013b380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a334 	.word	0x0800a334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800a334 	.word	0x0800a334

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800103c:	f3bf 8f4f 	dsb	sy
}
 8001040:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <__NVIC_SystemReset+0x24>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800104a:	4904      	ldr	r1, [pc, #16]	; (800105c <__NVIC_SystemReset+0x24>)
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_SystemReset+0x28>)
 800104e:	4313      	orrs	r3, r2
 8001050:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001052:	f3bf 8f4f 	dsb	sy
}
 8001056:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <__NVIC_SystemReset+0x20>
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	05fa0004 	.word	0x05fa0004

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f001 f8c8 	bl	80021fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f87e 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 f9ca 	bl	8001408 <MX_GPIO_Init>
  MX_DAC_Init();
 8001074:	f000 f8da 	bl	800122c <MX_DAC_Init>
  MX_USART2_UART_Init();
 8001078:	f000 f99c 	bl	80013b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800107c:	f000 f900 	bl	8001280 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001080:	f000 f94a 	bl	8001318 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	482d      	ldr	r0, [pc, #180]	; (800113c <main+0xd8>)
 8001088:	f001 fa5d 	bl	8002546 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, tensao);
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <main+0xdc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	4829      	ldr	r0, [pc, #164]	; (800113c <main+0xd8>)
 8001096:	f001 faa8 	bl	80025ea <HAL_DAC_SetValue>

  HAL_TIM_Base_Start_IT(&htim3);
 800109a:	482a      	ldr	r0, [pc, #168]	; (8001144 <main+0xe0>)
 800109c:	f002 faaa 	bl	80035f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  ELAPSED_TIME=0;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <main+0xe4>)
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

	  serial_clearscr();
 80010a8:	f000 fd72 	bl	8001b90 <serial_clearscr>
	  serial_puts("Digite o tempo da rampa de ");
 80010ac:	4827      	ldr	r0, [pc, #156]	; (800114c <main+0xe8>)
 80010ae:	f000 fd1b 	bl	8001ae8 <serial_puts>
	  serial_puts((!SUBIDA)?"subida: " : "descida: ");
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <main+0xec>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f083 0301 	eor.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <main+0x60>
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <main+0xf0>)
 80010c2:	e000      	b.n	80010c6 <main+0x62>
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <main+0xf4>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd0e 	bl	8001ae8 <serial_puts>
	  serial_getd(&tempo);
 80010cc:	4823      	ldr	r0, [pc, #140]	; (800115c <main+0xf8>)
 80010ce:	f000 fe22 	bl	8001d16 <serial_getd>
	  serial_nl(2);
 80010d2:	2002      	movs	r0, #2
 80010d4:	f000 fd6a 	bl	8001bac <serial_nl>

	  rampa = 1;
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <main+0xfc>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]

	  //desligar imediatamente caso esteja na rampa de descida
	  if(SUBIDA) HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, 0);
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <main+0xec>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <main+0x8e>
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ec:	481d      	ldr	r0, [pc, #116]	; (8001164 <main+0x100>)
 80010ee:	f001 fc9d 	bl	8002a2c <HAL_GPIO_WritePin>

	  SUBIDA=!SUBIDA;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <main+0xec>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf14      	ite	ne
 80010fa:	2301      	movne	r3, #1
 80010fc:	2300      	moveq	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <main+0xec>)
 800110e:	701a      	strb	r2, [r3, #0]

	  HAL_TIM_Base_Start_IT(&htim2);
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <main+0x104>)
 8001112:	f002 fa6f 	bl	80035f4 <HAL_TIM_Base_Start_IT>

	  while(rampa){}
 8001116:	bf00      	nop
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <main+0xfc>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1fb      	bne.n	8001118 <main+0xb4>

	  //liga somente após o término da rampa no caso de rampa de subida
	  HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, SUBIDA);
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <main+0xec>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <main+0x100>)
 800112c:	f001 fc7e 	bl	8002a2c <HAL_GPIO_WritePin>

	  serial_pause();
 8001130:	f000 fd56 	bl	8001be0 <serial_pause>
	  serial_clearscr();
 8001134:	f000 fd2c 	bl	8001b90 <serial_clearscr>
	  ELAPSED_TIME=0;
 8001138:	e7b2      	b.n	80010a0 <main+0x3c>
 800113a:	bf00      	nop
 800113c:	20000200 	.word	0x20000200
 8001140:	20000000 	.word	0x20000000
 8001144:	2000025c 	.word	0x2000025c
 8001148:	200002ec 	.word	0x200002ec
 800114c:	0800a350 	.word	0x0800a350
 8001150:	200002f1 	.word	0x200002f1
 8001154:	0800a36c 	.word	0x0800a36c
 8001158:	0800a378 	.word	0x0800a378
 800115c:	20000300 	.word	0x20000300
 8001160:	200002f0 	.word	0x200002f0
 8001164:	40020000 	.word	0x40020000
 8001168:	20000214 	.word	0x20000214

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	; 0x50
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2234      	movs	r2, #52	; 0x34
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fb2c 	bl	80047d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <SystemClock_Config+0xb8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a22      	ldr	r2, [pc, #136]	; (8001224 <SystemClock_Config+0xb8>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <SystemClock_Config+0xb8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <SystemClock_Config+0xbc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <SystemClock_Config+0xbc>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <SystemClock_Config+0xbc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2310      	movs	r3, #16
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 ff19 	bl	8003018 <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011ec:	f000 fc64 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fc40 	bl	8002a90 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001216:	f000 fc4f 	bl	8001ab8 <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	; 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_DAC_Init+0x4c>)
 800123c:	4a0f      	ldr	r2, [pc, #60]	; (800127c <MX_DAC_Init+0x50>)
 800123e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_DAC_Init+0x4c>)
 8001242:	f001 f95e 	bl	8002502 <HAL_DAC_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800124c:	f000 fc34 	bl	8001ab8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_DAC_Init+0x4c>)
 8001260:	f001 f9e8 	bl	8002634 <HAL_DAC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800126a:	f000 fc25 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000200 	.word	0x20000200
 800127c:	40007400 	.word	0x40007400

08001280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM2_Init+0x94>)
 800129e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM2_Init+0x94>)
 80012a6:	2263      	movs	r2, #99	; 0x63
 80012a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_TIM2_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM2_Init+0x94>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_TIM2_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_TIM2_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c2:	4814      	ldr	r0, [pc, #80]	; (8001314 <MX_TIM2_Init+0x94>)
 80012c4:	f002 f946 	bl	8003554 <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 fbf3 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d8:	f107 0308 	add.w	r3, r7, #8
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_TIM2_Init+0x94>)
 80012e0:	f002 fb2f 	bl	8003942 <HAL_TIM_ConfigClockSource>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80012ea:	f000 fbe5 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_TIM2_Init+0x94>)
 80012fc:	f002 fd4a 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001306:	f000 fbd7 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000214 	.word	0x20000214

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	463b      	mov	r3, r7
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_TIM3_Init+0x94>)
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <MX_TIM3_Init+0x98>)
 8001338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_TIM3_Init+0x94>)
 800133c:	229f      	movs	r2, #159	; 0x9f
 800133e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_TIM3_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_TIM3_Init+0x94>)
 8001348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_TIM3_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_TIM3_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <MX_TIM3_Init+0x94>)
 800135c:	f002 f8fa 	bl	8003554 <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 fba7 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_TIM3_Init+0x94>)
 8001378:	f002 fae3 	bl	8003942 <HAL_TIM_ConfigClockSource>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001382:	f000 fb99 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_TIM3_Init+0x94>)
 8001394:	f002 fcfe 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800139e:	f000 fb8b 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000025c 	.word	0x2000025c
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART2_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ec:	f002 fd62 	bl	8003eb4 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 fb5f 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002a4 	.word	0x200002a4
 8001404:	40004400 	.word	0x40004400

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_GPIO_Init+0x118>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <MX_GPIO_Init+0x118>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_GPIO_Init+0x118>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b38      	ldr	r3, [pc, #224]	; (8001520 <MX_GPIO_Init+0x118>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a37      	ldr	r2, [pc, #220]	; (8001520 <MX_GPIO_Init+0x118>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <MX_GPIO_Init+0x118>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <MX_GPIO_Init+0x118>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a30      	ldr	r2, [pc, #192]	; (8001520 <MX_GPIO_Init+0x118>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_GPIO_Init+0x118>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SobreCorrenteSaida_GPIO_Port, SobreCorrenteSaida_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2102      	movs	r1, #2
 8001476:	482b      	ldr	r0, [pc, #172]	; (8001524 <MX_GPIO_Init+0x11c>)
 8001478:	f001 fad8 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RELE_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001482:	4829      	ldr	r0, [pc, #164]	; (8001528 <MX_GPIO_Init+0x120>)
 8001484:	f001 fad2 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SobreCorrente_Pin */
  GPIO_InitStruct.Pin = SobreCorrente_Pin;
 8001488:	2301      	movs	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800148c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SobreCorrente_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	4821      	ldr	r0, [pc, #132]	; (8001524 <MX_GPIO_Init+0x11c>)
 800149e:	f001 f919 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SobreCorrenteSaida_Pin */
  GPIO_InitStruct.Pin = SobreCorrenteSaida_Pin;
 80014a2:	2302      	movs	r3, #2
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SobreCorrenteSaida_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	481a      	ldr	r0, [pc, #104]	; (8001524 <MX_GPIO_Init+0x11c>)
 80014ba:	f001 f90b 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RELE_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RELE_Pin;
 80014be:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <MX_GPIO_Init+0x120>)
 80014d8:	f001 f8fc 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 80014dc:	2308      	movs	r3, #8
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <MX_GPIO_Init+0x124>)
 80014f2:	f001 f8ef 	bl	80026d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	2006      	movs	r0, #6
 80014fc:	f000 ffcb 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001500:	2006      	movs	r0, #6
 8001502:	f000 ffe4 	bl	80024ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2101      	movs	r1, #1
 800150a:	2009      	movs	r0, #9
 800150c:	f000 ffc3 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001510:	2009      	movs	r0, #9
 8001512:	f000 ffdc 	bl	80024ce <HAL_NVIC_EnableIRQ>

}
 8001516:	bf00      	nop
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40020800 	.word	0x40020800
 8001528:	40020000 	.word	0x40020000
 800152c:	40020400 	.word	0x40020400

08001530 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	f040 81f1 	bne.w	8001926 <HAL_TIM_PeriodElapsedCallback+0x3f6>
		int passo;
		const float clockMhz=16.0;
 8001544:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8001548:	60bb      	str	r3, [r7, #8]
		if(SUBIDA) passo=100;
 800154a:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x28>
 8001552:	2364      	movs	r3, #100	; 0x64
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e002      	b.n	800155e <HAL_TIM_PeriodElapsedCallback+0x2e>
		else passo=-100;
 8001558:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800155c:	60fb      	str	r3, [r7, #12]
		tensao-=passo;
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	4a5b      	ldr	r2, [pc, #364]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001568:	6013      	str	r3, [r2, #0]

		if(tensao <= 0 || tensao >= 4095){
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	dd05      	ble.n	800157e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8001572:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f640 72fe 	movw	r2, #4094	; 0xffe
 800157a:	4293      	cmp	r3, r2
 800157c:	dd16      	ble.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x7c>
			HAL_TIM_Base_Stop_IT(&htim2);
 800157e:	4856      	ldr	r0, [pc, #344]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001580:	f002 f8a8 	bl	80036d4 <HAL_TIM_Base_Stop_IT>
			rampa = 0;
 8001584:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
			tensao=(tensao <= 0)?0:4095;
 800158a:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dc01      	bgt.n	8001596 <HAL_TIM_PeriodElapsedCallback+0x66>
 8001592:	2300      	movs	r3, #0
 8001594:	e001      	b.n	800159a <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001596:	f640 73ff 	movw	r3, #4095	; 0xfff
 800159a:	4a4e      	ldr	r2, [pc, #312]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800159c:	6013      	str	r3, [r2, #0]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, tensao);
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	484e      	ldr	r0, [pc, #312]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80015a8:	f001 f81f 	bl	80025ea <HAL_DAC_SetValue>
		}
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, tensao);
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	484a      	ldr	r0, [pc, #296]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80015b6:	f001 f818 	bl	80025ea <HAL_DAC_SetValue>

		if(SUBIDA) TIMER = (sqrt(1-251.4*pow(10.0, -6)*((float)(tensao-passo))+sin(1.58*pow(10.0, -3)*((float)(tensao-passo)))/6.28)*((float)(tempo)) - ELAPSED_TIME);
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8098 	beq.w	80016f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	ee17 0a90 	vmov	r0, s15
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	a336      	add	r3, pc, #216	; (adr r3, 80016b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f829 	bl	8000638 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	493d      	ldr	r1, [pc, #244]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015f0:	f7fe fe6a 	bl	80002c8 <__aeabi_dsub>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4614      	mov	r4, r2
 80015fa:	461d      	mov	r5, r3
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ffba 	bl	8000588 <__aeabi_f2d>
 8001614:	a32a      	add	r3, pc, #168	; (adr r3, 80016c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f80d 	bl	8000638 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	ec43 2b17 	vmov	d7, r2, r3
 8001626:	eeb0 0a47 	vmov.f32	s0, s14
 800162a:	eef0 0a67 	vmov.f32	s1, s15
 800162e:	f007 fd57 	bl	80090e0 <sin>
 8001632:	ec51 0b10 	vmov	r0, r1, d0
 8001636:	a324      	add	r3, pc, #144	; (adr r3, 80016c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f926 	bl	800088c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4620      	mov	r0, r4
 8001646:	4629      	mov	r1, r5
 8001648:	f7fe fe40 	bl	80002cc <__adddf3>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	ec43 2b17 	vmov	d7, r2, r3
 8001654:	eeb0 0a47 	vmov.f32	s0, s14
 8001658:	eef0 0a67 	vmov.f32	s1, s15
 800165c:	f007 fd98 	bl	8009190 <sqrt>
 8001660:	ec55 4b10 	vmov	r4, r5, d0
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	ee17 0a90 	vmov	r0, s15
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe ffda 	bl	8000638 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff79 	bl	8000588 <__aeabi_f2d>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4620      	mov	r0, r4
 800169c:	4629      	mov	r1, r5
 800169e:	f7fe fe13 	bl	80002c8 <__aeabi_dsub>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fabd 	bl	8000c28 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e09c      	b.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 80016b6:	bf00      	nop
 80016b8:	c7390f15 	.word	0xc7390f15
 80016bc:	3f3079ca 	.word	0x3f3079ca
 80016c0:	14f8b589 	.word	0x14f8b589
 80016c4:	3f59e300 	.word	0x3f59e300
 80016c8:	51eb851f 	.word	0x51eb851f
 80016cc:	40191eb8 	.word	0x40191eb8
 80016d0:	200002f1 	.word	0x200002f1
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000214 	.word	0x20000214
 80016dc:	200002f0 	.word	0x200002f0
 80016e0:	20000200 	.word	0x20000200
 80016e4:	3ff00000 	.word	0x3ff00000
 80016e8:	20000300 	.word	0x20000300
 80016ec:	200002ec 	.word	0x200002ec
 80016f0:	200002e8 	.word	0x200002e8
		else TIMER = (sqrt(1-251.4*pow(10.0, -6)*((float)(4095 - (tensao-passo)))+sin(1.58*pow(10.0, -3)*((float)(4095 - (tensao-passo))))/6.28)*((float)(tempo)) - ELAPSED_TIME);
 80016f4:	4bc0      	ldr	r3, [pc, #768]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001700:	330f      	adds	r3, #15
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ee17 0a90 	vmov	r0, s15
 800170e:	f7fe ff3b 	bl	8000588 <__aeabi_f2d>
 8001712:	a3b1      	add	r3, pc, #708	; (adr r3, 80019d8 <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff8e 	bl	8000638 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	f04f 0000 	mov.w	r0, #0
 8001724:	49b5      	ldr	r1, [pc, #724]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001726:	f7fe fdcf 	bl	80002c8 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4614      	mov	r4, r2
 8001730:	461d      	mov	r5, r3
 8001732:	4bb1      	ldr	r3, [pc, #708]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800173e:	330f      	adds	r3, #15
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	ee17 0a90 	vmov	r0, s15
 800174c:	f7fe ff1c 	bl	8000588 <__aeabi_f2d>
 8001750:	a3a3      	add	r3, pc, #652	; (adr r3, 80019e0 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ff6f 	bl	8000638 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	ec43 2b17 	vmov	d7, r2, r3
 8001762:	eeb0 0a47 	vmov.f32	s0, s14
 8001766:	eef0 0a67 	vmov.f32	s1, s15
 800176a:	f007 fcb9 	bl	80090e0 <sin>
 800176e:	ec51 0b10 	vmov	r0, r1, d0
 8001772:	a39d      	add	r3, pc, #628	; (adr r3, 80019e8 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7ff f888 	bl	800088c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fda2 	bl	80002cc <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	ec43 2b17 	vmov	d7, r2, r3
 8001790:	eeb0 0a47 	vmov.f32	s0, s14
 8001794:	eef0 0a67 	vmov.f32	s1, s15
 8001798:	f007 fcfa 	bl	8009190 <sqrt>
 800179c:	ec55 4b10 	vmov	r4, r5, d0
 80017a0:	4b97      	ldr	r3, [pc, #604]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ee17 0a90 	vmov	r0, s15
 80017b0:	f7fe feea 	bl	8000588 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4620      	mov	r0, r4
 80017ba:	4629      	mov	r1, r5
 80017bc:	f7fe ff3c 	bl	8000638 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4614      	mov	r4, r2
 80017c6:	461d      	mov	r5, r3
 80017c8:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fedb 	bl	8000588 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fd75 	bl	80002c8 <__aeabi_dsub>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f7ff fa1f 	bl	8000c28 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4a86      	ldr	r2, [pc, #536]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80017ee:	6013      	str	r3, [r2, #0]

		TIM2->ARR = (uint32_t)(TIMER*(clockMhz*pow(10.0, 6))/(TIM2->PSC+1))+1;
 80017f0:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fec7 	bl	8000588 <__aeabi_f2d>
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	68b8      	ldr	r0, [r7, #8]
 8001800:	f7fe fec2 	bl	8000588 <__aeabi_f2d>
 8001804:	a37a      	add	r3, pc, #488	; (adr r3, 80019f0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe ff15 	bl	8000638 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe ff0f 	bl	8000638 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	461d      	mov	r5, r3
 8001822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	3301      	adds	r3, #1
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe8a 	bl	8000544 <__aeabi_ui2d>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7ff f828 	bl	800088c <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff f9d0 	bl	8000be8 <__aeabi_d2uiz>
 8001848:	4603      	mov	r3, r0
 800184a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800184e:	3301      	adds	r3, #1
 8001850:	62d3      	str	r3, [r2, #44]	; 0x2c
		if(TIM2->ARR < 500) TIM2->ARR = 500;
 8001852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800185c:	d204      	bcs.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x338>
 800185e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001862:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c

		ELAPSED_TIME+=(float)((1+TIM2->ARR)*(1+TIM2->PSC))/(clockMhz*pow(10.0, 6));
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	3301      	adds	r3, #1
 8001870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001874:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001876:	3201      	adds	r2, #1
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001884:	ee17 0a90 	vmov	r0, s15
 8001888:	f7fe fe7e 	bl	8000588 <__aeabi_f2d>
 800188c:	4604      	mov	r4, r0
 800188e:	460d      	mov	r5, r1
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	a356      	add	r3, pc, #344	; (adr r3, 80019f0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fecc 	bl	8000638 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fff0 	bl	800088c <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe65 	bl	8000588 <__aeabi_f2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fd01 	bl	80002cc <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff f9a9 	bl	8000c28 <__aeabi_d2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80018da:	6013      	str	r3, [r2, #0]

		serial_puts("TENSAO: ");
 80018dc:	484b      	ldr	r0, [pc, #300]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80018de:	f000 f903 	bl	8001ae8 <serial_puts>
		serial_putd(tensao);
 80018e2:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f91e 	bl	8001b28 <serial_putd>
		serial_nl(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f000 f95d 	bl	8001bac <serial_nl>
		serial_puts("ELAPSED_TIME: ");
 80018f2:	4847      	ldr	r0, [pc, #284]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80018f4:	f000 f8f8 	bl	8001ae8 <serial_puts>
		serial_putf(ELAPSED_TIME);
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001902:	f000 f929 	bl	8001b58 <serial_putf>
		serial_nl(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f000 f950 	bl	8001bac <serial_nl>
		serial_puts("ARR: ");
 800190c:	4841      	ldr	r0, [pc, #260]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 800190e:	f000 f8eb 	bl	8001ae8 <serial_puts>
		serial_putd(TIM2->ARR);
 8001912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f905 	bl	8001b28 <serial_putd>
		serial_nl(2);
 800191e:	2002      	movs	r0, #2
 8001920:	f000 f944 	bl	8001bac <serial_nl>
		}
		if(timerContNB>=10){	//0,1s (10*0,01s)
			timerContNA=0;
		}
	}
}
 8001924:	e054      	b.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0x4a0>
		timerContNA+=sobreCorrenteNA;
 8001926:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4413      	add	r3, r2
 8001932:	4a3a      	ldr	r2, [pc, #232]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8001934:	6013      	str	r3, [r2, #0]
		timerContNB+=!sobreCorrenteNA;
 8001936:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a35      	ldr	r2, [pc, #212]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800194a:	6013      	str	r3, [r2, #0]
		timerCont+=timerContNB_FLAG;
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a33      	ldr	r2, [pc, #204]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800195a:	6013      	str	r3, [r2, #0]
		if(timerContNA>=20){	//0,2s (20*0,01s)
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b13      	cmp	r3, #19
 8001962:	dd27      	ble.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x484>
			  HAL_TIM_Base_Stop_IT(&htim2);
 8001964:	4831      	ldr	r0, [pc, #196]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001966:	f001 feb5 	bl	80036d4 <HAL_TIM_Base_Stop_IT>
			  tensao=4095;
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800196c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001970:	601a      	str	r2, [r3, #0]
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, tensao);
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	482d      	ldr	r0, [pc, #180]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800197c:	f000 fe35 	bl	80025ea <HAL_DAC_SetValue>
			  HAL_GPIO_WritePin(RELE_GPIO_Port, RELE_Pin, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001986:	482b      	ldr	r0, [pc, #172]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001988:	f001 f850 	bl	8002a2c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SobreCorrenteSaida_GPIO_Port, SobreCorrenteSaida_Pin, 1);
 800198c:	2201      	movs	r2, #1
 800198e:	2102      	movs	r1, #2
 8001990:	4829      	ldr	r0, [pc, #164]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001992:	f001 f84b 	bl	8002a2c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SobreCorrenteSaida_GPIO_Port, SobreCorrenteSaida_Pin, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2102      	movs	r1, #2
 800199a:	4827      	ldr	r0, [pc, #156]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800199c:	f001 f846 	bl	8002a2c <HAL_GPIO_WritePin>
			  serial_nl(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f000 f903 	bl	8001bac <serial_nl>
			  serial_puts("SOBRE CORRENTE! Pressione o botao de reinicializacao para reiniciar o Soft Starter.");
 80019a6:	4825      	ldr	r0, [pc, #148]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80019a8:	f000 f89e 	bl	8001ae8 <serial_puts>
			  serial_nl(1);
 80019ac:	2001      	movs	r0, #1
 80019ae:	f000 f8fd 	bl	8001bac <serial_nl>
			  while(1){}
 80019b2:	e7fe      	b.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x482>
		if(timerCont>2){	//se o sobre corrente continuar desligado por mais de  0,02s começa a contagem do timerContNB
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	dd02      	ble.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x492>
			sobreCorrenteNA=0;
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
		if(timerContNB>=10){	//0,1s (10*0,01s)
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b09      	cmp	r3, #9
 80019c8:	dd02      	ble.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0x4a0>
			timerContNA=0;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bdb0      	pop	{r4, r5, r7, pc}
 80019d8:	c7390f15 	.word	0xc7390f15
 80019dc:	3f3079ca 	.word	0x3f3079ca
 80019e0:	14f8b589 	.word	0x14f8b589
 80019e4:	3f59e300 	.word	0x3f59e300
 80019e8:	51eb851f 	.word	0x51eb851f
 80019ec:	40191eb8 	.word	0x40191eb8
 80019f0:	00000000 	.word	0x00000000
 80019f4:	412e8480 	.word	0x412e8480
 80019f8:	20000000 	.word	0x20000000
 80019fc:	3ff00000 	.word	0x3ff00000
 8001a00:	20000300 	.word	0x20000300
 8001a04:	200002ec 	.word	0x200002ec
 8001a08:	200002e8 	.word	0x200002e8
 8001a0c:	0800a384 	.word	0x0800a384
 8001a10:	0800a390 	.word	0x0800a390
 8001a14:	0800a3a0 	.word	0x0800a3a0
 8001a18:	200002f2 	.word	0x200002f2
 8001a1c:	200002f4 	.word	0x200002f4
 8001a20:	200002f8 	.word	0x200002f8
 8001a24:	200002f3 	.word	0x200002f3
 8001a28:	200002fc 	.word	0x200002fc
 8001a2c:	20000214 	.word	0x20000214
 8001a30:	20000200 	.word	0x20000200
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	0800a3a8 	.word	0x0800a3a8

08001a40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SobreCorrente_Pin){
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d121      	bne.n	8001a94 <HAL_GPIO_EXTI_Callback+0x54>
	  if(HAL_GPIO_ReadPin(SobreCorrente_GPIO_Port, SobreCorrente_Pin)){
 8001a50:	2101      	movs	r1, #1
 8001a52:	4813      	ldr	r0, [pc, #76]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a54:	f000 ffd2 	bl	80029fc <HAL_GPIO_ReadPin>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d011      	beq.n	8001a82 <HAL_GPIO_EXTI_Callback+0x42>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2120      	movs	r1, #32
 8001a62:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a64:	f000 ffe2 	bl	8002a2c <HAL_GPIO_WritePin>
		  timerContNB=0;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
		  timerContNB_FLAG=0;
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
		  timerCont=0;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

		  sobreCorrenteNA=1;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		  timerContNB_FLAG=1;
	  }
	}else{
		NVIC_SystemReset();
	}
}
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_EXTI_Callback+0x58>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2120      	movs	r1, #32
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a88:	f000 ffd0 	bl	8002a2c <HAL_GPIO_WritePin>
		  timerContNB_FLAG=1;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
}
 8001a92:	e001      	b.n	8001a98 <HAL_GPIO_EXTI_Callback+0x58>
		NVIC_SystemReset();
 8001a94:	f7ff fad0 	bl	8001038 <__NVIC_SystemReset>
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	200002f8 	.word	0x200002f8
 8001aac:	200002f3 	.word	0x200002f3
 8001ab0:	200002fc 	.word	0x200002fc
 8001ab4:	200002f2 	.word	0x200002f2

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <serial_putc>:
extern UART_HandleTypeDef huart2;

/*tamanho máximo das strings recebidas e transmitidas*/
#define LEN 200

void serial_putc(int ch){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001acc:	1d39      	adds	r1, r7, #4
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <serial_putc+0x20>)
 8001ad6:	f002 fa3a 	bl	8003f4e <HAL_UART_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002a4 	.word	0x200002a4

08001ae8 <serial_puts>:

int serial_puts(char *ptr){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < LEN; DataIdx++){
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e00d      	b.n	8001b12 <serial_puts+0x2a>
		if(*ptr == '\0') break;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <serial_puts+0x32>
		serial_putc(*ptr++);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ffdc 	bl	8001ac4 <serial_putc>
	for (DataIdx = 0; DataIdx < LEN; DataIdx++){
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2bc7      	cmp	r3, #199	; 0xc7
 8001b16:	ddee      	ble.n	8001af6 <serial_puts+0xe>
 8001b18:	e000      	b.n	8001b1c <serial_puts+0x34>
		if(*ptr == '\0') break;
 8001b1a:	bf00      	nop
	}
	return DataIdx;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <serial_putd>:

int serial_putd(int number){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int DataIdx;
	char str[20];

	sprintf(str, "%d", number);
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4907      	ldr	r1, [pc, #28]	; (8001b54 <serial_putd+0x2c>)
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 fcd5 	bl	80054e8 <siprintf>

	DataIdx = serial_puts(str);
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ffd0 	bl	8001ae8 <serial_puts>
 8001b48:	61f8      	str	r0, [r7, #28]

	return DataIdx;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	0800a3fc 	.word	0x0800a3fc

08001b58 <serial_putf>:

int serial_putf(float number){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0a01 	vstr	s0, [r7, #4]
	int DataIdx;
	char str[20];

	sprintf(str, "%.2f", number);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fd10 	bl	8000588 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	f107 0008 	add.w	r0, r7, #8
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <serial_putf+0x34>)
 8001b72:	f003 fcb9 	bl	80054e8 <siprintf>

	DataIdx = serial_puts(str);
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffb4 	bl	8001ae8 <serial_puts>
 8001b80:	61f8      	str	r0, [r7, #28]

	return DataIdx;
 8001b82:	69fb      	ldr	r3, [r7, #28]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	0800a400 	.word	0x0800a400

08001b90 <serial_clearscr>:

void serial_clearscr(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	serial_puts("\x1b[1;1H");
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <serial_clearscr+0x14>)
 8001b96:	f7ff ffa7 	bl	8001ae8 <serial_puts>
	serial_puts("\x1b[3J");
 8001b9a:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <serial_clearscr+0x18>)
 8001b9c:	f7ff ffa4 	bl	8001ae8 <serial_puts>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	0800a408 	.word	0x0800a408
 8001ba8:	0800a410 	.word	0x0800a410

08001bac <serial_nl>:

void serial_nl(int i){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	for(int j=0; j<i; j++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e008      	b.n	8001bcc <serial_nl+0x20>
		serial_putc('\r');
 8001bba:	200d      	movs	r0, #13
 8001bbc:	f7ff ff82 	bl	8001ac4 <serial_putc>
		serial_putc('\n');
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f7ff ff7f 	bl	8001ac4 <serial_putc>
	for(int j=0; j<i; j++){
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dbf2      	blt.n	8001bba <serial_nl+0xe>
	}
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <serial_pause>:

void serial_pause(){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	71fb      	strb	r3, [r7, #7]
	serial_puts("Presssione qualquer tecla para continuar...");
 8001bea:	480a      	ldr	r0, [pc, #40]	; (8001c14 <serial_pause+0x34>)
 8001bec:	f7ff ff7c 	bl	8001ae8 <serial_puts>
	while(!ch) HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001bf0:	e006      	b.n	8001c00 <serial_pause+0x20>
 8001bf2:	1df9      	adds	r1, r7, #7
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <serial_pause+0x38>)
 8001bfc:	f002 fa39 	bl	8004072 <HAL_UART_Receive>
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f5      	beq.n	8001bf2 <serial_pause+0x12>
	serial_nl(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff ffd0 	bl	8001bac <serial_nl>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	0800a418 	.word	0x0800a418
 8001c18:	200002a4 	.word	0x200002a4

08001c1c <serial_getc>:

int serial_getc(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	71fb      	strb	r3, [r7, #7]

	/*limpa a flag de overrun antes de receber o caractere*/
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <serial_getc+0x78>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <serial_getc+0x78>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]

	/*espera um caractere e printa ele no console*/
	HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001c3c:	1df9      	adds	r1, r7, #7
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	2201      	movs	r2, #1
 8001c44:	4813      	ldr	r0, [pc, #76]	; (8001c94 <serial_getc+0x78>)
 8001c46:	f002 fa14 	bl	8004072 <HAL_UART_Receive>
	if(ch == '\b'){	//backspace
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d115      	bne.n	8001c7c <serial_getc+0x60>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\b", 1, HAL_MAX_DELAY);
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
 8001c54:	2201      	movs	r2, #1
 8001c56:	4910      	ldr	r1, [pc, #64]	; (8001c98 <serial_getc+0x7c>)
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <serial_getc+0x78>)
 8001c5a:	f002 f978 	bl	8003f4e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)" " , 1, HAL_MAX_DELAY);
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	2201      	movs	r2, #1
 8001c64:	490d      	ldr	r1, [pc, #52]	; (8001c9c <serial_getc+0x80>)
 8001c66:	480b      	ldr	r0, [pc, #44]	; (8001c94 <serial_getc+0x78>)
 8001c68:	f002 f971 	bl	8003f4e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\b", 1, HAL_MAX_DELAY);
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	2201      	movs	r2, #1
 8001c72:	4909      	ldr	r1, [pc, #36]	; (8001c98 <serial_getc+0x7c>)
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <serial_getc+0x78>)
 8001c76:	f002 f96a 	bl	8003f4e <HAL_UART_Transmit>
 8001c7a:	e006      	b.n	8001c8a <serial_getc+0x6e>
	}else
		HAL_UART_Transmit(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001c7c:	1df9      	adds	r1, r7, #7
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	2201      	movs	r2, #1
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <serial_getc+0x78>)
 8001c86:	f002 f962 	bl	8003f4e <HAL_UART_Transmit>

	return ch;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200002a4 	.word	0x200002a4
 8001c98:	0800a444 	.word	0x0800a444
 8001c9c:	0800a448 	.word	0x0800a448

08001ca0 <serial_gets>:

int serial_gets(char *ptr){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	int DataIdx;
	char *startPtr = ptr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60bb      	str	r3, [r7, #8]

	for (DataIdx = 0; DataIdx < LEN; DataIdx++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e029      	b.n	8001d06 <serial_gets+0x66>
	{
		*ptr = serial_getc();
 8001cb2:	f7ff ffb3 	bl	8001c1c <serial_getc>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	701a      	strb	r2, [r3, #0]

		if(*ptr == '\r'){	//carriage return
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b0d      	cmp	r3, #13
 8001cc4:	d106      	bne.n	8001cd4 <serial_gets+0x34>
			*ptr = '\0';
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
			serial_putc('\n');
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f7ff fef9 	bl	8001ac4 <serial_putc>
			break;
 8001cd2:	e01b      	b.n	8001d0c <serial_gets+0x6c>
		}else if(*ptr == '\b'){	//backspace
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d10e      	bne.n	8001cfa <serial_gets+0x5a>
			if(ptr!=startPtr){
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d006      	beq.n	8001cf2 <serial_gets+0x52>
				ptr--;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
				DataIdx-=2;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3b02      	subs	r3, #2
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e006      	b.n	8001d00 <serial_gets+0x60>
			}else{
				DataIdx--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e002      	b.n	8001d00 <serial_gets+0x60>
			}
		}else{
			ptr++;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	607b      	str	r3, [r7, #4]
	for (DataIdx = 0; DataIdx < LEN; DataIdx++)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2bc7      	cmp	r3, #199	; 0xc7
 8001d0a:	ddd2      	ble.n	8001cb2 <serial_gets+0x12>
		}

	}

	return DataIdx;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <serial_getd>:

int serial_getd(int *number){
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b088      	sub	sp, #32
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
	char str[20];
	int DataIdx;

	DataIdx = serial_gets(str);
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ffbc 	bl	8001ca0 <serial_gets>
 8001d28:	61f8      	str	r0, [r7, #28]

	*number = atoi(str);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fd24 	bl	800477c <atoi>
 8001d34:	4602      	mov	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]

	return DataIdx;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_DAC_MspInit+0x7c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d127      	bne.n	8001e06 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_DAC_MspInit+0x80>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = FiringAngle_Pin;
 8001dee:	2310      	movs	r3, #16
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df2:	2303      	movs	r3, #3
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FiringAngle_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_DAC_MspInit+0x84>)
 8001e02:	f000 fc67 	bl	80026d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40007400 	.word	0x40007400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d116      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_TIM_Base_MspInit+0x80>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_TIM_Base_MspInit+0x80>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_TIM_Base_MspInit+0x80>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	201c      	movs	r0, #28
 8001e50:	f000 fb21 	bl	8002496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e54:	201c      	movs	r0, #28
 8001e56:	f000 fb3a 	bl	80024ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e5a:	e01a      	b.n	8001e92 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_TIM_Base_MspInit+0x84>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d115      	bne.n	8001e92 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_TIM_Base_MspInit+0x80>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <HAL_TIM_Base_MspInit+0x80>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_TIM_Base_MspInit+0x80>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	201d      	movs	r0, #29
 8001e88:	f000 fb05 	bl	8002496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e8c:	201d      	movs	r0, #29
 8001e8e:	f000 fb1e 	bl	80024ce <HAL_NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12b      	bne.n	8001f1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_UART_MspInit+0x88>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001efe:	230c      	movs	r3, #12
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HAL_UART_MspInit+0x8c>)
 8001f1a:	f000 fbdb 	bl	80026d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f1e:	bf00      	nop
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020000 	.word	0x40020000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f98e 	bl	80022a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SobreCorrente_Pin);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f000 fd67 	bl	8002a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001f9a:	2008      	movs	r0, #8
 8001f9c:	f000 fd60 	bl	8002a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <TIM2_IRQHandler+0x10>)
 8001faa:	f001 fbc2 	bl	8003732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000214 	.word	0x20000214

08001fb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <TIM3_IRQHandler+0x10>)
 8001fbe:	f001 fbb8 	bl	8003732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000025c 	.word	0x2000025c

08001fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_kill>:

int _kill(int pid, int sig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fe6:	f002 fbcd 	bl	8004784 <__errno>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2216      	movs	r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
	return -1;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_exit>:

void _exit (int status)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffe7 	bl	8001fdc <_kill>
	while (1) {}		/* Make sure we hang here */
 800200e:	e7fe      	b.n	800200e <_exit+0x12>

08002010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e021      	b.n	8002066 <_read+0x56>
	{
		*ptr = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4603      	mov	r3, r0
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	701a      	strb	r2, [r3, #0]

		if(*ptr == '\r'){	//carriage return
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b0d      	cmp	r3, #13
 8002034:	d106      	bne.n	8002044 <_read+0x34>
			*ptr = '\0';
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
			__io_putchar('\n');
 800203c:	200a      	movs	r0, #10
 800203e:	f3af 8000 	nop.w
			break;
 8002042:	e014      	b.n	800206e <_read+0x5e>
		}else if(*ptr == '\b'){	//backspace
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d106      	bne.n	800205a <_read+0x4a>
			ptr--;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3b01      	subs	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
			DataIdx-=2;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3b02      	subs	r3, #2
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e002      	b.n	8002060 <_read+0x50>
		}else{
			ptr++;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbd9      	blt.n	8002022 <_read+0x12>
		}

	}

	return len;
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e009      	b.n	800209e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	60ba      	str	r2, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dbf1      	blt.n	800208a <_write+0x12>
	}
	return len;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_close>:

int _close(int file)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	return -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d8:	605a      	str	r2, [r3, #4]
	return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_isatty>:

int _isatty(int file)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
	return 0;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <_sbrk+0x5c>)
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_sbrk+0x60>)
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <_sbrk+0x64>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <_sbrk+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002148:	f002 fb1c 	bl	8004784 <__errno>
 800214c:	4603      	mov	r3, r0
 800214e:	220c      	movs	r2, #12
 8002150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	e009      	b.n	800216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <_sbrk+0x64>)
 8002168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20020000 	.word	0x20020000
 8002178:	00000400 	.word	0x00000400
 800217c:	20000304 	.word	0x20000304
 8002180:	20000320 	.word	0x20000320

08002184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <SystemInit+0x20>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <SystemInit+0x20>)
 8002190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021a8:	480d      	ldr	r0, [pc, #52]	; (80021e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021ac:	f7ff ffea 	bl	8002184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021b2:	490d      	ldr	r1, [pc, #52]	; (80021e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <LoopForever+0xe>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c8:	4c0a      	ldr	r4, [pc, #40]	; (80021f4 <LoopForever+0x16>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021d6:	f002 fadb 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021da:	f7fe ff43 	bl	8001064 <main>

080021de <LoopForever>:

LoopForever:
    b LoopForever
 80021de:	e7fe      	b.n	80021de <LoopForever>
  ldr   r0, =_estack
 80021e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021ec:	0800aaf8 	.word	0x0800aaf8
  ldr r2, =_sbss
 80021f0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80021f4:	2000031c 	.word	0x2000031c

080021f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC_IRQHandler>
	...

080021fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <HAL_Init+0x40>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_Init+0x40>)
 8002212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_Init+0x40>)
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f92b 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222a:	200f      	movs	r0, #15
 800222c:	f000 f808 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff fd88 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023c00 	.word	0x40023c00

08002240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x54>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x58>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f943 	bl	80024ea <HAL_SYSTICK_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00e      	b.n	800228c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d80a      	bhi.n	800228a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f000 f90b 	bl	8002496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_InitTick+0x5c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000004 	.word	0x20000004
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	20000308 	.word	0x20000308

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000308 	.word	0x20000308

080022e0 <__NVIC_SetPriorityGrouping>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244c:	d301      	bcc.n	8002452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244e:	2301      	movs	r3, #1
 8002450:	e00f      	b.n	8002472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <SysTick_Config+0x40>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245a:	210f      	movs	r1, #15
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f7ff ff8e 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <SysTick_Config+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <SysTick_Config+0x40>)
 800246c:	2207      	movs	r2, #7
 800246e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000e010 	.word	0xe000e010

08002480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff29 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a8:	f7ff ff3e 	bl	8002328 <__NVIC_GetPriorityGrouping>
 80024ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7ff ff8e 	bl	80023d4 <NVIC_EncodePriority>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff5d 	bl	8002380 <__NVIC_SetPriority>
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff31 	bl	8002344 <__NVIC_EnableIRQ>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffa2 	bl	800243c <SysTick_Config>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e014      	b.n	800253e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff fc35 	bl	8001d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	795b      	ldrb	r3, [r3, #5]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_DAC_Start+0x16>
 8002558:	2302      	movs	r3, #2
 800255a:	e040      	b.n	80025de <HAL_DAC_Start+0x98>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2201      	movs	r2, #1
 8002576:	409a      	lsls	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002590:	2b3c      	cmp	r3, #60	; 0x3c
 8002592:	d11d      	bne.n	80025d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	e014      	b.n	80025d0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	213c      	movs	r1, #60	; 0x3c
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	429a      	cmp	r2, r3
 80025be:	d107      	bne.n	80025d0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0202 	orr.w	r2, r2, #2
 80025ce:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b087      	sub	sp, #28
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	3308      	adds	r3, #8
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e004      	b.n	800261e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	3314      	adds	r3, #20
 800261c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	461a      	mov	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	795b      	ldrb	r3, [r3, #5]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_DAC_ConfigChannel+0x18>
 8002648:	2302      	movs	r3, #2
 800264a:	e03c      	b.n	80026c6 <HAL_DAC_ConfigChannel+0x92>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	f640 72fe 	movw	r2, #4094	; 0xffe
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4013      	ands	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	22c0      	movs	r2, #192	; 0xc0
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e165      	b.n	80029bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	f040 8154 	bne.w	80029b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d005      	beq.n	8002726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002722:	2b02      	cmp	r3, #2
 8002724:	d130      	bne.n	8002788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275c:	2201      	movs	r2, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 0201 	and.w	r2, r3, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b03      	cmp	r3, #3
 8002792:	d017      	beq.n	80027c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d123      	bne.n	8002818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ae 	beq.w	80029b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_GPIO_Init+0x300>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a5c      	ldr	r2, [pc, #368]	; (80029d4 <HAL_GPIO_Init+0x300>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b5a      	ldr	r3, [pc, #360]	; (80029d4 <HAL_GPIO_Init+0x300>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_GPIO_Init+0x304>)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	220f      	movs	r2, #15
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4f      	ldr	r2, [pc, #316]	; (80029dc <HAL_GPIO_Init+0x308>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d025      	beq.n	80028ee <HAL_GPIO_Init+0x21a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_GPIO_Init+0x30c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01f      	beq.n	80028ea <HAL_GPIO_Init+0x216>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_GPIO_Init+0x310>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_Init+0x212>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_GPIO_Init+0x314>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4b      	ldr	r2, [pc, #300]	; (80029ec <HAL_GPIO_Init+0x318>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_Init+0x20a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4a      	ldr	r2, [pc, #296]	; (80029f0 <HAL_GPIO_Init+0x31c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x206>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <HAL_GPIO_Init+0x320>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_Init+0x202>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e00c      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028d6:	2307      	movs	r3, #7
 80028d8:	e00a      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028da:	2305      	movs	r3, #5
 80028dc:	e008      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028de:	2304      	movs	r3, #4
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028e2:	2303      	movs	r3, #3
 80028e4:	e004      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e002      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_GPIO_Init+0x21c>
 80028ee:	2300      	movs	r3, #0
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f002 0203 	and.w	r2, r2, #3
 80028f6:	0092      	lsls	r2, r2, #2
 80028f8:	4093      	lsls	r3, r2
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002900:	4935      	ldr	r1, [pc, #212]	; (80029d8 <HAL_GPIO_Init+0x304>)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	089b      	lsrs	r3, r3, #2
 8002906:	3302      	adds	r3, #2
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <HAL_GPIO_Init+0x324>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <HAL_GPIO_Init+0x324>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_GPIO_Init+0x324>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_GPIO_Init+0x324>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_GPIO_Init+0x324>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_GPIO_Init+0x324>)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_GPIO_Init+0x324>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_GPIO_Init+0x324>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3301      	adds	r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f67f ae96 	bls.w	80026f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40013800 	.word	0x40013800
 80029dc:	40020000 	.word	0x40020000
 80029e0:	40020400 	.word	0x40020400
 80029e4:	40020800 	.word	0x40020800
 80029e8:	40020c00 	.word	0x40020c00
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40021400 	.word	0x40021400
 80029f4:	40021800 	.word	0x40021800
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e001      	b.n	8002a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a48:	e003      	b.n	8002a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	619a      	str	r2, [r3, #24]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a76:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe ffde 	bl	8001a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0cc      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d90c      	bls.n	8002acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b65      	ldr	r3, [pc, #404]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a52      	ldr	r2, [pc, #328]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494d      	ldr	r1, [pc, #308]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d044      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d119      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e067      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6e:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f023 0203 	bic.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4934      	ldr	r1, [pc, #208]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b80:	f7ff fba2 	bl	80022c8 <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b88:	f7ff fb9e 	bl	80022c8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e04f      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 020c 	and.w	r2, r3, #12
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d1eb      	bne.n	8002b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d20c      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e032      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4916      	ldr	r1, [pc, #88]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f855 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	490a      	ldr	r1, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	5ccb      	ldrb	r3, [r1, r3]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_RCC_ClockConfig+0x1c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fb02 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	0800a44c 	.word	0x0800a44c
 8002c54:	20000004 	.word	0x20000004
 8002c58:	20000008 	.word	0x20000008

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff0 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	0a9b      	lsrs	r3, r3, #10
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	4903      	ldr	r1, [pc, #12]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	0800a45c 	.word	0x0800a45c

08002c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca0:	f7ff ffdc 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0b5b      	lsrs	r3, r3, #13
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb2:	5ccb      	ldrb	r3, [r1, r3]
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	0800a45c 	.word	0x0800a45c

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b0a6      	sub	sp, #152	; 0x98
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cea:	4bc8      	ldr	r3, [pc, #800]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	f200 817e 	bhi.w	8002ff4 <HAL_RCC_GetSysClockFreq+0x330>
 8002cf8:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002ff5 	.word	0x08002ff5
 8002d08:	08002ff5 	.word	0x08002ff5
 8002d0c:	08002ff5 	.word	0x08002ff5
 8002d10:	08002d3d 	.word	0x08002d3d
 8002d14:	08002ff5 	.word	0x08002ff5
 8002d18:	08002ff5 	.word	0x08002ff5
 8002d1c:	08002ff5 	.word	0x08002ff5
 8002d20:	08002d45 	.word	0x08002d45
 8002d24:	08002ff5 	.word	0x08002ff5
 8002d28:	08002ff5 	.word	0x08002ff5
 8002d2c:	08002ff5 	.word	0x08002ff5
 8002d30:	08002eaf 	.word	0x08002eaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4bb6      	ldr	r3, [pc, #728]	; (8003010 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002d3a:	e15f      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3c:	4bb5      	ldr	r3, [pc, #724]	; (8003014 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d42:	e15b      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d44:	4bb1      	ldr	r3, [pc, #708]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d50:	4bae      	ldr	r3, [pc, #696]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d031      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5c:	4bab      	ldr	r3, [pc, #684]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	2200      	movs	r2, #0
 8002d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002d70:	2300      	movs	r3, #0
 8002d72:	667b      	str	r3, [r7, #100]	; 0x64
 8002d74:	4ba7      	ldr	r3, [pc, #668]	; (8003014 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d7a:	462a      	mov	r2, r5
 8002d7c:	fb03 f202 	mul.w	r2, r3, r2
 8002d80:	2300      	movs	r3, #0
 8002d82:	4621      	mov	r1, r4
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	4aa2      	ldr	r2, [pc, #648]	; (8003014 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	fba1 1202 	umull	r1, r2, r1, r2
 8002d92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d94:	460a      	mov	r2, r1
 8002d96:	67ba      	str	r2, [r7, #120]	; 0x78
 8002d98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d9a:	4413      	add	r3, r2
 8002d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da2:	2200      	movs	r2, #0
 8002da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002da8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002db0:	f7fd ff8a 	bl	8000cc8 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dbe:	e064      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc0:	4b92      	ldr	r3, [pc, #584]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dca:	657a      	str	r2, [r7, #84]	; 0x54
 8002dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	f04f 0000 	mov.w	r0, #0
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	0159      	lsls	r1, r3, #5
 8002dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dee:	0150      	lsls	r0, r2, #5
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4621      	mov	r1, r4
 8002df6:	1a51      	subs	r1, r2, r1
 8002df8:	6139      	str	r1, [r7, #16]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e0e:	4659      	mov	r1, fp
 8002e10:	018b      	lsls	r3, r1, #6
 8002e12:	4651      	mov	r1, sl
 8002e14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e18:	4651      	mov	r1, sl
 8002e1a:	018a      	lsls	r2, r1, #6
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ebb2 0801 	subs.w	r8, r2, r1
 8002e22:	4659      	mov	r1, fp
 8002e24:	eb63 0901 	sbc.w	r9, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	4699      	mov	r9, r3
 8002e40:	4623      	mov	r3, r4
 8002e42:	eb18 0303 	adds.w	r3, r8, r3
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	462b      	mov	r3, r5
 8002e4a:	eb49 0303 	adc.w	r3, r9, r3
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	028b      	lsls	r3, r1, #10
 8002e60:	4621      	mov	r1, r4
 8002e62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e66:	4621      	mov	r1, r4
 8002e68:	028a      	lsls	r2, r1, #10
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e72:	2200      	movs	r2, #0
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
 8002e76:	647a      	str	r2, [r7, #68]	; 0x44
 8002e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e7c:	f7fd ff24 	bl	8000cc8 <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e8a:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	3301      	adds	r3, #1
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002e9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002eac:	e0a6      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02a      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <HAL_RCC_GetSysClockFreq+0x350>)
 8002edc:	fb03 f201 	mul.w	r2, r3, r1
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	fb00 f303 	mul.w	r3, r0, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a4a      	ldr	r2, [pc, #296]	; (8003014 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eea:	fba0 1202 	umull	r1, r2, r0, r2
 8002eee:	677a      	str	r2, [r7, #116]	; 0x74
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	673a      	str	r2, [r7, #112]	; 0x70
 8002ef4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ef6:	4413      	add	r3, r2
 8002ef8:	677b      	str	r3, [r7, #116]	; 0x74
 8002efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002efe:	2200      	movs	r2, #0
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
 8002f02:	637a      	str	r2, [r7, #52]	; 0x34
 8002f04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002f0c:	f7fd fedc 	bl	8000cc8 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f1a:	e05b      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	2200      	movs	r2, #0
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
 8002f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	0159      	lsls	r1, r3, #5
 8002f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f4a:	0150      	lsls	r0, r2, #5
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4641      	mov	r1, r8
 8002f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f56:	4649      	mov	r1, r9
 8002f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f70:	ebb2 040a 	subs.w	r4, r2, sl
 8002f74:	eb63 050b 	sbc.w	r5, r3, fp
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	00eb      	lsls	r3, r5, #3
 8002f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f86:	00e2      	lsls	r2, r4, #3
 8002f88:	4614      	mov	r4, r2
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	4643      	mov	r3, r8
 8002f8e:	18e3      	adds	r3, r4, r3
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	464b      	mov	r3, r9
 8002f94:	eb45 0303 	adc.w	r3, r5, r3
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	028b      	lsls	r3, r1, #10
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	028a      	lsls	r2, r1, #10
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc6:	f7fd fe7f 	bl	8000cc8 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4613      	mov	r3, r2
 8002fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_GetSysClockFreq+0x348>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	0f1b      	lsrs	r3, r3, #28
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ff2:	e003      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ffa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003000:	4618      	mov	r0, r3
 8003002:	3798      	adds	r7, #152	; 0x98
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	00f42400 	.word	0x00f42400
 8003014:	017d7840 	.word	0x017d7840

08003018 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e28d      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8083 	beq.w	800313e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003038:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x274>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b04      	cmp	r3, #4
 8003042:	d019      	beq.n	8003078 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003044:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800304c:	2b08      	cmp	r3, #8
 800304e:	d106      	bne.n	800305e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003050:	4b8e      	ldr	r3, [pc, #568]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305c:	d00c      	beq.n	8003078 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b8b      	ldr	r3, [pc, #556]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d112      	bne.n	8003090 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x274>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003076:	d10b      	bne.n	8003090 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <HAL_RCC_OscConfig+0x274>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05b      	beq.n	800313c <HAL_RCC_OscConfig+0x124>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d157      	bne.n	800313c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e25a      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d106      	bne.n	80030a8 <HAL_RCC_OscConfig+0x90>
 800309a:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x274>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a7b      	ldr	r2, [pc, #492]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e01d      	b.n	80030e4 <HAL_RCC_OscConfig+0xcc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0xb4>
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a75      	ldr	r2, [pc, #468]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0xcc>
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a6e      	ldr	r2, [pc, #440]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6b      	ldr	r2, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d013      	beq.n	8003114 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7ff f8ec 	bl	80022c8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff f8e8 	bl	80022c8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e21f      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0xdc>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7ff f8d8 	bl	80022c8 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311c:	f7ff f8d4 	bl	80022c8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	; 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e20b      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x104>
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06f      	beq.n	800322a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800314a:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_OscConfig+0x274>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b00      	cmp	r3, #0
 8003154:	d017      	beq.n	8003186 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003156:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800315e:	2b08      	cmp	r3, #8
 8003160:	d105      	bne.n	800316e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003162:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d11c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCC_OscConfig+0x274>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d116      	bne.n	80031b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x186>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e1d3      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4937      	ldr	r1, [pc, #220]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	e03a      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031bc:	4b34      	ldr	r3, [pc, #208]	; (8003290 <HAL_RCC_OscConfig+0x278>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7ff f881 	bl	80022c8 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ca:	f7ff f87d 	bl	80022c8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e1b4      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031dc:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4925      	ldr	r1, [pc, #148]	; (800328c <HAL_RCC_OscConfig+0x274>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
 80031fc:	e015      	b.n	800322a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x278>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7ff f860 	bl	80022c8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320c:	f7ff f85c 	bl	80022c8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e193      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d036      	beq.n	80032a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCC_OscConfig+0x27c>)
 8003240:	2201      	movs	r2, #1
 8003242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7ff f840 	bl	80022c8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7ff f83c 	bl	80022c8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e173      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x274>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x234>
 800326a:	e01b      	b.n	80032a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_OscConfig+0x27c>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003272:	f7ff f829 	bl	80022c8 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	e00e      	b.n	8003298 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327a:	f7ff f825 	bl	80022c8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d907      	bls.n	8003298 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e15c      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
 800328c:	40023800 	.word	0x40023800
 8003290:	42470000 	.word	0x42470000
 8003294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b8a      	ldr	r3, [pc, #552]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ea      	bne.n	800327a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8097 	beq.w	80033e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b6:	4b83      	ldr	r3, [pc, #524]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	4b7f      	ldr	r3, [pc, #508]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a7e      	ldr	r2, [pc, #504]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b7c      	ldr	r3, [pc, #496]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <HAL_RCC_OscConfig+0x4b0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCC_OscConfig+0x4b0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x4b0>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe ffe5 	bl	80022c8 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe ffe1 	bl	80022c8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e118      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b6c      	ldr	r3, [pc, #432]	; (80034c8 <HAL_RCC_OscConfig+0x4b0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x31e>
 8003328:	4b66      	ldr	r3, [pc, #408]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a65      	ldr	r2, [pc, #404]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	e01c      	b.n	8003370 <HAL_RCC_OscConfig+0x358>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x340>
 800333e:	4b61      	ldr	r3, [pc, #388]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a60      	ldr	r2, [pc, #384]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b5e      	ldr	r3, [pc, #376]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a5d      	ldr	r2, [pc, #372]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0x358>
 8003358:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a59      	ldr	r2, [pc, #356]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	f023 0301 	bic.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	4b57      	ldr	r3, [pc, #348]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe ffa6 	bl	80022c8 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe ffa2 	bl	80022c8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0d7      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003396:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ee      	beq.n	8003380 <HAL_RCC_OscConfig+0x368>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe ff90 	bl	80022c8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ac:	f7fe ff8c 	bl	80022c8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0c1      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c2:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ee      	bne.n	80033ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d4:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80033da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80ad 	beq.w	8003544 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d060      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d145      	bne.n	800348a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b33      	ldr	r3, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x4b4>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe ff60 	bl	80022c8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe ff5c 	bl	80022c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e093      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	071b      	lsls	r3, r3, #28
 8003456:	491b      	ldr	r1, [pc, #108]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCC_OscConfig+0x4b4>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe ff31 	bl	80022c8 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe ff2d 	bl	80022c8 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e064      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x452>
 8003488:	e05c      	b.n	8003544 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_RCC_OscConfig+0x4b4>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe ff1a 	bl	80022c8 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe ff16 	bl	80022c8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04d      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x480>
 80034b6:	e045      	b.n	8003544 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e040      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40007000 	.word	0x40007000
 80034cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCC_OscConfig+0x538>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d030      	beq.n	8003540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d129      	bne.n	8003540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d122      	bne.n	8003540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003508:	4293      	cmp	r3, r2
 800350a:	d119      	bne.n	8003540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	3b01      	subs	r3, #1
 800351a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d10f      	bne.n	8003540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d107      	bne.n	8003540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800

08003554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e041      	b.n	80035ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fc4e 	bl	8001e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f000 fac4 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04e      	b.n	80036aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003636:	d01d      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_TIM_Base_Start_IT+0xc8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a19      	ldr	r2, [pc, #100]	; (80036cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d010      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	e007      	b.n	80036a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40001800 	.word	0x40001800

080036d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <HAL_TIM_Base_Stop_IT+0x48>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	f240 4344 	movw	r3, #1092	; 0x444
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_TIM_Base_Stop_IT+0x48>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d122      	bne.n	800378e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d11b      	bne.n	800378e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f06f 0202 	mvn.w	r2, #2
 800375e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f9b5 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 800377a:	e005      	b.n	8003788 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9a7 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9b8 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d122      	bne.n	80037e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d11b      	bne.n	80037e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f06f 0204 	mvn.w	r2, #4
 80037b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f98b 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 80037ce:	e005      	b.n	80037dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f97d 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f98e 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d122      	bne.n	8003836 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11b      	bne.n	8003836 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0208 	mvn.w	r2, #8
 8003806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2204      	movs	r2, #4
 800380c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f961 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003822:	e005      	b.n	8003830 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f953 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f964 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b10      	cmp	r3, #16
 8003842:	d122      	bne.n	800388a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d11b      	bne.n	800388a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0210 	mvn.w	r2, #16
 800385a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2208      	movs	r2, #8
 8003860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f937 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003876:	e005      	b.n	8003884 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f929 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f93a 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10e      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f06f 0201 	mvn.w	r2, #1
 80038ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd fe3d 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d10e      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b80      	cmp	r3, #128	; 0x80
 80038d0:	d107      	bne.n	80038e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fadf 	bl	8003ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d10e      	bne.n	800390e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d107      	bne.n	800390e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8ff 	bl	8003b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d10e      	bne.n	800393a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b20      	cmp	r3, #32
 8003928:	d107      	bne.n	800393a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f06f 0220 	mvn.w	r2, #32
 8003932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 faa9 	bl	8003e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_TIM_ConfigClockSource+0x1c>
 800395a:	2302      	movs	r3, #2
 800395c:	e0b4      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x186>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800397c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003984:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d03e      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xd4>
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	f200 8087 	bhi.w	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	f000 8086 	beq.w	8003ab4 <HAL_TIM_ConfigClockSource+0x172>
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d87f      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039ae:	2b70      	cmp	r3, #112	; 0x70
 80039b0:	d01a      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0xa6>
 80039b2:	2b70      	cmp	r3, #112	; 0x70
 80039b4:	d87b      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039b6:	2b60      	cmp	r3, #96	; 0x60
 80039b8:	d050      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x11a>
 80039ba:	2b60      	cmp	r3, #96	; 0x60
 80039bc:	d877      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039be:	2b50      	cmp	r3, #80	; 0x50
 80039c0:	d03c      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xfa>
 80039c2:	2b50      	cmp	r3, #80	; 0x50
 80039c4:	d873      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d058      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0x13a>
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d86f      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	d064      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15a>
 80039d2:	2b30      	cmp	r3, #48	; 0x30
 80039d4:	d86b      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d060      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15a>
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d867      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d05c      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15a>
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d05a      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15a>
 80039e6:	e062      	b.n	8003aae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f000 f9ac 	bl	8003d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e04f      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f000 f995 	bl	8003d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a38:	609a      	str	r2, [r3, #8]
      break;
 8003a3a:	e03c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f000 f909 	bl	8003c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2150      	movs	r1, #80	; 0x50
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f962 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a5a:	e02c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f000 f928 	bl	8003cbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2160      	movs	r1, #96	; 0x60
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f952 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a7a:	e01c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f000 f8e9 	bl	8003c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2140      	movs	r1, #64	; 0x40
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f942 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003a9a:	e00c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 f939 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ab4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d00f      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3d      	ldr	r2, [pc, #244]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3c      	ldr	r2, [pc, #240]	; (8003c3c <TIM_Base_SetConfig+0x11c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <TIM_Base_SetConfig+0x120>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a3a      	ldr	r2, [pc, #232]	; (8003c44 <TIM_Base_SetConfig+0x124>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d108      	bne.n	8003b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d02b      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b80:	d027      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d023      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	; (8003c3c <TIM_Base_SetConfig+0x11c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01f      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <TIM_Base_SetConfig+0x120>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d01b      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a29      	ldr	r2, [pc, #164]	; (8003c44 <TIM_Base_SetConfig+0x124>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d017      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a28      	ldr	r2, [pc, #160]	; (8003c48 <TIM_Base_SetConfig+0x128>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d013      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <TIM_Base_SetConfig+0x12c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00f      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <TIM_Base_SetConfig+0x130>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a25      	ldr	r2, [pc, #148]	; (8003c54 <TIM_Base_SetConfig+0x134>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <TIM_Base_SetConfig+0x138>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a23      	ldr	r2, [pc, #140]	; (8003c5c <TIM_Base_SetConfig+0x13c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d108      	bne.n	8003be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_Base_SetConfig+0xf8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <TIM_Base_SetConfig+0x124>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d103      	bne.n	8003c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	615a      	str	r2, [r3, #20]
}
 8003c26:	bf00      	nop
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40010400 	.word	0x40010400
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800
 8003c54:	40001800 	.word	0x40001800
 8003c58:	40001c00 	.word	0x40001c00
 8003c5c:	40002000 	.word	0x40002000

08003c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 030a 	bic.w	r3, r3, #10
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e05a      	b.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d01d      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10c      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40010400 	.word	0x40010400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40001800 	.word	0x40001800

08003e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03f      	b.n	8003f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd ffe2 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f9cb 	bl	8004294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	; 0x28
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d17c      	bne.n	8004068 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Transmit+0x2c>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e075      	b.n	800406a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x3e>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e06e      	b.n	800406a <HAL_UART_Transmit+0x11c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2221      	movs	r2, #33	; 0x21
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fe f991 	bl	80022c8 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x82>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fe0:	e02a      	b.n	8004038 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f8e2 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e036      	b.n	800406a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3302      	adds	r3, #2
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e007      	b.n	800402a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1cf      	bne.n	8003fe2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2140      	movs	r1, #64	; 0x40
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8b2 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	; 0x28
 8004076:	af02      	add	r7, sp, #8
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	f040 808c 	bne.w	80041ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_UART_Receive+0x2e>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e084      	b.n	80041ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Receive+0x40>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e07d      	b.n	80041ae <HAL_UART_Receive+0x13c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2222      	movs	r2, #34	; 0x22
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fe f8fb 	bl	80022c8 <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d108      	bne.n	80040fc <HAL_UART_Receive+0x8a>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e003      	b.n	8004104 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800410c:	e043      	b.n	8004196 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	2120      	movs	r1, #32
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f84c 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e042      	b.n	80041ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10c      	bne.n	8004148 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413a:	b29a      	uxth	r2, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	3302      	adds	r3, #2
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e01f      	b.n	8004188 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004150:	d007      	beq.n	8004162 <HAL_UART_Receive+0xf0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <HAL_UART_Receive+0xfe>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e008      	b.n	8004182 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417c:	b2da      	uxtb	r2, r3
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1b6      	bne.n	800410e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b090      	sub	sp, #64	; 0x40
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	e050      	b.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d04c      	beq.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	f7fe f877 	bl	80022c8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d241      	bcs.n	800426a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004206:	637a      	str	r2, [r7, #52]	; 0x34
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800420c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	613b      	str	r3, [r7, #16]
   return(result);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	63bb      	str	r3, [r7, #56]	; 0x38
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800423a:	623a      	str	r2, [r7, #32]
 800423c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	69f9      	ldr	r1, [r7, #28]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	61bb      	str	r3, [r7, #24]
   return(result);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e00f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4013      	ands	r3, r2
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d09f      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3740      	adds	r7, #64	; 0x40
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b0c0      	sub	sp, #256	; 0x100
 800429a:	af00      	add	r7, sp, #0
 800429c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	ea40 0301 	orr.w	r3, r0, r1
 80042bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042ec:	f021 010c 	bic.w	r1, r1, #12
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042fa:	430b      	orrs	r3, r1
 80042fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	6999      	ldr	r1, [r3, #24]
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	ea40 0301 	orr.w	r3, r0, r1
 800431a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b8f      	ldr	r3, [pc, #572]	; (8004560 <UART_SetConfig+0x2cc>)
 8004324:	429a      	cmp	r2, r3
 8004326:	d005      	beq.n	8004334 <UART_SetConfig+0xa0>
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <UART_SetConfig+0x2d0>)
 8004330:	429a      	cmp	r2, r3
 8004332:	d104      	bne.n	800433e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7fe fcb2 	bl	8002c9c <HAL_RCC_GetPCLK2Freq>
 8004338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800433c:	e003      	b.n	8004346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433e:	f7fe fc99 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004350:	f040 810c 	bne.w	800456c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004358:	2200      	movs	r2, #0
 800435a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800435e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	1891      	adds	r1, r2, r2
 800436c:	65b9      	str	r1, [r7, #88]	; 0x58
 800436e:	415b      	adcs	r3, r3
 8004370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004376:	4621      	mov	r1, r4
 8004378:	eb12 0801 	adds.w	r8, r2, r1
 800437c:	4629      	mov	r1, r5
 800437e:	eb43 0901 	adc.w	r9, r3, r1
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800438e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004396:	4690      	mov	r8, r2
 8004398:	4699      	mov	r9, r3
 800439a:	4623      	mov	r3, r4
 800439c:	eb18 0303 	adds.w	r3, r8, r3
 80043a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043a4:	462b      	mov	r3, r5
 80043a6:	eb49 0303 	adc.w	r3, r9, r3
 80043aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043c2:	460b      	mov	r3, r1
 80043c4:	18db      	adds	r3, r3, r3
 80043c6:	653b      	str	r3, [r7, #80]	; 0x50
 80043c8:	4613      	mov	r3, r2
 80043ca:	eb42 0303 	adc.w	r3, r2, r3
 80043ce:	657b      	str	r3, [r7, #84]	; 0x54
 80043d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043d8:	f7fc fc76 	bl	8000cc8 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4b61      	ldr	r3, [pc, #388]	; (8004568 <UART_SetConfig+0x2d4>)
 80043e2:	fba3 2302 	umull	r2, r3, r3, r2
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	011c      	lsls	r4, r3, #4
 80043ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	1891      	adds	r1, r2, r2
 8004402:	64b9      	str	r1, [r7, #72]	; 0x48
 8004404:	415b      	adcs	r3, r3
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800440c:	4641      	mov	r1, r8
 800440e:	eb12 0a01 	adds.w	sl, r2, r1
 8004412:	4649      	mov	r1, r9
 8004414:	eb43 0b01 	adc.w	fp, r3, r1
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442c:	4692      	mov	sl, r2
 800442e:	469b      	mov	fp, r3
 8004430:	4643      	mov	r3, r8
 8004432:	eb1a 0303 	adds.w	r3, sl, r3
 8004436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800443a:	464b      	mov	r3, r9
 800443c:	eb4b 0303 	adc.w	r3, fp, r3
 8004440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004458:	460b      	mov	r3, r1
 800445a:	18db      	adds	r3, r3, r3
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
 800445e:	4613      	mov	r3, r2
 8004460:	eb42 0303 	adc.w	r3, r2, r3
 8004464:	647b      	str	r3, [r7, #68]	; 0x44
 8004466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800446a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800446e:	f7fc fc2b 	bl	8000cc8 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4611      	mov	r1, r2
 8004478:	4b3b      	ldr	r3, [pc, #236]	; (8004568 <UART_SetConfig+0x2d4>)
 800447a:	fba3 2301 	umull	r2, r3, r3, r1
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2264      	movs	r2, #100	; 0x64
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	1acb      	subs	r3, r1, r3
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <UART_SetConfig+0x2d4>)
 8004490:	fba3 2302 	umull	r2, r3, r3, r2
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800449c:	441c      	add	r4, r3
 800449e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a2:	2200      	movs	r2, #0
 80044a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044b0:	4642      	mov	r2, r8
 80044b2:	464b      	mov	r3, r9
 80044b4:	1891      	adds	r1, r2, r2
 80044b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044b8:	415b      	adcs	r3, r3
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044c0:	4641      	mov	r1, r8
 80044c2:	1851      	adds	r1, r2, r1
 80044c4:	6339      	str	r1, [r7, #48]	; 0x30
 80044c6:	4649      	mov	r1, r9
 80044c8:	414b      	adcs	r3, r1
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044d8:	4659      	mov	r1, fp
 80044da:	00cb      	lsls	r3, r1, #3
 80044dc:	4651      	mov	r1, sl
 80044de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e2:	4651      	mov	r1, sl
 80044e4:	00ca      	lsls	r2, r1, #3
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	4603      	mov	r3, r0
 80044ec:	4642      	mov	r2, r8
 80044ee:	189b      	adds	r3, r3, r2
 80044f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044f4:	464b      	mov	r3, r9
 80044f6:	460a      	mov	r2, r1
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800450c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004514:	460b      	mov	r3, r1
 8004516:	18db      	adds	r3, r3, r3
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
 800451a:	4613      	mov	r3, r2
 800451c:	eb42 0303 	adc.w	r3, r2, r3
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800452a:	f7fc fbcd 	bl	8000cc8 <__aeabi_uldivmod>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <UART_SetConfig+0x2d4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a08      	ldr	r2, [pc, #32]	; (8004568 <UART_SetConfig+0x2d4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4422      	add	r2, r4
 800455a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800455c:	e105      	b.n	800476a <UART_SetConfig+0x4d6>
 800455e:	bf00      	nop
 8004560:	40011000 	.word	0x40011000
 8004564:	40011400 	.word	0x40011400
 8004568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800456c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800457a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800457e:	4642      	mov	r2, r8
 8004580:	464b      	mov	r3, r9
 8004582:	1891      	adds	r1, r2, r2
 8004584:	6239      	str	r1, [r7, #32]
 8004586:	415b      	adcs	r3, r3
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800458e:	4641      	mov	r1, r8
 8004590:	1854      	adds	r4, r2, r1
 8004592:	4649      	mov	r1, r9
 8004594:	eb43 0501 	adc.w	r5, r3, r1
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	00eb      	lsls	r3, r5, #3
 80045a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045a6:	00e2      	lsls	r2, r4, #3
 80045a8:	4614      	mov	r4, r2
 80045aa:	461d      	mov	r5, r3
 80045ac:	4643      	mov	r3, r8
 80045ae:	18e3      	adds	r3, r4, r3
 80045b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b4:	464b      	mov	r3, r9
 80045b6:	eb45 0303 	adc.w	r3, r5, r3
 80045ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045da:	4629      	mov	r1, r5
 80045dc:	008b      	lsls	r3, r1, #2
 80045de:	4621      	mov	r1, r4
 80045e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e4:	4621      	mov	r1, r4
 80045e6:	008a      	lsls	r2, r1, #2
 80045e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045ec:	f7fc fb6c 	bl	8000cc8 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4b60      	ldr	r3, [pc, #384]	; (8004778 <UART_SetConfig+0x4e4>)
 80045f6:	fba3 2302 	umull	r2, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	011c      	lsls	r4, r3, #4
 80045fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800460c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004610:	4642      	mov	r2, r8
 8004612:	464b      	mov	r3, r9
 8004614:	1891      	adds	r1, r2, r2
 8004616:	61b9      	str	r1, [r7, #24]
 8004618:	415b      	adcs	r3, r3
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004620:	4641      	mov	r1, r8
 8004622:	1851      	adds	r1, r2, r1
 8004624:	6139      	str	r1, [r7, #16]
 8004626:	4649      	mov	r1, r9
 8004628:	414b      	adcs	r3, r1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004638:	4659      	mov	r1, fp
 800463a:	00cb      	lsls	r3, r1, #3
 800463c:	4651      	mov	r1, sl
 800463e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004642:	4651      	mov	r1, sl
 8004644:	00ca      	lsls	r2, r1, #3
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	4603      	mov	r3, r0
 800464c:	4642      	mov	r2, r8
 800464e:	189b      	adds	r3, r3, r2
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004654:	464b      	mov	r3, r9
 8004656:	460a      	mov	r2, r1
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	67bb      	str	r3, [r7, #120]	; 0x78
 800466a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004678:	4649      	mov	r1, r9
 800467a:	008b      	lsls	r3, r1, #2
 800467c:	4641      	mov	r1, r8
 800467e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004682:	4641      	mov	r1, r8
 8004684:	008a      	lsls	r2, r1, #2
 8004686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800468a:	f7fc fb1d 	bl	8000cc8 <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4b39      	ldr	r3, [pc, #228]	; (8004778 <UART_SetConfig+0x4e4>)
 8004694:	fba3 1302 	umull	r1, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	2164      	movs	r1, #100	; 0x64
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	3332      	adds	r3, #50	; 0x32
 80046a6:	4a34      	ldr	r2, [pc, #208]	; (8004778 <UART_SetConfig+0x4e4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b2:	441c      	add	r4, r3
 80046b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b8:	2200      	movs	r2, #0
 80046ba:	673b      	str	r3, [r7, #112]	; 0x70
 80046bc:	677a      	str	r2, [r7, #116]	; 0x74
 80046be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	1891      	adds	r1, r2, r2
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	415b      	adcs	r3, r3
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d2:	4641      	mov	r1, r8
 80046d4:	1851      	adds	r1, r2, r1
 80046d6:	6039      	str	r1, [r7, #0]
 80046d8:	4649      	mov	r1, r9
 80046da:	414b      	adcs	r3, r1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ea:	4659      	mov	r1, fp
 80046ec:	00cb      	lsls	r3, r1, #3
 80046ee:	4651      	mov	r1, sl
 80046f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f4:	4651      	mov	r1, sl
 80046f6:	00ca      	lsls	r2, r1, #3
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	4603      	mov	r3, r0
 80046fe:	4642      	mov	r2, r8
 8004700:	189b      	adds	r3, r3, r2
 8004702:	66bb      	str	r3, [r7, #104]	; 0x68
 8004704:	464b      	mov	r3, r9
 8004706:	460a      	mov	r2, r1
 8004708:	eb42 0303 	adc.w	r3, r2, r3
 800470c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	663b      	str	r3, [r7, #96]	; 0x60
 8004718:	667a      	str	r2, [r7, #100]	; 0x64
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004726:	4649      	mov	r1, r9
 8004728:	008b      	lsls	r3, r1, #2
 800472a:	4641      	mov	r1, r8
 800472c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004730:	4641      	mov	r1, r8
 8004732:	008a      	lsls	r2, r1, #2
 8004734:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004738:	f7fc fac6 	bl	8000cc8 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <UART_SetConfig+0x4e4>)
 8004742:	fba3 1302 	umull	r1, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2164      	movs	r1, #100	; 0x64
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	; 0x32
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <UART_SetConfig+0x4e4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4422      	add	r2, r4
 8004768:	609a      	str	r2, [r3, #8]
}
 800476a:	bf00      	nop
 800476c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	51eb851f 	.word	0x51eb851f

0800477c <atoi>:
 800477c:	220a      	movs	r2, #10
 800477e:	2100      	movs	r1, #0
 8004780:	f001 bd7e 	b.w	8006280 <strtol>

08004784 <__errno>:
 8004784:	4b01      	ldr	r3, [pc, #4]	; (800478c <__errno+0x8>)
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000010 	.word	0x20000010

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	4d0d      	ldr	r5, [pc, #52]	; (80047c8 <__libc_init_array+0x38>)
 8004794:	4c0d      	ldr	r4, [pc, #52]	; (80047cc <__libc_init_array+0x3c>)
 8004796:	1b64      	subs	r4, r4, r5
 8004798:	10a4      	asrs	r4, r4, #2
 800479a:	2600      	movs	r6, #0
 800479c:	42a6      	cmp	r6, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	4d0b      	ldr	r5, [pc, #44]	; (80047d0 <__libc_init_array+0x40>)
 80047a2:	4c0c      	ldr	r4, [pc, #48]	; (80047d4 <__libc_init_array+0x44>)
 80047a4:	f005 fdc6 	bl	800a334 <_init>
 80047a8:	1b64      	subs	r4, r4, r5
 80047aa:	10a4      	asrs	r4, r4, #2
 80047ac:	2600      	movs	r6, #0
 80047ae:	42a6      	cmp	r6, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b8:	4798      	blx	r3
 80047ba:	3601      	adds	r6, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c2:	4798      	blx	r3
 80047c4:	3601      	adds	r6, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	0800aaf0 	.word	0x0800aaf0
 80047cc:	0800aaf0 	.word	0x0800aaf0
 80047d0:	0800aaf0 	.word	0x0800aaf0
 80047d4:	0800aaf4 	.word	0x0800aaf4

080047d8 <memset>:
 80047d8:	4402      	add	r2, r0
 80047da:	4603      	mov	r3, r0
 80047dc:	4293      	cmp	r3, r2
 80047de:	d100      	bne.n	80047e2 <memset+0xa>
 80047e0:	4770      	bx	lr
 80047e2:	f803 1b01 	strb.w	r1, [r3], #1
 80047e6:	e7f9      	b.n	80047dc <memset+0x4>

080047e8 <__cvt>:
 80047e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ec:	ec55 4b10 	vmov	r4, r5, d0
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	460e      	mov	r6, r1
 80047f4:	4619      	mov	r1, r3
 80047f6:	462b      	mov	r3, r5
 80047f8:	bfbb      	ittet	lt
 80047fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80047fe:	461d      	movlt	r5, r3
 8004800:	2300      	movge	r3, #0
 8004802:	232d      	movlt	r3, #45	; 0x2d
 8004804:	700b      	strb	r3, [r1, #0]
 8004806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800480c:	4691      	mov	r9, r2
 800480e:	f023 0820 	bic.w	r8, r3, #32
 8004812:	bfbc      	itt	lt
 8004814:	4622      	movlt	r2, r4
 8004816:	4614      	movlt	r4, r2
 8004818:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800481c:	d005      	beq.n	800482a <__cvt+0x42>
 800481e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004822:	d100      	bne.n	8004826 <__cvt+0x3e>
 8004824:	3601      	adds	r6, #1
 8004826:	2102      	movs	r1, #2
 8004828:	e000      	b.n	800482c <__cvt+0x44>
 800482a:	2103      	movs	r1, #3
 800482c:	ab03      	add	r3, sp, #12
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	ab02      	add	r3, sp, #8
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	ec45 4b10 	vmov	d0, r4, r5
 8004838:	4653      	mov	r3, sl
 800483a:	4632      	mov	r2, r6
 800483c:	f001 fdb8 	bl	80063b0 <_dtoa_r>
 8004840:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004844:	4607      	mov	r7, r0
 8004846:	d102      	bne.n	800484e <__cvt+0x66>
 8004848:	f019 0f01 	tst.w	r9, #1
 800484c:	d022      	beq.n	8004894 <__cvt+0xac>
 800484e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004852:	eb07 0906 	add.w	r9, r7, r6
 8004856:	d110      	bne.n	800487a <__cvt+0x92>
 8004858:	783b      	ldrb	r3, [r7, #0]
 800485a:	2b30      	cmp	r3, #48	; 0x30
 800485c:	d10a      	bne.n	8004874 <__cvt+0x8c>
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fc f94f 	bl	8000b08 <__aeabi_dcmpeq>
 800486a:	b918      	cbnz	r0, 8004874 <__cvt+0x8c>
 800486c:	f1c6 0601 	rsb	r6, r6, #1
 8004870:	f8ca 6000 	str.w	r6, [sl]
 8004874:	f8da 3000 	ldr.w	r3, [sl]
 8004878:	4499      	add	r9, r3
 800487a:	2200      	movs	r2, #0
 800487c:	2300      	movs	r3, #0
 800487e:	4620      	mov	r0, r4
 8004880:	4629      	mov	r1, r5
 8004882:	f7fc f941 	bl	8000b08 <__aeabi_dcmpeq>
 8004886:	b108      	cbz	r0, 800488c <__cvt+0xa4>
 8004888:	f8cd 900c 	str.w	r9, [sp, #12]
 800488c:	2230      	movs	r2, #48	; 0x30
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	454b      	cmp	r3, r9
 8004892:	d307      	bcc.n	80048a4 <__cvt+0xbc>
 8004894:	9b03      	ldr	r3, [sp, #12]
 8004896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004898:	1bdb      	subs	r3, r3, r7
 800489a:	4638      	mov	r0, r7
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	b004      	add	sp, #16
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	1c59      	adds	r1, r3, #1
 80048a6:	9103      	str	r1, [sp, #12]
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e7f0      	b.n	800488e <__cvt+0xa6>

080048ac <__exponent>:
 80048ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ae:	4603      	mov	r3, r0
 80048b0:	2900      	cmp	r1, #0
 80048b2:	bfb8      	it	lt
 80048b4:	4249      	neglt	r1, r1
 80048b6:	f803 2b02 	strb.w	r2, [r3], #2
 80048ba:	bfb4      	ite	lt
 80048bc:	222d      	movlt	r2, #45	; 0x2d
 80048be:	222b      	movge	r2, #43	; 0x2b
 80048c0:	2909      	cmp	r1, #9
 80048c2:	7042      	strb	r2, [r0, #1]
 80048c4:	dd2a      	ble.n	800491c <__exponent+0x70>
 80048c6:	f10d 0407 	add.w	r4, sp, #7
 80048ca:	46a4      	mov	ip, r4
 80048cc:	270a      	movs	r7, #10
 80048ce:	46a6      	mov	lr, r4
 80048d0:	460a      	mov	r2, r1
 80048d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80048d6:	fb07 1516 	mls	r5, r7, r6, r1
 80048da:	3530      	adds	r5, #48	; 0x30
 80048dc:	2a63      	cmp	r2, #99	; 0x63
 80048de:	f104 34ff 	add.w	r4, r4, #4294967295
 80048e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048e6:	4631      	mov	r1, r6
 80048e8:	dcf1      	bgt.n	80048ce <__exponent+0x22>
 80048ea:	3130      	adds	r1, #48	; 0x30
 80048ec:	f1ae 0502 	sub.w	r5, lr, #2
 80048f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048f4:	1c44      	adds	r4, r0, #1
 80048f6:	4629      	mov	r1, r5
 80048f8:	4561      	cmp	r1, ip
 80048fa:	d30a      	bcc.n	8004912 <__exponent+0x66>
 80048fc:	f10d 0209 	add.w	r2, sp, #9
 8004900:	eba2 020e 	sub.w	r2, r2, lr
 8004904:	4565      	cmp	r5, ip
 8004906:	bf88      	it	hi
 8004908:	2200      	movhi	r2, #0
 800490a:	4413      	add	r3, r2
 800490c:	1a18      	subs	r0, r3, r0
 800490e:	b003      	add	sp, #12
 8004910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004916:	f804 2f01 	strb.w	r2, [r4, #1]!
 800491a:	e7ed      	b.n	80048f8 <__exponent+0x4c>
 800491c:	2330      	movs	r3, #48	; 0x30
 800491e:	3130      	adds	r1, #48	; 0x30
 8004920:	7083      	strb	r3, [r0, #2]
 8004922:	70c1      	strb	r1, [r0, #3]
 8004924:	1d03      	adds	r3, r0, #4
 8004926:	e7f1      	b.n	800490c <__exponent+0x60>

08004928 <_printf_float>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	ed2d 8b02 	vpush	{d8}
 8004930:	b08d      	sub	sp, #52	; 0x34
 8004932:	460c      	mov	r4, r1
 8004934:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004938:	4616      	mov	r6, r2
 800493a:	461f      	mov	r7, r3
 800493c:	4605      	mov	r5, r0
 800493e:	f002 fe95 	bl	800766c <_localeconv_r>
 8004942:	f8d0 a000 	ldr.w	sl, [r0]
 8004946:	4650      	mov	r0, sl
 8004948:	f7fb fc62 	bl	8000210 <strlen>
 800494c:	2300      	movs	r3, #0
 800494e:	930a      	str	r3, [sp, #40]	; 0x28
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	9305      	str	r3, [sp, #20]
 8004954:	f8d8 3000 	ldr.w	r3, [r8]
 8004958:	f894 b018 	ldrb.w	fp, [r4, #24]
 800495c:	3307      	adds	r3, #7
 800495e:	f023 0307 	bic.w	r3, r3, #7
 8004962:	f103 0208 	add.w	r2, r3, #8
 8004966:	f8c8 2000 	str.w	r2, [r8]
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004972:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004976:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800497a:	9307      	str	r3, [sp, #28]
 800497c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004980:	ee08 0a10 	vmov	s16, r0
 8004984:	4b9f      	ldr	r3, [pc, #636]	; (8004c04 <_printf_float+0x2dc>)
 8004986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	f7fc f8ed 	bl	8000b6c <__aeabi_dcmpun>
 8004992:	bb88      	cbnz	r0, 80049f8 <_printf_float+0xd0>
 8004994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004998:	4b9a      	ldr	r3, [pc, #616]	; (8004c04 <_printf_float+0x2dc>)
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	f7fc f8c7 	bl	8000b30 <__aeabi_dcmple>
 80049a2:	bb48      	cbnz	r0, 80049f8 <_printf_float+0xd0>
 80049a4:	2200      	movs	r2, #0
 80049a6:	2300      	movs	r3, #0
 80049a8:	4640      	mov	r0, r8
 80049aa:	4649      	mov	r1, r9
 80049ac:	f7fc f8b6 	bl	8000b1c <__aeabi_dcmplt>
 80049b0:	b110      	cbz	r0, 80049b8 <_printf_float+0x90>
 80049b2:	232d      	movs	r3, #45	; 0x2d
 80049b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b8:	4b93      	ldr	r3, [pc, #588]	; (8004c08 <_printf_float+0x2e0>)
 80049ba:	4894      	ldr	r0, [pc, #592]	; (8004c0c <_printf_float+0x2e4>)
 80049bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049c0:	bf94      	ite	ls
 80049c2:	4698      	movls	r8, r3
 80049c4:	4680      	movhi	r8, r0
 80049c6:	2303      	movs	r3, #3
 80049c8:	6123      	str	r3, [r4, #16]
 80049ca:	9b05      	ldr	r3, [sp, #20]
 80049cc:	f023 0204 	bic.w	r2, r3, #4
 80049d0:	6022      	str	r2, [r4, #0]
 80049d2:	f04f 0900 	mov.w	r9, #0
 80049d6:	9700      	str	r7, [sp, #0]
 80049d8:	4633      	mov	r3, r6
 80049da:	aa0b      	add	r2, sp, #44	; 0x2c
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 f9d8 	bl	8004d94 <_printf_common>
 80049e4:	3001      	adds	r0, #1
 80049e6:	f040 8090 	bne.w	8004b0a <_printf_float+0x1e2>
 80049ea:	f04f 30ff 	mov.w	r0, #4294967295
 80049ee:	b00d      	add	sp, #52	; 0x34
 80049f0:	ecbd 8b02 	vpop	{d8}
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	4640      	mov	r0, r8
 80049fe:	4649      	mov	r1, r9
 8004a00:	f7fc f8b4 	bl	8000b6c <__aeabi_dcmpun>
 8004a04:	b140      	cbz	r0, 8004a18 <_printf_float+0xf0>
 8004a06:	464b      	mov	r3, r9
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfbc      	itt	lt
 8004a0c:	232d      	movlt	r3, #45	; 0x2d
 8004a0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a12:	487f      	ldr	r0, [pc, #508]	; (8004c10 <_printf_float+0x2e8>)
 8004a14:	4b7f      	ldr	r3, [pc, #508]	; (8004c14 <_printf_float+0x2ec>)
 8004a16:	e7d1      	b.n	80049bc <_printf_float+0x94>
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a1e:	9206      	str	r2, [sp, #24]
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	d13f      	bne.n	8004aa4 <_printf_float+0x17c>
 8004a24:	2306      	movs	r3, #6
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	9b05      	ldr	r3, [sp, #20]
 8004a2a:	6861      	ldr	r1, [r4, #4]
 8004a2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a30:	2300      	movs	r3, #0
 8004a32:	9303      	str	r3, [sp, #12]
 8004a34:	ab0a      	add	r3, sp, #40	; 0x28
 8004a36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a3a:	ab09      	add	r3, sp, #36	; 0x24
 8004a3c:	ec49 8b10 	vmov	d0, r8, r9
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	6022      	str	r2, [r4, #0]
 8004a44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7ff fecd 	bl	80047e8 <__cvt>
 8004a4e:	9b06      	ldr	r3, [sp, #24]
 8004a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a52:	2b47      	cmp	r3, #71	; 0x47
 8004a54:	4680      	mov	r8, r0
 8004a56:	d108      	bne.n	8004a6a <_printf_float+0x142>
 8004a58:	1cc8      	adds	r0, r1, #3
 8004a5a:	db02      	blt.n	8004a62 <_printf_float+0x13a>
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	4299      	cmp	r1, r3
 8004a60:	dd41      	ble.n	8004ae6 <_printf_float+0x1be>
 8004a62:	f1ab 0b02 	sub.w	fp, fp, #2
 8004a66:	fa5f fb8b 	uxtb.w	fp, fp
 8004a6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a6e:	d820      	bhi.n	8004ab2 <_printf_float+0x18a>
 8004a70:	3901      	subs	r1, #1
 8004a72:	465a      	mov	r2, fp
 8004a74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a78:	9109      	str	r1, [sp, #36]	; 0x24
 8004a7a:	f7ff ff17 	bl	80048ac <__exponent>
 8004a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a80:	1813      	adds	r3, r2, r0
 8004a82:	2a01      	cmp	r2, #1
 8004a84:	4681      	mov	r9, r0
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	dc02      	bgt.n	8004a90 <_printf_float+0x168>
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	07d2      	lsls	r2, r2, #31
 8004a8e:	d501      	bpl.n	8004a94 <_printf_float+0x16c>
 8004a90:	3301      	adds	r3, #1
 8004a92:	6123      	str	r3, [r4, #16]
 8004a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d09c      	beq.n	80049d6 <_printf_float+0xae>
 8004a9c:	232d      	movs	r3, #45	; 0x2d
 8004a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa2:	e798      	b.n	80049d6 <_printf_float+0xae>
 8004aa4:	9a06      	ldr	r2, [sp, #24]
 8004aa6:	2a47      	cmp	r2, #71	; 0x47
 8004aa8:	d1be      	bne.n	8004a28 <_printf_float+0x100>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1bc      	bne.n	8004a28 <_printf_float+0x100>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e7b9      	b.n	8004a26 <_printf_float+0xfe>
 8004ab2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ab6:	d118      	bne.n	8004aea <_printf_float+0x1c2>
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	6863      	ldr	r3, [r4, #4]
 8004abc:	dd0b      	ble.n	8004ad6 <_printf_float+0x1ae>
 8004abe:	6121      	str	r1, [r4, #16]
 8004ac0:	b913      	cbnz	r3, 8004ac8 <_printf_float+0x1a0>
 8004ac2:	6822      	ldr	r2, [r4, #0]
 8004ac4:	07d0      	lsls	r0, r2, #31
 8004ac6:	d502      	bpl.n	8004ace <_printf_float+0x1a6>
 8004ac8:	3301      	adds	r3, #1
 8004aca:	440b      	add	r3, r1
 8004acc:	6123      	str	r3, [r4, #16]
 8004ace:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ad0:	f04f 0900 	mov.w	r9, #0
 8004ad4:	e7de      	b.n	8004a94 <_printf_float+0x16c>
 8004ad6:	b913      	cbnz	r3, 8004ade <_printf_float+0x1b6>
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	07d2      	lsls	r2, r2, #31
 8004adc:	d501      	bpl.n	8004ae2 <_printf_float+0x1ba>
 8004ade:	3302      	adds	r3, #2
 8004ae0:	e7f4      	b.n	8004acc <_printf_float+0x1a4>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e7f2      	b.n	8004acc <_printf_float+0x1a4>
 8004ae6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aec:	4299      	cmp	r1, r3
 8004aee:	db05      	blt.n	8004afc <_printf_float+0x1d4>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	6121      	str	r1, [r4, #16]
 8004af4:	07d8      	lsls	r0, r3, #31
 8004af6:	d5ea      	bpl.n	8004ace <_printf_float+0x1a6>
 8004af8:	1c4b      	adds	r3, r1, #1
 8004afa:	e7e7      	b.n	8004acc <_printf_float+0x1a4>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	bfd4      	ite	le
 8004b00:	f1c1 0202 	rsble	r2, r1, #2
 8004b04:	2201      	movgt	r2, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	e7e0      	b.n	8004acc <_printf_float+0x1a4>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	055a      	lsls	r2, r3, #21
 8004b0e:	d407      	bmi.n	8004b20 <_printf_float+0x1f8>
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	4642      	mov	r2, r8
 8004b14:	4631      	mov	r1, r6
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b8      	blx	r7
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d12c      	bne.n	8004b78 <_printf_float+0x250>
 8004b1e:	e764      	b.n	80049ea <_printf_float+0xc2>
 8004b20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b24:	f240 80e0 	bls.w	8004ce8 <_printf_float+0x3c0>
 8004b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f7fb ffea 	bl	8000b08 <__aeabi_dcmpeq>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d034      	beq.n	8004ba2 <_printf_float+0x27a>
 8004b38:	4a37      	ldr	r2, [pc, #220]	; (8004c18 <_printf_float+0x2f0>)
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4628      	mov	r0, r5
 8004b40:	47b8      	blx	r7
 8004b42:	3001      	adds	r0, #1
 8004b44:	f43f af51 	beq.w	80049ea <_printf_float+0xc2>
 8004b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	db02      	blt.n	8004b56 <_printf_float+0x22e>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	07d8      	lsls	r0, r3, #31
 8004b54:	d510      	bpl.n	8004b78 <_printf_float+0x250>
 8004b56:	ee18 3a10 	vmov	r3, s16
 8004b5a:	4652      	mov	r2, sl
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4628      	mov	r0, r5
 8004b60:	47b8      	blx	r7
 8004b62:	3001      	adds	r0, #1
 8004b64:	f43f af41 	beq.w	80049ea <_printf_float+0xc2>
 8004b68:	f04f 0800 	mov.w	r8, #0
 8004b6c:	f104 091a 	add.w	r9, r4, #26
 8004b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	4543      	cmp	r3, r8
 8004b76:	dc09      	bgt.n	8004b8c <_printf_float+0x264>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	079b      	lsls	r3, r3, #30
 8004b7c:	f100 8105 	bmi.w	8004d8a <_printf_float+0x462>
 8004b80:	68e0      	ldr	r0, [r4, #12]
 8004b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b84:	4298      	cmp	r0, r3
 8004b86:	bfb8      	it	lt
 8004b88:	4618      	movlt	r0, r3
 8004b8a:	e730      	b.n	80049ee <_printf_float+0xc6>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	464a      	mov	r2, r9
 8004b90:	4631      	mov	r1, r6
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	f43f af27 	beq.w	80049ea <_printf_float+0xc2>
 8004b9c:	f108 0801 	add.w	r8, r8, #1
 8004ba0:	e7e6      	b.n	8004b70 <_printf_float+0x248>
 8004ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dc39      	bgt.n	8004c1c <_printf_float+0x2f4>
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <_printf_float+0x2f0>)
 8004baa:	2301      	movs	r3, #1
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	f43f af19 	beq.w	80049ea <_printf_float+0xc2>
 8004bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	d102      	bne.n	8004bc6 <_printf_float+0x29e>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	07d9      	lsls	r1, r3, #31
 8004bc4:	d5d8      	bpl.n	8004b78 <_printf_float+0x250>
 8004bc6:	ee18 3a10 	vmov	r3, s16
 8004bca:	4652      	mov	r2, sl
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f af09 	beq.w	80049ea <_printf_float+0xc2>
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	f104 0a1a 	add.w	sl, r4, #26
 8004be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be2:	425b      	negs	r3, r3
 8004be4:	454b      	cmp	r3, r9
 8004be6:	dc01      	bgt.n	8004bec <_printf_float+0x2c4>
 8004be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bea:	e792      	b.n	8004b12 <_printf_float+0x1ea>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4652      	mov	r2, sl
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f aef7 	beq.w	80049ea <_printf_float+0xc2>
 8004bfc:	f109 0901 	add.w	r9, r9, #1
 8004c00:	e7ee      	b.n	8004be0 <_printf_float+0x2b8>
 8004c02:	bf00      	nop
 8004c04:	7fefffff 	.word	0x7fefffff
 8004c08:	0800a468 	.word	0x0800a468
 8004c0c:	0800a46c 	.word	0x0800a46c
 8004c10:	0800a474 	.word	0x0800a474
 8004c14:	0800a470 	.word	0x0800a470
 8004c18:	0800a478 	.word	0x0800a478
 8004c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c20:	429a      	cmp	r2, r3
 8004c22:	bfa8      	it	ge
 8004c24:	461a      	movge	r2, r3
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	4691      	mov	r9, r2
 8004c2a:	dc37      	bgt.n	8004c9c <_printf_float+0x374>
 8004c2c:	f04f 0b00 	mov.w	fp, #0
 8004c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c34:	f104 021a 	add.w	r2, r4, #26
 8004c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c3a:	9305      	str	r3, [sp, #20]
 8004c3c:	eba3 0309 	sub.w	r3, r3, r9
 8004c40:	455b      	cmp	r3, fp
 8004c42:	dc33      	bgt.n	8004cac <_printf_float+0x384>
 8004c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	db3b      	blt.n	8004cc4 <_printf_float+0x39c>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	07da      	lsls	r2, r3, #31
 8004c50:	d438      	bmi.n	8004cc4 <_printf_float+0x39c>
 8004c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c54:	9a05      	ldr	r2, [sp, #20]
 8004c56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c58:	1a9a      	subs	r2, r3, r2
 8004c5a:	eba3 0901 	sub.w	r9, r3, r1
 8004c5e:	4591      	cmp	r9, r2
 8004c60:	bfa8      	it	ge
 8004c62:	4691      	movge	r9, r2
 8004c64:	f1b9 0f00 	cmp.w	r9, #0
 8004c68:	dc35      	bgt.n	8004cd6 <_printf_float+0x3ae>
 8004c6a:	f04f 0800 	mov.w	r8, #0
 8004c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c72:	f104 0a1a 	add.w	sl, r4, #26
 8004c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	eba3 0309 	sub.w	r3, r3, r9
 8004c80:	4543      	cmp	r3, r8
 8004c82:	f77f af79 	ble.w	8004b78 <_printf_float+0x250>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f aeaa 	beq.w	80049ea <_printf_float+0xc2>
 8004c96:	f108 0801 	add.w	r8, r8, #1
 8004c9a:	e7ec      	b.n	8004c76 <_printf_float+0x34e>
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d1c0      	bne.n	8004c2c <_printf_float+0x304>
 8004caa:	e69e      	b.n	80049ea <_printf_float+0xc2>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	9205      	str	r2, [sp, #20]
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f ae97 	beq.w	80049ea <_printf_float+0xc2>
 8004cbc:	9a05      	ldr	r2, [sp, #20]
 8004cbe:	f10b 0b01 	add.w	fp, fp, #1
 8004cc2:	e7b9      	b.n	8004c38 <_printf_float+0x310>
 8004cc4:	ee18 3a10 	vmov	r3, s16
 8004cc8:	4652      	mov	r2, sl
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d1be      	bne.n	8004c52 <_printf_float+0x32a>
 8004cd4:	e689      	b.n	80049ea <_printf_float+0xc2>
 8004cd6:	9a05      	ldr	r2, [sp, #20]
 8004cd8:	464b      	mov	r3, r9
 8004cda:	4442      	add	r2, r8
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d1c1      	bne.n	8004c6a <_printf_float+0x342>
 8004ce6:	e680      	b.n	80049ea <_printf_float+0xc2>
 8004ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cea:	2a01      	cmp	r2, #1
 8004cec:	dc01      	bgt.n	8004cf2 <_printf_float+0x3ca>
 8004cee:	07db      	lsls	r3, r3, #31
 8004cf0:	d538      	bpl.n	8004d64 <_printf_float+0x43c>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	f43f ae74 	beq.w	80049ea <_printf_float+0xc2>
 8004d02:	ee18 3a10 	vmov	r3, s16
 8004d06:	4652      	mov	r2, sl
 8004d08:	4631      	mov	r1, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f ae6b 	beq.w	80049ea <_printf_float+0xc2>
 8004d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f7fb fef4 	bl	8000b08 <__aeabi_dcmpeq>
 8004d20:	b9d8      	cbnz	r0, 8004d5a <_printf_float+0x432>
 8004d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d24:	f108 0201 	add.w	r2, r8, #1
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	d10e      	bne.n	8004d52 <_printf_float+0x42a>
 8004d34:	e659      	b.n	80049ea <_printf_float+0xc2>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4652      	mov	r2, sl
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae52 	beq.w	80049ea <_printf_float+0xc2>
 8004d46:	f108 0801 	add.w	r8, r8, #1
 8004d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	4543      	cmp	r3, r8
 8004d50:	dcf1      	bgt.n	8004d36 <_printf_float+0x40e>
 8004d52:	464b      	mov	r3, r9
 8004d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d58:	e6dc      	b.n	8004b14 <_printf_float+0x1ec>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	f104 0a1a 	add.w	sl, r4, #26
 8004d62:	e7f2      	b.n	8004d4a <_printf_float+0x422>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4642      	mov	r2, r8
 8004d68:	e7df      	b.n	8004d2a <_printf_float+0x402>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	464a      	mov	r2, r9
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f ae38 	beq.w	80049ea <_printf_float+0xc2>
 8004d7a:	f108 0801 	add.w	r8, r8, #1
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d82:	1a5b      	subs	r3, r3, r1
 8004d84:	4543      	cmp	r3, r8
 8004d86:	dcf0      	bgt.n	8004d6a <_printf_float+0x442>
 8004d88:	e6fa      	b.n	8004b80 <_printf_float+0x258>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 0919 	add.w	r9, r4, #25
 8004d92:	e7f4      	b.n	8004d7e <_printf_float+0x456>

08004d94 <_printf_common>:
 8004d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	4616      	mov	r6, r2
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	688a      	ldr	r2, [r1, #8]
 8004d9e:	690b      	ldr	r3, [r1, #16]
 8004da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	bfb8      	it	lt
 8004da8:	4613      	movlt	r3, r2
 8004daa:	6033      	str	r3, [r6, #0]
 8004dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004db0:	4607      	mov	r7, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	b10a      	cbz	r2, 8004dba <_printf_common+0x26>
 8004db6:	3301      	adds	r3, #1
 8004db8:	6033      	str	r3, [r6, #0]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	0699      	lsls	r1, r3, #26
 8004dbe:	bf42      	ittt	mi
 8004dc0:	6833      	ldrmi	r3, [r6, #0]
 8004dc2:	3302      	addmi	r3, #2
 8004dc4:	6033      	strmi	r3, [r6, #0]
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	f015 0506 	ands.w	r5, r5, #6
 8004dcc:	d106      	bne.n	8004ddc <_printf_common+0x48>
 8004dce:	f104 0a19 	add.w	sl, r4, #25
 8004dd2:	68e3      	ldr	r3, [r4, #12]
 8004dd4:	6832      	ldr	r2, [r6, #0]
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	dc26      	bgt.n	8004e2a <_printf_common+0x96>
 8004ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004de0:	1e13      	subs	r3, r2, #0
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	bf18      	it	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	0692      	lsls	r2, r2, #26
 8004dea:	d42b      	bmi.n	8004e44 <_printf_common+0xb0>
 8004dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df0:	4649      	mov	r1, r9
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d01e      	beq.n	8004e38 <_printf_common+0xa4>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	68e5      	ldr	r5, [r4, #12]
 8004dfe:	6832      	ldr	r2, [r6, #0]
 8004e00:	f003 0306 	and.w	r3, r3, #6
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	bf08      	it	eq
 8004e08:	1aad      	subeq	r5, r5, r2
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	6922      	ldr	r2, [r4, #16]
 8004e0e:	bf0c      	ite	eq
 8004e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e14:	2500      	movne	r5, #0
 8004e16:	4293      	cmp	r3, r2
 8004e18:	bfc4      	itt	gt
 8004e1a:	1a9b      	subgt	r3, r3, r2
 8004e1c:	18ed      	addgt	r5, r5, r3
 8004e1e:	2600      	movs	r6, #0
 8004e20:	341a      	adds	r4, #26
 8004e22:	42b5      	cmp	r5, r6
 8004e24:	d11a      	bne.n	8004e5c <_printf_common+0xc8>
 8004e26:	2000      	movs	r0, #0
 8004e28:	e008      	b.n	8004e3c <_printf_common+0xa8>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	4649      	mov	r1, r9
 8004e30:	4638      	mov	r0, r7
 8004e32:	47c0      	blx	r8
 8004e34:	3001      	adds	r0, #1
 8004e36:	d103      	bne.n	8004e40 <_printf_common+0xac>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e40:	3501      	adds	r5, #1
 8004e42:	e7c6      	b.n	8004dd2 <_printf_common+0x3e>
 8004e44:	18e1      	adds	r1, r4, r3
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	2030      	movs	r0, #48	; 0x30
 8004e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e4e:	4422      	add	r2, r4
 8004e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e58:	3302      	adds	r3, #2
 8004e5a:	e7c7      	b.n	8004dec <_printf_common+0x58>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4622      	mov	r2, r4
 8004e60:	4649      	mov	r1, r9
 8004e62:	4638      	mov	r0, r7
 8004e64:	47c0      	blx	r8
 8004e66:	3001      	adds	r0, #1
 8004e68:	d0e6      	beq.n	8004e38 <_printf_common+0xa4>
 8004e6a:	3601      	adds	r6, #1
 8004e6c:	e7d9      	b.n	8004e22 <_printf_common+0x8e>
	...

08004e70 <_printf_i>:
 8004e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	7e0f      	ldrb	r7, [r1, #24]
 8004e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e78:	2f78      	cmp	r7, #120	; 0x78
 8004e7a:	4691      	mov	r9, r2
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	469a      	mov	sl, r3
 8004e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e86:	d807      	bhi.n	8004e98 <_printf_i+0x28>
 8004e88:	2f62      	cmp	r7, #98	; 0x62
 8004e8a:	d80a      	bhi.n	8004ea2 <_printf_i+0x32>
 8004e8c:	2f00      	cmp	r7, #0
 8004e8e:	f000 80d8 	beq.w	8005042 <_printf_i+0x1d2>
 8004e92:	2f58      	cmp	r7, #88	; 0x58
 8004e94:	f000 80a3 	beq.w	8004fde <_printf_i+0x16e>
 8004e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ea0:	e03a      	b.n	8004f18 <_printf_i+0xa8>
 8004ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ea6:	2b15      	cmp	r3, #21
 8004ea8:	d8f6      	bhi.n	8004e98 <_printf_i+0x28>
 8004eaa:	a101      	add	r1, pc, #4	; (adr r1, 8004eb0 <_printf_i+0x40>)
 8004eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004e99 	.word	0x08004e99
 8004ebc:	08004e99 	.word	0x08004e99
 8004ec0:	08004e99 	.word	0x08004e99
 8004ec4:	08004e99 	.word	0x08004e99
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004e99 	.word	0x08004e99
 8004ed0:	08004e99 	.word	0x08004e99
 8004ed4:	08004e99 	.word	0x08004e99
 8004ed8:	08004e99 	.word	0x08004e99
 8004edc:	08005029 	.word	0x08005029
 8004ee0:	08004f4d 	.word	0x08004f4d
 8004ee4:	0800500b 	.word	0x0800500b
 8004ee8:	08004e99 	.word	0x08004e99
 8004eec:	08004e99 	.word	0x08004e99
 8004ef0:	0800504b 	.word	0x0800504b
 8004ef4:	08004e99 	.word	0x08004e99
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004e99 	.word	0x08004e99
 8004f00:	08004e99 	.word	0x08004e99
 8004f04:	08005013 	.word	0x08005013
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	602a      	str	r2, [r5, #0]
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0a3      	b.n	8005064 <_printf_i+0x1f4>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	6829      	ldr	r1, [r5, #0]
 8004f20:	0606      	lsls	r6, r0, #24
 8004f22:	f101 0304 	add.w	r3, r1, #4
 8004f26:	d50a      	bpl.n	8004f3e <_printf_i+0xce>
 8004f28:	680e      	ldr	r6, [r1, #0]
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	2e00      	cmp	r6, #0
 8004f2e:	da03      	bge.n	8004f38 <_printf_i+0xc8>
 8004f30:	232d      	movs	r3, #45	; 0x2d
 8004f32:	4276      	negs	r6, r6
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f38:	485e      	ldr	r0, [pc, #376]	; (80050b4 <_printf_i+0x244>)
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e019      	b.n	8004f72 <_printf_i+0x102>
 8004f3e:	680e      	ldr	r6, [r1, #0]
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f46:	bf18      	it	ne
 8004f48:	b236      	sxthne	r6, r6
 8004f4a:	e7ef      	b.n	8004f2c <_printf_i+0xbc>
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	6029      	str	r1, [r5, #0]
 8004f54:	0601      	lsls	r1, r0, #24
 8004f56:	d501      	bpl.n	8004f5c <_printf_i+0xec>
 8004f58:	681e      	ldr	r6, [r3, #0]
 8004f5a:	e002      	b.n	8004f62 <_printf_i+0xf2>
 8004f5c:	0646      	lsls	r6, r0, #25
 8004f5e:	d5fb      	bpl.n	8004f58 <_printf_i+0xe8>
 8004f60:	881e      	ldrh	r6, [r3, #0]
 8004f62:	4854      	ldr	r0, [pc, #336]	; (80050b4 <_printf_i+0x244>)
 8004f64:	2f6f      	cmp	r7, #111	; 0x6f
 8004f66:	bf0c      	ite	eq
 8004f68:	2308      	moveq	r3, #8
 8004f6a:	230a      	movne	r3, #10
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f72:	6865      	ldr	r5, [r4, #4]
 8004f74:	60a5      	str	r5, [r4, #8]
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	bfa2      	ittt	ge
 8004f7a:	6821      	ldrge	r1, [r4, #0]
 8004f7c:	f021 0104 	bicge.w	r1, r1, #4
 8004f80:	6021      	strge	r1, [r4, #0]
 8004f82:	b90e      	cbnz	r6, 8004f88 <_printf_i+0x118>
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	d04d      	beq.n	8005024 <_printf_i+0x1b4>
 8004f88:	4615      	mov	r5, r2
 8004f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f92:	5dc7      	ldrb	r7, [r0, r7]
 8004f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f98:	4637      	mov	r7, r6
 8004f9a:	42bb      	cmp	r3, r7
 8004f9c:	460e      	mov	r6, r1
 8004f9e:	d9f4      	bls.n	8004f8a <_printf_i+0x11a>
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d10b      	bne.n	8004fbc <_printf_i+0x14c>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	07de      	lsls	r6, r3, #31
 8004fa8:	d508      	bpl.n	8004fbc <_printf_i+0x14c>
 8004faa:	6923      	ldr	r3, [r4, #16]
 8004fac:	6861      	ldr	r1, [r4, #4]
 8004fae:	4299      	cmp	r1, r3
 8004fb0:	bfde      	ittt	le
 8004fb2:	2330      	movle	r3, #48	; 0x30
 8004fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fbc:	1b52      	subs	r2, r2, r5
 8004fbe:	6122      	str	r2, [r4, #16]
 8004fc0:	f8cd a000 	str.w	sl, [sp]
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	aa03      	add	r2, sp, #12
 8004fc8:	4621      	mov	r1, r4
 8004fca:	4640      	mov	r0, r8
 8004fcc:	f7ff fee2 	bl	8004d94 <_printf_common>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d14c      	bne.n	800506e <_printf_i+0x1fe>
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	b004      	add	sp, #16
 8004fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fde:	4835      	ldr	r0, [pc, #212]	; (80050b4 <_printf_i+0x244>)
 8004fe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fe4:	6829      	ldr	r1, [r5, #0]
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fec:	6029      	str	r1, [r5, #0]
 8004fee:	061d      	lsls	r5, r3, #24
 8004ff0:	d514      	bpl.n	800501c <_printf_i+0x1ac>
 8004ff2:	07df      	lsls	r7, r3, #31
 8004ff4:	bf44      	itt	mi
 8004ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffa:	6023      	strmi	r3, [r4, #0]
 8004ffc:	b91e      	cbnz	r6, 8005006 <_printf_i+0x196>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	f023 0320 	bic.w	r3, r3, #32
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	2310      	movs	r3, #16
 8005008:	e7b0      	b.n	8004f6c <_printf_i+0xfc>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	f043 0320 	orr.w	r3, r3, #32
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	2378      	movs	r3, #120	; 0x78
 8005014:	4828      	ldr	r0, [pc, #160]	; (80050b8 <_printf_i+0x248>)
 8005016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800501a:	e7e3      	b.n	8004fe4 <_printf_i+0x174>
 800501c:	0659      	lsls	r1, r3, #25
 800501e:	bf48      	it	mi
 8005020:	b2b6      	uxthmi	r6, r6
 8005022:	e7e6      	b.n	8004ff2 <_printf_i+0x182>
 8005024:	4615      	mov	r5, r2
 8005026:	e7bb      	b.n	8004fa0 <_printf_i+0x130>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	6826      	ldr	r6, [r4, #0]
 800502c:	6961      	ldr	r1, [r4, #20]
 800502e:	1d18      	adds	r0, r3, #4
 8005030:	6028      	str	r0, [r5, #0]
 8005032:	0635      	lsls	r5, r6, #24
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	d501      	bpl.n	800503c <_printf_i+0x1cc>
 8005038:	6019      	str	r1, [r3, #0]
 800503a:	e002      	b.n	8005042 <_printf_i+0x1d2>
 800503c:	0670      	lsls	r0, r6, #25
 800503e:	d5fb      	bpl.n	8005038 <_printf_i+0x1c8>
 8005040:	8019      	strh	r1, [r3, #0]
 8005042:	2300      	movs	r3, #0
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	4615      	mov	r5, r2
 8005048:	e7ba      	b.n	8004fc0 <_printf_i+0x150>
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	1d1a      	adds	r2, r3, #4
 800504e:	602a      	str	r2, [r5, #0]
 8005050:	681d      	ldr	r5, [r3, #0]
 8005052:	6862      	ldr	r2, [r4, #4]
 8005054:	2100      	movs	r1, #0
 8005056:	4628      	mov	r0, r5
 8005058:	f7fb f8e2 	bl	8000220 <memchr>
 800505c:	b108      	cbz	r0, 8005062 <_printf_i+0x1f2>
 800505e:	1b40      	subs	r0, r0, r5
 8005060:	6060      	str	r0, [r4, #4]
 8005062:	6863      	ldr	r3, [r4, #4]
 8005064:	6123      	str	r3, [r4, #16]
 8005066:	2300      	movs	r3, #0
 8005068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800506c:	e7a8      	b.n	8004fc0 <_printf_i+0x150>
 800506e:	6923      	ldr	r3, [r4, #16]
 8005070:	462a      	mov	r2, r5
 8005072:	4649      	mov	r1, r9
 8005074:	4640      	mov	r0, r8
 8005076:	47d0      	blx	sl
 8005078:	3001      	adds	r0, #1
 800507a:	d0ab      	beq.n	8004fd4 <_printf_i+0x164>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	079b      	lsls	r3, r3, #30
 8005080:	d413      	bmi.n	80050aa <_printf_i+0x23a>
 8005082:	68e0      	ldr	r0, [r4, #12]
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	4298      	cmp	r0, r3
 8005088:	bfb8      	it	lt
 800508a:	4618      	movlt	r0, r3
 800508c:	e7a4      	b.n	8004fd8 <_printf_i+0x168>
 800508e:	2301      	movs	r3, #1
 8005090:	4632      	mov	r2, r6
 8005092:	4649      	mov	r1, r9
 8005094:	4640      	mov	r0, r8
 8005096:	47d0      	blx	sl
 8005098:	3001      	adds	r0, #1
 800509a:	d09b      	beq.n	8004fd4 <_printf_i+0x164>
 800509c:	3501      	adds	r5, #1
 800509e:	68e3      	ldr	r3, [r4, #12]
 80050a0:	9903      	ldr	r1, [sp, #12]
 80050a2:	1a5b      	subs	r3, r3, r1
 80050a4:	42ab      	cmp	r3, r5
 80050a6:	dcf2      	bgt.n	800508e <_printf_i+0x21e>
 80050a8:	e7eb      	b.n	8005082 <_printf_i+0x212>
 80050aa:	2500      	movs	r5, #0
 80050ac:	f104 0619 	add.w	r6, r4, #25
 80050b0:	e7f5      	b.n	800509e <_printf_i+0x22e>
 80050b2:	bf00      	nop
 80050b4:	0800a47a 	.word	0x0800a47a
 80050b8:	0800a48b 	.word	0x0800a48b

080050bc <_scanf_float>:
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	b087      	sub	sp, #28
 80050c2:	4617      	mov	r7, r2
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	688b      	ldr	r3, [r1, #8]
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80050ce:	bf83      	ittte	hi
 80050d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050d4:	195b      	addhi	r3, r3, r5
 80050d6:	9302      	strhi	r3, [sp, #8]
 80050d8:	2300      	movls	r3, #0
 80050da:	bf86      	itte	hi
 80050dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050e0:	608b      	strhi	r3, [r1, #8]
 80050e2:	9302      	strls	r3, [sp, #8]
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	468b      	mov	fp, r1
 80050e8:	2500      	movs	r5, #0
 80050ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80050ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80050f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050f6:	4680      	mov	r8, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	465e      	mov	r6, fp
 80050fc:	46aa      	mov	sl, r5
 80050fe:	46a9      	mov	r9, r5
 8005100:	9501      	str	r5, [sp, #4]
 8005102:	68a2      	ldr	r2, [r4, #8]
 8005104:	b152      	cbz	r2, 800511c <_scanf_float+0x60>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b4e      	cmp	r3, #78	; 0x4e
 800510c:	d864      	bhi.n	80051d8 <_scanf_float+0x11c>
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d83c      	bhi.n	800518c <_scanf_float+0xd0>
 8005112:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005116:	b2c8      	uxtb	r0, r1
 8005118:	280e      	cmp	r0, #14
 800511a:	d93a      	bls.n	8005192 <_scanf_float+0xd6>
 800511c:	f1b9 0f00 	cmp.w	r9, #0
 8005120:	d003      	beq.n	800512a <_scanf_float+0x6e>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005128:	6023      	str	r3, [r4, #0]
 800512a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800512e:	f1ba 0f01 	cmp.w	sl, #1
 8005132:	f200 8113 	bhi.w	800535c <_scanf_float+0x2a0>
 8005136:	455e      	cmp	r6, fp
 8005138:	f200 8105 	bhi.w	8005346 <_scanf_float+0x28a>
 800513c:	2501      	movs	r5, #1
 800513e:	4628      	mov	r0, r5
 8005140:	b007      	add	sp, #28
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800514a:	2a0d      	cmp	r2, #13
 800514c:	d8e6      	bhi.n	800511c <_scanf_float+0x60>
 800514e:	a101      	add	r1, pc, #4	; (adr r1, 8005154 <_scanf_float+0x98>)
 8005150:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005154:	08005293 	.word	0x08005293
 8005158:	0800511d 	.word	0x0800511d
 800515c:	0800511d 	.word	0x0800511d
 8005160:	0800511d 	.word	0x0800511d
 8005164:	080052f3 	.word	0x080052f3
 8005168:	080052cb 	.word	0x080052cb
 800516c:	0800511d 	.word	0x0800511d
 8005170:	0800511d 	.word	0x0800511d
 8005174:	080052a1 	.word	0x080052a1
 8005178:	0800511d 	.word	0x0800511d
 800517c:	0800511d 	.word	0x0800511d
 8005180:	0800511d 	.word	0x0800511d
 8005184:	0800511d 	.word	0x0800511d
 8005188:	08005259 	.word	0x08005259
 800518c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005190:	e7db      	b.n	800514a <_scanf_float+0x8e>
 8005192:	290e      	cmp	r1, #14
 8005194:	d8c2      	bhi.n	800511c <_scanf_float+0x60>
 8005196:	a001      	add	r0, pc, #4	; (adr r0, 800519c <_scanf_float+0xe0>)
 8005198:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800519c:	0800524b 	.word	0x0800524b
 80051a0:	0800511d 	.word	0x0800511d
 80051a4:	0800524b 	.word	0x0800524b
 80051a8:	080052df 	.word	0x080052df
 80051ac:	0800511d 	.word	0x0800511d
 80051b0:	080051f9 	.word	0x080051f9
 80051b4:	08005235 	.word	0x08005235
 80051b8:	08005235 	.word	0x08005235
 80051bc:	08005235 	.word	0x08005235
 80051c0:	08005235 	.word	0x08005235
 80051c4:	08005235 	.word	0x08005235
 80051c8:	08005235 	.word	0x08005235
 80051cc:	08005235 	.word	0x08005235
 80051d0:	08005235 	.word	0x08005235
 80051d4:	08005235 	.word	0x08005235
 80051d8:	2b6e      	cmp	r3, #110	; 0x6e
 80051da:	d809      	bhi.n	80051f0 <_scanf_float+0x134>
 80051dc:	2b60      	cmp	r3, #96	; 0x60
 80051de:	d8b2      	bhi.n	8005146 <_scanf_float+0x8a>
 80051e0:	2b54      	cmp	r3, #84	; 0x54
 80051e2:	d077      	beq.n	80052d4 <_scanf_float+0x218>
 80051e4:	2b59      	cmp	r3, #89	; 0x59
 80051e6:	d199      	bne.n	800511c <_scanf_float+0x60>
 80051e8:	2d07      	cmp	r5, #7
 80051ea:	d197      	bne.n	800511c <_scanf_float+0x60>
 80051ec:	2508      	movs	r5, #8
 80051ee:	e029      	b.n	8005244 <_scanf_float+0x188>
 80051f0:	2b74      	cmp	r3, #116	; 0x74
 80051f2:	d06f      	beq.n	80052d4 <_scanf_float+0x218>
 80051f4:	2b79      	cmp	r3, #121	; 0x79
 80051f6:	e7f6      	b.n	80051e6 <_scanf_float+0x12a>
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	05c8      	lsls	r0, r1, #23
 80051fc:	d51a      	bpl.n	8005234 <_scanf_float+0x178>
 80051fe:	9b02      	ldr	r3, [sp, #8]
 8005200:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005204:	6021      	str	r1, [r4, #0]
 8005206:	f109 0901 	add.w	r9, r9, #1
 800520a:	b11b      	cbz	r3, 8005214 <_scanf_float+0x158>
 800520c:	3b01      	subs	r3, #1
 800520e:	3201      	adds	r2, #1
 8005210:	9302      	str	r3, [sp, #8]
 8005212:	60a2      	str	r2, [r4, #8]
 8005214:	68a3      	ldr	r3, [r4, #8]
 8005216:	3b01      	subs	r3, #1
 8005218:	60a3      	str	r3, [r4, #8]
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	3301      	adds	r3, #1
 800521e:	6123      	str	r3, [r4, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	f340 8084 	ble.w	8005334 <_scanf_float+0x278>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	e766      	b.n	8005102 <_scanf_float+0x46>
 8005234:	eb1a 0f05 	cmn.w	sl, r5
 8005238:	f47f af70 	bne.w	800511c <_scanf_float+0x60>
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005242:	6022      	str	r2, [r4, #0]
 8005244:	f806 3b01 	strb.w	r3, [r6], #1
 8005248:	e7e4      	b.n	8005214 <_scanf_float+0x158>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	0610      	lsls	r0, r2, #24
 800524e:	f57f af65 	bpl.w	800511c <_scanf_float+0x60>
 8005252:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005256:	e7f4      	b.n	8005242 <_scanf_float+0x186>
 8005258:	f1ba 0f00 	cmp.w	sl, #0
 800525c:	d10e      	bne.n	800527c <_scanf_float+0x1c0>
 800525e:	f1b9 0f00 	cmp.w	r9, #0
 8005262:	d10e      	bne.n	8005282 <_scanf_float+0x1c6>
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800526a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800526e:	d108      	bne.n	8005282 <_scanf_float+0x1c6>
 8005270:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005274:	6022      	str	r2, [r4, #0]
 8005276:	f04f 0a01 	mov.w	sl, #1
 800527a:	e7e3      	b.n	8005244 <_scanf_float+0x188>
 800527c:	f1ba 0f02 	cmp.w	sl, #2
 8005280:	d055      	beq.n	800532e <_scanf_float+0x272>
 8005282:	2d01      	cmp	r5, #1
 8005284:	d002      	beq.n	800528c <_scanf_float+0x1d0>
 8005286:	2d04      	cmp	r5, #4
 8005288:	f47f af48 	bne.w	800511c <_scanf_float+0x60>
 800528c:	3501      	adds	r5, #1
 800528e:	b2ed      	uxtb	r5, r5
 8005290:	e7d8      	b.n	8005244 <_scanf_float+0x188>
 8005292:	f1ba 0f01 	cmp.w	sl, #1
 8005296:	f47f af41 	bne.w	800511c <_scanf_float+0x60>
 800529a:	f04f 0a02 	mov.w	sl, #2
 800529e:	e7d1      	b.n	8005244 <_scanf_float+0x188>
 80052a0:	b97d      	cbnz	r5, 80052c2 <_scanf_float+0x206>
 80052a2:	f1b9 0f00 	cmp.w	r9, #0
 80052a6:	f47f af3c 	bne.w	8005122 <_scanf_float+0x66>
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052b4:	f47f af39 	bne.w	800512a <_scanf_float+0x6e>
 80052b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052bc:	6022      	str	r2, [r4, #0]
 80052be:	2501      	movs	r5, #1
 80052c0:	e7c0      	b.n	8005244 <_scanf_float+0x188>
 80052c2:	2d03      	cmp	r5, #3
 80052c4:	d0e2      	beq.n	800528c <_scanf_float+0x1d0>
 80052c6:	2d05      	cmp	r5, #5
 80052c8:	e7de      	b.n	8005288 <_scanf_float+0x1cc>
 80052ca:	2d02      	cmp	r5, #2
 80052cc:	f47f af26 	bne.w	800511c <_scanf_float+0x60>
 80052d0:	2503      	movs	r5, #3
 80052d2:	e7b7      	b.n	8005244 <_scanf_float+0x188>
 80052d4:	2d06      	cmp	r5, #6
 80052d6:	f47f af21 	bne.w	800511c <_scanf_float+0x60>
 80052da:	2507      	movs	r5, #7
 80052dc:	e7b2      	b.n	8005244 <_scanf_float+0x188>
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	0591      	lsls	r1, r2, #22
 80052e2:	f57f af1b 	bpl.w	800511c <_scanf_float+0x60>
 80052e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80052ea:	6022      	str	r2, [r4, #0]
 80052ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80052f0:	e7a8      	b.n	8005244 <_scanf_float+0x188>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052fc:	d006      	beq.n	800530c <_scanf_float+0x250>
 80052fe:	0550      	lsls	r0, r2, #21
 8005300:	f57f af0c 	bpl.w	800511c <_scanf_float+0x60>
 8005304:	f1b9 0f00 	cmp.w	r9, #0
 8005308:	f43f af0f 	beq.w	800512a <_scanf_float+0x6e>
 800530c:	0591      	lsls	r1, r2, #22
 800530e:	bf58      	it	pl
 8005310:	9901      	ldrpl	r1, [sp, #4]
 8005312:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005316:	bf58      	it	pl
 8005318:	eba9 0101 	subpl.w	r1, r9, r1
 800531c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005320:	bf58      	it	pl
 8005322:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	f04f 0900 	mov.w	r9, #0
 800532c:	e78a      	b.n	8005244 <_scanf_float+0x188>
 800532e:	f04f 0a03 	mov.w	sl, #3
 8005332:	e787      	b.n	8005244 <_scanf_float+0x188>
 8005334:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005338:	4639      	mov	r1, r7
 800533a:	4640      	mov	r0, r8
 800533c:	4798      	blx	r3
 800533e:	2800      	cmp	r0, #0
 8005340:	f43f aedf 	beq.w	8005102 <_scanf_float+0x46>
 8005344:	e6ea      	b.n	800511c <_scanf_float+0x60>
 8005346:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800534a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800534e:	463a      	mov	r2, r7
 8005350:	4640      	mov	r0, r8
 8005352:	4798      	blx	r3
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	3b01      	subs	r3, #1
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	e6ec      	b.n	8005136 <_scanf_float+0x7a>
 800535c:	1e6b      	subs	r3, r5, #1
 800535e:	2b06      	cmp	r3, #6
 8005360:	d825      	bhi.n	80053ae <_scanf_float+0x2f2>
 8005362:	2d02      	cmp	r5, #2
 8005364:	d836      	bhi.n	80053d4 <_scanf_float+0x318>
 8005366:	455e      	cmp	r6, fp
 8005368:	f67f aee8 	bls.w	800513c <_scanf_float+0x80>
 800536c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005370:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005374:	463a      	mov	r2, r7
 8005376:	4640      	mov	r0, r8
 8005378:	4798      	blx	r3
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	3b01      	subs	r3, #1
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	e7f1      	b.n	8005366 <_scanf_float+0x2aa>
 8005382:	9802      	ldr	r0, [sp, #8]
 8005384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005388:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800538c:	9002      	str	r0, [sp, #8]
 800538e:	463a      	mov	r2, r7
 8005390:	4640      	mov	r0, r8
 8005392:	4798      	blx	r3
 8005394:	6923      	ldr	r3, [r4, #16]
 8005396:	3b01      	subs	r3, #1
 8005398:	6123      	str	r3, [r4, #16]
 800539a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800539e:	fa5f fa8a 	uxtb.w	sl, sl
 80053a2:	f1ba 0f02 	cmp.w	sl, #2
 80053a6:	d1ec      	bne.n	8005382 <_scanf_float+0x2c6>
 80053a8:	3d03      	subs	r5, #3
 80053aa:	b2ed      	uxtb	r5, r5
 80053ac:	1b76      	subs	r6, r6, r5
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	05da      	lsls	r2, r3, #23
 80053b2:	d52f      	bpl.n	8005414 <_scanf_float+0x358>
 80053b4:	055b      	lsls	r3, r3, #21
 80053b6:	d510      	bpl.n	80053da <_scanf_float+0x31e>
 80053b8:	455e      	cmp	r6, fp
 80053ba:	f67f aebf 	bls.w	800513c <_scanf_float+0x80>
 80053be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053c6:	463a      	mov	r2, r7
 80053c8:	4640      	mov	r0, r8
 80053ca:	4798      	blx	r3
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	e7f1      	b.n	80053b8 <_scanf_float+0x2fc>
 80053d4:	46aa      	mov	sl, r5
 80053d6:	9602      	str	r6, [sp, #8]
 80053d8:	e7df      	b.n	800539a <_scanf_float+0x2de>
 80053da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	2965      	cmp	r1, #101	; 0x65
 80053e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80053e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80053ea:	6123      	str	r3, [r4, #16]
 80053ec:	d00c      	beq.n	8005408 <_scanf_float+0x34c>
 80053ee:	2945      	cmp	r1, #69	; 0x45
 80053f0:	d00a      	beq.n	8005408 <_scanf_float+0x34c>
 80053f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053f6:	463a      	mov	r2, r7
 80053f8:	4640      	mov	r0, r8
 80053fa:	4798      	blx	r3
 80053fc:	6923      	ldr	r3, [r4, #16]
 80053fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005402:	3b01      	subs	r3, #1
 8005404:	1eb5      	subs	r5, r6, #2
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800540c:	463a      	mov	r2, r7
 800540e:	4640      	mov	r0, r8
 8005410:	4798      	blx	r3
 8005412:	462e      	mov	r6, r5
 8005414:	6825      	ldr	r5, [r4, #0]
 8005416:	f015 0510 	ands.w	r5, r5, #16
 800541a:	d159      	bne.n	80054d0 <_scanf_float+0x414>
 800541c:	7035      	strb	r5, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d11b      	bne.n	8005462 <_scanf_float+0x3a6>
 800542a:	9b01      	ldr	r3, [sp, #4]
 800542c:	454b      	cmp	r3, r9
 800542e:	eba3 0209 	sub.w	r2, r3, r9
 8005432:	d123      	bne.n	800547c <_scanf_float+0x3c0>
 8005434:	2200      	movs	r2, #0
 8005436:	4659      	mov	r1, fp
 8005438:	4640      	mov	r0, r8
 800543a:	f000 fe97 	bl	800616c <_strtod_r>
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	9b03      	ldr	r3, [sp, #12]
 8005442:	f012 0f02 	tst.w	r2, #2
 8005446:	ec57 6b10 	vmov	r6, r7, d0
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	d021      	beq.n	8005492 <_scanf_float+0x3d6>
 800544e:	9903      	ldr	r1, [sp, #12]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	600a      	str	r2, [r1, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	e9c3 6700 	strd	r6, r7, [r3]
 800545a:	68e3      	ldr	r3, [r4, #12]
 800545c:	3301      	adds	r3, #1
 800545e:	60e3      	str	r3, [r4, #12]
 8005460:	e66d      	b.n	800513e <_scanf_float+0x82>
 8005462:	9b04      	ldr	r3, [sp, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0e5      	beq.n	8005434 <_scanf_float+0x378>
 8005468:	9905      	ldr	r1, [sp, #20]
 800546a:	230a      	movs	r3, #10
 800546c:	462a      	mov	r2, r5
 800546e:	3101      	adds	r1, #1
 8005470:	4640      	mov	r0, r8
 8005472:	f000 ff03 	bl	800627c <_strtol_r>
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	9e05      	ldr	r6, [sp, #20]
 800547a:	1ac2      	subs	r2, r0, r3
 800547c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005480:	429e      	cmp	r6, r3
 8005482:	bf28      	it	cs
 8005484:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005488:	4912      	ldr	r1, [pc, #72]	; (80054d4 <_scanf_float+0x418>)
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f82c 	bl	80054e8 <siprintf>
 8005490:	e7d0      	b.n	8005434 <_scanf_float+0x378>
 8005492:	9903      	ldr	r1, [sp, #12]
 8005494:	f012 0f04 	tst.w	r2, #4
 8005498:	f103 0204 	add.w	r2, r3, #4
 800549c:	600a      	str	r2, [r1, #0]
 800549e:	d1d9      	bne.n	8005454 <_scanf_float+0x398>
 80054a0:	f8d3 8000 	ldr.w	r8, [r3]
 80054a4:	ee10 2a10 	vmov	r2, s0
 80054a8:	ee10 0a10 	vmov	r0, s0
 80054ac:	463b      	mov	r3, r7
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb fb5c 	bl	8000b6c <__aeabi_dcmpun>
 80054b4:	b128      	cbz	r0, 80054c2 <_scanf_float+0x406>
 80054b6:	4808      	ldr	r0, [pc, #32]	; (80054d8 <_scanf_float+0x41c>)
 80054b8:	f000 f810 	bl	80054dc <nanf>
 80054bc:	ed88 0a00 	vstr	s0, [r8]
 80054c0:	e7cb      	b.n	800545a <_scanf_float+0x39e>
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fb fbaf 	bl	8000c28 <__aeabi_d2f>
 80054ca:	f8c8 0000 	str.w	r0, [r8]
 80054ce:	e7c4      	b.n	800545a <_scanf_float+0x39e>
 80054d0:	2500      	movs	r5, #0
 80054d2:	e634      	b.n	800513e <_scanf_float+0x82>
 80054d4:	0800a49c 	.word	0x0800a49c
 80054d8:	0800a8a8 	.word	0x0800a8a8

080054dc <nanf>:
 80054dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80054e4 <nanf+0x8>
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	7fc00000 	.word	0x7fc00000

080054e8 <siprintf>:
 80054e8:	b40e      	push	{r1, r2, r3}
 80054ea:	b500      	push	{lr}
 80054ec:	b09c      	sub	sp, #112	; 0x70
 80054ee:	ab1d      	add	r3, sp, #116	; 0x74
 80054f0:	9002      	str	r0, [sp, #8]
 80054f2:	9006      	str	r0, [sp, #24]
 80054f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054f8:	4809      	ldr	r0, [pc, #36]	; (8005520 <siprintf+0x38>)
 80054fa:	9107      	str	r1, [sp, #28]
 80054fc:	9104      	str	r1, [sp, #16]
 80054fe:	4909      	ldr	r1, [pc, #36]	; (8005524 <siprintf+0x3c>)
 8005500:	f853 2b04 	ldr.w	r2, [r3], #4
 8005504:	9105      	str	r1, [sp, #20]
 8005506:	6800      	ldr	r0, [r0, #0]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	a902      	add	r1, sp, #8
 800550c:	f002 feee 	bl	80082ec <_svfiprintf_r>
 8005510:	9b02      	ldr	r3, [sp, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	b01c      	add	sp, #112	; 0x70
 8005518:	f85d eb04 	ldr.w	lr, [sp], #4
 800551c:	b003      	add	sp, #12
 800551e:	4770      	bx	lr
 8005520:	20000010 	.word	0x20000010
 8005524:	ffff0208 	.word	0xffff0208

08005528 <sulp>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4604      	mov	r4, r0
 800552c:	460d      	mov	r5, r1
 800552e:	ec45 4b10 	vmov	d0, r4, r5
 8005532:	4616      	mov	r6, r2
 8005534:	f002 fc38 	bl	8007da8 <__ulp>
 8005538:	ec51 0b10 	vmov	r0, r1, d0
 800553c:	b17e      	cbz	r6, 800555e <sulp+0x36>
 800553e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005542:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd09      	ble.n	800555e <sulp+0x36>
 800554a:	051b      	lsls	r3, r3, #20
 800554c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005550:	2400      	movs	r4, #0
 8005552:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005556:	4622      	mov	r2, r4
 8005558:	462b      	mov	r3, r5
 800555a:	f7fb f86d 	bl	8000638 <__aeabi_dmul>
 800555e:	bd70      	pop	{r4, r5, r6, pc}

08005560 <_strtod_l>:
 8005560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005564:	ed2d 8b02 	vpush	{d8}
 8005568:	b09d      	sub	sp, #116	; 0x74
 800556a:	461f      	mov	r7, r3
 800556c:	2300      	movs	r3, #0
 800556e:	9318      	str	r3, [sp, #96]	; 0x60
 8005570:	4ba2      	ldr	r3, [pc, #648]	; (80057fc <_strtod_l+0x29c>)
 8005572:	9213      	str	r2, [sp, #76]	; 0x4c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	9305      	str	r3, [sp, #20]
 8005578:	4604      	mov	r4, r0
 800557a:	4618      	mov	r0, r3
 800557c:	4688      	mov	r8, r1
 800557e:	f7fa fe47 	bl	8000210 <strlen>
 8005582:	f04f 0a00 	mov.w	sl, #0
 8005586:	4605      	mov	r5, r0
 8005588:	f04f 0b00 	mov.w	fp, #0
 800558c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005592:	781a      	ldrb	r2, [r3, #0]
 8005594:	2a2b      	cmp	r2, #43	; 0x2b
 8005596:	d04e      	beq.n	8005636 <_strtod_l+0xd6>
 8005598:	d83b      	bhi.n	8005612 <_strtod_l+0xb2>
 800559a:	2a0d      	cmp	r2, #13
 800559c:	d834      	bhi.n	8005608 <_strtod_l+0xa8>
 800559e:	2a08      	cmp	r2, #8
 80055a0:	d834      	bhi.n	800560c <_strtod_l+0xac>
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	d03e      	beq.n	8005624 <_strtod_l+0xc4>
 80055a6:	2300      	movs	r3, #0
 80055a8:	930a      	str	r3, [sp, #40]	; 0x28
 80055aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80055ac:	7833      	ldrb	r3, [r6, #0]
 80055ae:	2b30      	cmp	r3, #48	; 0x30
 80055b0:	f040 80b0 	bne.w	8005714 <_strtod_l+0x1b4>
 80055b4:	7873      	ldrb	r3, [r6, #1]
 80055b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80055ba:	2b58      	cmp	r3, #88	; 0x58
 80055bc:	d168      	bne.n	8005690 <_strtod_l+0x130>
 80055be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	ab18      	add	r3, sp, #96	; 0x60
 80055c4:	9702      	str	r7, [sp, #8]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4a8d      	ldr	r2, [pc, #564]	; (8005800 <_strtod_l+0x2a0>)
 80055ca:	ab19      	add	r3, sp, #100	; 0x64
 80055cc:	a917      	add	r1, sp, #92	; 0x5c
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 fd44 	bl	800705c <__gethex>
 80055d4:	f010 0707 	ands.w	r7, r0, #7
 80055d8:	4605      	mov	r5, r0
 80055da:	d005      	beq.n	80055e8 <_strtod_l+0x88>
 80055dc:	2f06      	cmp	r7, #6
 80055de:	d12c      	bne.n	800563a <_strtod_l+0xda>
 80055e0:	3601      	adds	r6, #1
 80055e2:	2300      	movs	r3, #0
 80055e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80055e6:	930a      	str	r3, [sp, #40]	; 0x28
 80055e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 8590 	bne.w	8006110 <_strtod_l+0xbb0>
 80055f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f2:	b1eb      	cbz	r3, 8005630 <_strtod_l+0xd0>
 80055f4:	4652      	mov	r2, sl
 80055f6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055fa:	ec43 2b10 	vmov	d0, r2, r3
 80055fe:	b01d      	add	sp, #116	; 0x74
 8005600:	ecbd 8b02 	vpop	{d8}
 8005604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	2a20      	cmp	r2, #32
 800560a:	d1cc      	bne.n	80055a6 <_strtod_l+0x46>
 800560c:	3301      	adds	r3, #1
 800560e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005610:	e7be      	b.n	8005590 <_strtod_l+0x30>
 8005612:	2a2d      	cmp	r2, #45	; 0x2d
 8005614:	d1c7      	bne.n	80055a6 <_strtod_l+0x46>
 8005616:	2201      	movs	r2, #1
 8005618:	920a      	str	r2, [sp, #40]	; 0x28
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	9217      	str	r2, [sp, #92]	; 0x5c
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1c2      	bne.n	80055aa <_strtod_l+0x4a>
 8005624:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005626:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 856e 	bne.w	800610c <_strtod_l+0xbac>
 8005630:	4652      	mov	r2, sl
 8005632:	465b      	mov	r3, fp
 8005634:	e7e1      	b.n	80055fa <_strtod_l+0x9a>
 8005636:	2200      	movs	r2, #0
 8005638:	e7ee      	b.n	8005618 <_strtod_l+0xb8>
 800563a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800563c:	b13a      	cbz	r2, 800564e <_strtod_l+0xee>
 800563e:	2135      	movs	r1, #53	; 0x35
 8005640:	a81a      	add	r0, sp, #104	; 0x68
 8005642:	f002 fcbc 	bl	8007fbe <__copybits>
 8005646:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005648:	4620      	mov	r0, r4
 800564a:	f002 f87b 	bl	8007744 <_Bfree>
 800564e:	3f01      	subs	r7, #1
 8005650:	2f04      	cmp	r7, #4
 8005652:	d806      	bhi.n	8005662 <_strtod_l+0x102>
 8005654:	e8df f007 	tbb	[pc, r7]
 8005658:	1714030a 	.word	0x1714030a
 800565c:	0a          	.byte	0x0a
 800565d:	00          	.byte	0x00
 800565e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005662:	0728      	lsls	r0, r5, #28
 8005664:	d5c0      	bpl.n	80055e8 <_strtod_l+0x88>
 8005666:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800566a:	e7bd      	b.n	80055e8 <_strtod_l+0x88>
 800566c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005670:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005672:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005676:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800567a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800567e:	e7f0      	b.n	8005662 <_strtod_l+0x102>
 8005680:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005804 <_strtod_l+0x2a4>
 8005684:	e7ed      	b.n	8005662 <_strtod_l+0x102>
 8005686:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800568a:	f04f 3aff 	mov.w	sl, #4294967295
 800568e:	e7e8      	b.n	8005662 <_strtod_l+0x102>
 8005690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	9217      	str	r2, [sp, #92]	; 0x5c
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b30      	cmp	r3, #48	; 0x30
 800569a:	d0f9      	beq.n	8005690 <_strtod_l+0x130>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0a3      	beq.n	80055e8 <_strtod_l+0x88>
 80056a0:	2301      	movs	r3, #1
 80056a2:	f04f 0900 	mov.w	r9, #0
 80056a6:	9304      	str	r3, [sp, #16]
 80056a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056aa:	9308      	str	r3, [sp, #32]
 80056ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80056b0:	464f      	mov	r7, r9
 80056b2:	220a      	movs	r2, #10
 80056b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80056b6:	7806      	ldrb	r6, [r0, #0]
 80056b8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80056bc:	b2d9      	uxtb	r1, r3
 80056be:	2909      	cmp	r1, #9
 80056c0:	d92a      	bls.n	8005718 <_strtod_l+0x1b8>
 80056c2:	9905      	ldr	r1, [sp, #20]
 80056c4:	462a      	mov	r2, r5
 80056c6:	f002 ff2b 	bl	8008520 <strncmp>
 80056ca:	b398      	cbz	r0, 8005734 <_strtod_l+0x1d4>
 80056cc:	2000      	movs	r0, #0
 80056ce:	4632      	mov	r2, r6
 80056d0:	463d      	mov	r5, r7
 80056d2:	9005      	str	r0, [sp, #20]
 80056d4:	4603      	mov	r3, r0
 80056d6:	2a65      	cmp	r2, #101	; 0x65
 80056d8:	d001      	beq.n	80056de <_strtod_l+0x17e>
 80056da:	2a45      	cmp	r2, #69	; 0x45
 80056dc:	d118      	bne.n	8005710 <_strtod_l+0x1b0>
 80056de:	b91d      	cbnz	r5, 80056e8 <_strtod_l+0x188>
 80056e0:	9a04      	ldr	r2, [sp, #16]
 80056e2:	4302      	orrs	r2, r0
 80056e4:	d09e      	beq.n	8005624 <_strtod_l+0xc4>
 80056e6:	2500      	movs	r5, #0
 80056e8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80056ec:	f108 0201 	add.w	r2, r8, #1
 80056f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80056f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80056f6:	2a2b      	cmp	r2, #43	; 0x2b
 80056f8:	d075      	beq.n	80057e6 <_strtod_l+0x286>
 80056fa:	2a2d      	cmp	r2, #45	; 0x2d
 80056fc:	d07b      	beq.n	80057f6 <_strtod_l+0x296>
 80056fe:	f04f 0c00 	mov.w	ip, #0
 8005702:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005706:	2909      	cmp	r1, #9
 8005708:	f240 8082 	bls.w	8005810 <_strtod_l+0x2b0>
 800570c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005710:	2600      	movs	r6, #0
 8005712:	e09d      	b.n	8005850 <_strtod_l+0x2f0>
 8005714:	2300      	movs	r3, #0
 8005716:	e7c4      	b.n	80056a2 <_strtod_l+0x142>
 8005718:	2f08      	cmp	r7, #8
 800571a:	bfd8      	it	le
 800571c:	9907      	ldrle	r1, [sp, #28]
 800571e:	f100 0001 	add.w	r0, r0, #1
 8005722:	bfda      	itte	le
 8005724:	fb02 3301 	mlale	r3, r2, r1, r3
 8005728:	9307      	strle	r3, [sp, #28]
 800572a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800572e:	3701      	adds	r7, #1
 8005730:	9017      	str	r0, [sp, #92]	; 0x5c
 8005732:	e7bf      	b.n	80056b4 <_strtod_l+0x154>
 8005734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005736:	195a      	adds	r2, r3, r5
 8005738:	9217      	str	r2, [sp, #92]	; 0x5c
 800573a:	5d5a      	ldrb	r2, [r3, r5]
 800573c:	2f00      	cmp	r7, #0
 800573e:	d037      	beq.n	80057b0 <_strtod_l+0x250>
 8005740:	9005      	str	r0, [sp, #20]
 8005742:	463d      	mov	r5, r7
 8005744:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005748:	2b09      	cmp	r3, #9
 800574a:	d912      	bls.n	8005772 <_strtod_l+0x212>
 800574c:	2301      	movs	r3, #1
 800574e:	e7c2      	b.n	80056d6 <_strtod_l+0x176>
 8005750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	9217      	str	r2, [sp, #92]	; 0x5c
 8005756:	785a      	ldrb	r2, [r3, #1]
 8005758:	3001      	adds	r0, #1
 800575a:	2a30      	cmp	r2, #48	; 0x30
 800575c:	d0f8      	beq.n	8005750 <_strtod_l+0x1f0>
 800575e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005762:	2b08      	cmp	r3, #8
 8005764:	f200 84d9 	bhi.w	800611a <_strtod_l+0xbba>
 8005768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800576a:	9005      	str	r0, [sp, #20]
 800576c:	2000      	movs	r0, #0
 800576e:	9308      	str	r3, [sp, #32]
 8005770:	4605      	mov	r5, r0
 8005772:	3a30      	subs	r2, #48	; 0x30
 8005774:	f100 0301 	add.w	r3, r0, #1
 8005778:	d014      	beq.n	80057a4 <_strtod_l+0x244>
 800577a:	9905      	ldr	r1, [sp, #20]
 800577c:	4419      	add	r1, r3
 800577e:	9105      	str	r1, [sp, #20]
 8005780:	462b      	mov	r3, r5
 8005782:	eb00 0e05 	add.w	lr, r0, r5
 8005786:	210a      	movs	r1, #10
 8005788:	4573      	cmp	r3, lr
 800578a:	d113      	bne.n	80057b4 <_strtod_l+0x254>
 800578c:	182b      	adds	r3, r5, r0
 800578e:	2b08      	cmp	r3, #8
 8005790:	f105 0501 	add.w	r5, r5, #1
 8005794:	4405      	add	r5, r0
 8005796:	dc1c      	bgt.n	80057d2 <_strtod_l+0x272>
 8005798:	9907      	ldr	r1, [sp, #28]
 800579a:	230a      	movs	r3, #10
 800579c:	fb03 2301 	mla	r3, r3, r1, r2
 80057a0:	9307      	str	r3, [sp, #28]
 80057a2:	2300      	movs	r3, #0
 80057a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057a6:	1c51      	adds	r1, r2, #1
 80057a8:	9117      	str	r1, [sp, #92]	; 0x5c
 80057aa:	7852      	ldrb	r2, [r2, #1]
 80057ac:	4618      	mov	r0, r3
 80057ae:	e7c9      	b.n	8005744 <_strtod_l+0x1e4>
 80057b0:	4638      	mov	r0, r7
 80057b2:	e7d2      	b.n	800575a <_strtod_l+0x1fa>
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	dc04      	bgt.n	80057c2 <_strtod_l+0x262>
 80057b8:	9e07      	ldr	r6, [sp, #28]
 80057ba:	434e      	muls	r6, r1
 80057bc:	9607      	str	r6, [sp, #28]
 80057be:	3301      	adds	r3, #1
 80057c0:	e7e2      	b.n	8005788 <_strtod_l+0x228>
 80057c2:	f103 0c01 	add.w	ip, r3, #1
 80057c6:	f1bc 0f10 	cmp.w	ip, #16
 80057ca:	bfd8      	it	le
 80057cc:	fb01 f909 	mulle.w	r9, r1, r9
 80057d0:	e7f5      	b.n	80057be <_strtod_l+0x25e>
 80057d2:	2d10      	cmp	r5, #16
 80057d4:	bfdc      	itt	le
 80057d6:	230a      	movle	r3, #10
 80057d8:	fb03 2909 	mlale	r9, r3, r9, r2
 80057dc:	e7e1      	b.n	80057a2 <_strtod_l+0x242>
 80057de:	2300      	movs	r3, #0
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	2301      	movs	r3, #1
 80057e4:	e77c      	b.n	80056e0 <_strtod_l+0x180>
 80057e6:	f04f 0c00 	mov.w	ip, #0
 80057ea:	f108 0202 	add.w	r2, r8, #2
 80057ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80057f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80057f4:	e785      	b.n	8005702 <_strtod_l+0x1a2>
 80057f6:	f04f 0c01 	mov.w	ip, #1
 80057fa:	e7f6      	b.n	80057ea <_strtod_l+0x28a>
 80057fc:	0800a6f0 	.word	0x0800a6f0
 8005800:	0800a4a4 	.word	0x0800a4a4
 8005804:	7ff00000 	.word	0x7ff00000
 8005808:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800580a:	1c51      	adds	r1, r2, #1
 800580c:	9117      	str	r1, [sp, #92]	; 0x5c
 800580e:	7852      	ldrb	r2, [r2, #1]
 8005810:	2a30      	cmp	r2, #48	; 0x30
 8005812:	d0f9      	beq.n	8005808 <_strtod_l+0x2a8>
 8005814:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005818:	2908      	cmp	r1, #8
 800581a:	f63f af79 	bhi.w	8005710 <_strtod_l+0x1b0>
 800581e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005822:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005824:	9206      	str	r2, [sp, #24]
 8005826:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005828:	1c51      	adds	r1, r2, #1
 800582a:	9117      	str	r1, [sp, #92]	; 0x5c
 800582c:	7852      	ldrb	r2, [r2, #1]
 800582e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005832:	2e09      	cmp	r6, #9
 8005834:	d937      	bls.n	80058a6 <_strtod_l+0x346>
 8005836:	9e06      	ldr	r6, [sp, #24]
 8005838:	1b89      	subs	r1, r1, r6
 800583a:	2908      	cmp	r1, #8
 800583c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005840:	dc02      	bgt.n	8005848 <_strtod_l+0x2e8>
 8005842:	4576      	cmp	r6, lr
 8005844:	bfa8      	it	ge
 8005846:	4676      	movge	r6, lr
 8005848:	f1bc 0f00 	cmp.w	ip, #0
 800584c:	d000      	beq.n	8005850 <_strtod_l+0x2f0>
 800584e:	4276      	negs	r6, r6
 8005850:	2d00      	cmp	r5, #0
 8005852:	d14d      	bne.n	80058f0 <_strtod_l+0x390>
 8005854:	9904      	ldr	r1, [sp, #16]
 8005856:	4301      	orrs	r1, r0
 8005858:	f47f aec6 	bne.w	80055e8 <_strtod_l+0x88>
 800585c:	2b00      	cmp	r3, #0
 800585e:	f47f aee1 	bne.w	8005624 <_strtod_l+0xc4>
 8005862:	2a69      	cmp	r2, #105	; 0x69
 8005864:	d027      	beq.n	80058b6 <_strtod_l+0x356>
 8005866:	dc24      	bgt.n	80058b2 <_strtod_l+0x352>
 8005868:	2a49      	cmp	r2, #73	; 0x49
 800586a:	d024      	beq.n	80058b6 <_strtod_l+0x356>
 800586c:	2a4e      	cmp	r2, #78	; 0x4e
 800586e:	f47f aed9 	bne.w	8005624 <_strtod_l+0xc4>
 8005872:	499f      	ldr	r1, [pc, #636]	; (8005af0 <_strtod_l+0x590>)
 8005874:	a817      	add	r0, sp, #92	; 0x5c
 8005876:	f001 fe49 	bl	800750c <__match>
 800587a:	2800      	cmp	r0, #0
 800587c:	f43f aed2 	beq.w	8005624 <_strtod_l+0xc4>
 8005880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b28      	cmp	r3, #40	; 0x28
 8005886:	d12d      	bne.n	80058e4 <_strtod_l+0x384>
 8005888:	499a      	ldr	r1, [pc, #616]	; (8005af4 <_strtod_l+0x594>)
 800588a:	aa1a      	add	r2, sp, #104	; 0x68
 800588c:	a817      	add	r0, sp, #92	; 0x5c
 800588e:	f001 fe51 	bl	8007534 <__hexnan>
 8005892:	2805      	cmp	r0, #5
 8005894:	d126      	bne.n	80058e4 <_strtod_l+0x384>
 8005896:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005898:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800589c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80058a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80058a4:	e6a0      	b.n	80055e8 <_strtod_l+0x88>
 80058a6:	210a      	movs	r1, #10
 80058a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80058ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80058b0:	e7b9      	b.n	8005826 <_strtod_l+0x2c6>
 80058b2:	2a6e      	cmp	r2, #110	; 0x6e
 80058b4:	e7db      	b.n	800586e <_strtod_l+0x30e>
 80058b6:	4990      	ldr	r1, [pc, #576]	; (8005af8 <_strtod_l+0x598>)
 80058b8:	a817      	add	r0, sp, #92	; 0x5c
 80058ba:	f001 fe27 	bl	800750c <__match>
 80058be:	2800      	cmp	r0, #0
 80058c0:	f43f aeb0 	beq.w	8005624 <_strtod_l+0xc4>
 80058c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058c6:	498d      	ldr	r1, [pc, #564]	; (8005afc <_strtod_l+0x59c>)
 80058c8:	3b01      	subs	r3, #1
 80058ca:	a817      	add	r0, sp, #92	; 0x5c
 80058cc:	9317      	str	r3, [sp, #92]	; 0x5c
 80058ce:	f001 fe1d 	bl	800750c <__match>
 80058d2:	b910      	cbnz	r0, 80058da <_strtod_l+0x37a>
 80058d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058d6:	3301      	adds	r3, #1
 80058d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80058da:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005b0c <_strtod_l+0x5ac>
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	e681      	b.n	80055e8 <_strtod_l+0x88>
 80058e4:	4886      	ldr	r0, [pc, #536]	; (8005b00 <_strtod_l+0x5a0>)
 80058e6:	f002 fe03 	bl	80084f0 <nan>
 80058ea:	ec5b ab10 	vmov	sl, fp, d0
 80058ee:	e67b      	b.n	80055e8 <_strtod_l+0x88>
 80058f0:	9b05      	ldr	r3, [sp, #20]
 80058f2:	9807      	ldr	r0, [sp, #28]
 80058f4:	1af3      	subs	r3, r6, r3
 80058f6:	2f00      	cmp	r7, #0
 80058f8:	bf08      	it	eq
 80058fa:	462f      	moveq	r7, r5
 80058fc:	2d10      	cmp	r5, #16
 80058fe:	9306      	str	r3, [sp, #24]
 8005900:	46a8      	mov	r8, r5
 8005902:	bfa8      	it	ge
 8005904:	f04f 0810 	movge.w	r8, #16
 8005908:	f7fa fe1c 	bl	8000544 <__aeabi_ui2d>
 800590c:	2d09      	cmp	r5, #9
 800590e:	4682      	mov	sl, r0
 8005910:	468b      	mov	fp, r1
 8005912:	dd13      	ble.n	800593c <_strtod_l+0x3dc>
 8005914:	4b7b      	ldr	r3, [pc, #492]	; (8005b04 <_strtod_l+0x5a4>)
 8005916:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800591a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800591e:	f7fa fe8b 	bl	8000638 <__aeabi_dmul>
 8005922:	4682      	mov	sl, r0
 8005924:	4648      	mov	r0, r9
 8005926:	468b      	mov	fp, r1
 8005928:	f7fa fe0c 	bl	8000544 <__aeabi_ui2d>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	f7fa fcca 	bl	80002cc <__adddf3>
 8005938:	4682      	mov	sl, r0
 800593a:	468b      	mov	fp, r1
 800593c:	2d0f      	cmp	r5, #15
 800593e:	dc38      	bgt.n	80059b2 <_strtod_l+0x452>
 8005940:	9b06      	ldr	r3, [sp, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f43f ae50 	beq.w	80055e8 <_strtod_l+0x88>
 8005948:	dd24      	ble.n	8005994 <_strtod_l+0x434>
 800594a:	2b16      	cmp	r3, #22
 800594c:	dc0b      	bgt.n	8005966 <_strtod_l+0x406>
 800594e:	496d      	ldr	r1, [pc, #436]	; (8005b04 <_strtod_l+0x5a4>)
 8005950:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005958:	4652      	mov	r2, sl
 800595a:	465b      	mov	r3, fp
 800595c:	f7fa fe6c 	bl	8000638 <__aeabi_dmul>
 8005960:	4682      	mov	sl, r0
 8005962:	468b      	mov	fp, r1
 8005964:	e640      	b.n	80055e8 <_strtod_l+0x88>
 8005966:	9a06      	ldr	r2, [sp, #24]
 8005968:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800596c:	4293      	cmp	r3, r2
 800596e:	db20      	blt.n	80059b2 <_strtod_l+0x452>
 8005970:	4c64      	ldr	r4, [pc, #400]	; (8005b04 <_strtod_l+0x5a4>)
 8005972:	f1c5 050f 	rsb	r5, r5, #15
 8005976:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800597a:	4652      	mov	r2, sl
 800597c:	465b      	mov	r3, fp
 800597e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005982:	f7fa fe59 	bl	8000638 <__aeabi_dmul>
 8005986:	9b06      	ldr	r3, [sp, #24]
 8005988:	1b5d      	subs	r5, r3, r5
 800598a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800598e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005992:	e7e3      	b.n	800595c <_strtod_l+0x3fc>
 8005994:	9b06      	ldr	r3, [sp, #24]
 8005996:	3316      	adds	r3, #22
 8005998:	db0b      	blt.n	80059b2 <_strtod_l+0x452>
 800599a:	9b05      	ldr	r3, [sp, #20]
 800599c:	1b9e      	subs	r6, r3, r6
 800599e:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <_strtod_l+0x5a4>)
 80059a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80059a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059a8:	4650      	mov	r0, sl
 80059aa:	4659      	mov	r1, fp
 80059ac:	f7fa ff6e 	bl	800088c <__aeabi_ddiv>
 80059b0:	e7d6      	b.n	8005960 <_strtod_l+0x400>
 80059b2:	9b06      	ldr	r3, [sp, #24]
 80059b4:	eba5 0808 	sub.w	r8, r5, r8
 80059b8:	4498      	add	r8, r3
 80059ba:	f1b8 0f00 	cmp.w	r8, #0
 80059be:	dd74      	ble.n	8005aaa <_strtod_l+0x54a>
 80059c0:	f018 030f 	ands.w	r3, r8, #15
 80059c4:	d00a      	beq.n	80059dc <_strtod_l+0x47c>
 80059c6:	494f      	ldr	r1, [pc, #316]	; (8005b04 <_strtod_l+0x5a4>)
 80059c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059cc:	4652      	mov	r2, sl
 80059ce:	465b      	mov	r3, fp
 80059d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059d4:	f7fa fe30 	bl	8000638 <__aeabi_dmul>
 80059d8:	4682      	mov	sl, r0
 80059da:	468b      	mov	fp, r1
 80059dc:	f038 080f 	bics.w	r8, r8, #15
 80059e0:	d04f      	beq.n	8005a82 <_strtod_l+0x522>
 80059e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80059e6:	dd22      	ble.n	8005a2e <_strtod_l+0x4ce>
 80059e8:	2500      	movs	r5, #0
 80059ea:	462e      	mov	r6, r5
 80059ec:	9507      	str	r5, [sp, #28]
 80059ee:	9505      	str	r5, [sp, #20]
 80059f0:	2322      	movs	r3, #34	; 0x22
 80059f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005b0c <_strtod_l+0x5ac>
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	f04f 0a00 	mov.w	sl, #0
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f43f adf2 	beq.w	80055e8 <_strtod_l+0x88>
 8005a04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a06:	4620      	mov	r0, r4
 8005a08:	f001 fe9c 	bl	8007744 <_Bfree>
 8005a0c:	9905      	ldr	r1, [sp, #20]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f001 fe98 	bl	8007744 <_Bfree>
 8005a14:	4631      	mov	r1, r6
 8005a16:	4620      	mov	r0, r4
 8005a18:	f001 fe94 	bl	8007744 <_Bfree>
 8005a1c:	9907      	ldr	r1, [sp, #28]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f001 fe90 	bl	8007744 <_Bfree>
 8005a24:	4629      	mov	r1, r5
 8005a26:	4620      	mov	r0, r4
 8005a28:	f001 fe8c 	bl	8007744 <_Bfree>
 8005a2c:	e5dc      	b.n	80055e8 <_strtod_l+0x88>
 8005a2e:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <_strtod_l+0x5a8>)
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a38:	4650      	mov	r0, sl
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	4699      	mov	r9, r3
 8005a3e:	f1b8 0f01 	cmp.w	r8, #1
 8005a42:	dc21      	bgt.n	8005a88 <_strtod_l+0x528>
 8005a44:	b10b      	cbz	r3, 8005a4a <_strtod_l+0x4ea>
 8005a46:	4682      	mov	sl, r0
 8005a48:	468b      	mov	fp, r1
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	; (8005b08 <_strtod_l+0x5a8>)
 8005a4c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005a50:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005a54:	4652      	mov	r2, sl
 8005a56:	465b      	mov	r3, fp
 8005a58:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a5c:	f7fa fdec 	bl	8000638 <__aeabi_dmul>
 8005a60:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <_strtod_l+0x5ac>)
 8005a62:	460a      	mov	r2, r1
 8005a64:	400b      	ands	r3, r1
 8005a66:	492a      	ldr	r1, [pc, #168]	; (8005b10 <_strtod_l+0x5b0>)
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	4682      	mov	sl, r0
 8005a6c:	d8bc      	bhi.n	80059e8 <_strtod_l+0x488>
 8005a6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005a72:	428b      	cmp	r3, r1
 8005a74:	bf86      	itte	hi
 8005a76:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005b14 <_strtod_l+0x5b4>
 8005a7a:	f04f 3aff 	movhi.w	sl, #4294967295
 8005a7e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005a82:	2300      	movs	r3, #0
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	e084      	b.n	8005b92 <_strtod_l+0x632>
 8005a88:	f018 0f01 	tst.w	r8, #1
 8005a8c:	d005      	beq.n	8005a9a <_strtod_l+0x53a>
 8005a8e:	9b04      	ldr	r3, [sp, #16]
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fdd0 	bl	8000638 <__aeabi_dmul>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	f109 0901 	add.w	r9, r9, #1
 8005aa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005aa6:	9204      	str	r2, [sp, #16]
 8005aa8:	e7c9      	b.n	8005a3e <_strtod_l+0x4de>
 8005aaa:	d0ea      	beq.n	8005a82 <_strtod_l+0x522>
 8005aac:	f1c8 0800 	rsb	r8, r8, #0
 8005ab0:	f018 020f 	ands.w	r2, r8, #15
 8005ab4:	d00a      	beq.n	8005acc <_strtod_l+0x56c>
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <_strtod_l+0x5a4>)
 8005ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005abc:	4650      	mov	r0, sl
 8005abe:	4659      	mov	r1, fp
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fee2 	bl	800088c <__aeabi_ddiv>
 8005ac8:	4682      	mov	sl, r0
 8005aca:	468b      	mov	fp, r1
 8005acc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ad0:	d0d7      	beq.n	8005a82 <_strtod_l+0x522>
 8005ad2:	f1b8 0f1f 	cmp.w	r8, #31
 8005ad6:	dd1f      	ble.n	8005b18 <_strtod_l+0x5b8>
 8005ad8:	2500      	movs	r5, #0
 8005ada:	462e      	mov	r6, r5
 8005adc:	9507      	str	r5, [sp, #28]
 8005ade:	9505      	str	r5, [sp, #20]
 8005ae0:	2322      	movs	r3, #34	; 0x22
 8005ae2:	f04f 0a00 	mov.w	sl, #0
 8005ae6:	f04f 0b00 	mov.w	fp, #0
 8005aea:	6023      	str	r3, [r4, #0]
 8005aec:	e786      	b.n	80059fc <_strtod_l+0x49c>
 8005aee:	bf00      	nop
 8005af0:	0800a475 	.word	0x0800a475
 8005af4:	0800a4b8 	.word	0x0800a4b8
 8005af8:	0800a46d 	.word	0x0800a46d
 8005afc:	0800a5fc 	.word	0x0800a5fc
 8005b00:	0800a8a8 	.word	0x0800a8a8
 8005b04:	0800a788 	.word	0x0800a788
 8005b08:	0800a760 	.word	0x0800a760
 8005b0c:	7ff00000 	.word	0x7ff00000
 8005b10:	7ca00000 	.word	0x7ca00000
 8005b14:	7fefffff 	.word	0x7fefffff
 8005b18:	f018 0310 	ands.w	r3, r8, #16
 8005b1c:	bf18      	it	ne
 8005b1e:	236a      	movne	r3, #106	; 0x6a
 8005b20:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005ed0 <_strtod_l+0x970>
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	4650      	mov	r0, sl
 8005b28:	4659      	mov	r1, fp
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f018 0f01 	tst.w	r8, #1
 8005b30:	d004      	beq.n	8005b3c <_strtod_l+0x5dc>
 8005b32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b36:	f7fa fd7f 	bl	8000638 <__aeabi_dmul>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b40:	f109 0908 	add.w	r9, r9, #8
 8005b44:	d1f2      	bne.n	8005b2c <_strtod_l+0x5cc>
 8005b46:	b10b      	cbz	r3, 8005b4c <_strtod_l+0x5ec>
 8005b48:	4682      	mov	sl, r0
 8005b4a:	468b      	mov	fp, r1
 8005b4c:	9b04      	ldr	r3, [sp, #16]
 8005b4e:	b1c3      	cbz	r3, 8005b82 <_strtod_l+0x622>
 8005b50:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005b54:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	dd11      	ble.n	8005b82 <_strtod_l+0x622>
 8005b5e:	2b1f      	cmp	r3, #31
 8005b60:	f340 8124 	ble.w	8005dac <_strtod_l+0x84c>
 8005b64:	2b34      	cmp	r3, #52	; 0x34
 8005b66:	bfde      	ittt	le
 8005b68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005b6c:	f04f 33ff 	movle.w	r3, #4294967295
 8005b70:	fa03 f202 	lslle.w	r2, r3, r2
 8005b74:	f04f 0a00 	mov.w	sl, #0
 8005b78:	bfcc      	ite	gt
 8005b7a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005b7e:	ea02 0b01 	andle.w	fp, r2, r1
 8005b82:	2200      	movs	r2, #0
 8005b84:	2300      	movs	r3, #0
 8005b86:	4650      	mov	r0, sl
 8005b88:	4659      	mov	r1, fp
 8005b8a:	f7fa ffbd 	bl	8000b08 <__aeabi_dcmpeq>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d1a2      	bne.n	8005ad8 <_strtod_l+0x578>
 8005b92:	9b07      	ldr	r3, [sp, #28]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	9908      	ldr	r1, [sp, #32]
 8005b98:	462b      	mov	r3, r5
 8005b9a:	463a      	mov	r2, r7
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f001 fe39 	bl	8007814 <__s2b>
 8005ba2:	9007      	str	r0, [sp, #28]
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f43f af1f 	beq.w	80059e8 <_strtod_l+0x488>
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	1b9e      	subs	r6, r3, r6
 8005bae:	9b06      	ldr	r3, [sp, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bfb4      	ite	lt
 8005bb4:	4633      	movlt	r3, r6
 8005bb6:	2300      	movge	r3, #0
 8005bb8:	930c      	str	r3, [sp, #48]	; 0x30
 8005bba:	9b06      	ldr	r3, [sp, #24]
 8005bbc:	2500      	movs	r5, #0
 8005bbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8005bc4:	462e      	mov	r6, r5
 8005bc6:	9b07      	ldr	r3, [sp, #28]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	6859      	ldr	r1, [r3, #4]
 8005bcc:	f001 fd7a 	bl	80076c4 <_Balloc>
 8005bd0:	9005      	str	r0, [sp, #20]
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f43f af0c 	beq.w	80059f0 <_strtod_l+0x490>
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	3202      	adds	r2, #2
 8005bde:	f103 010c 	add.w	r1, r3, #12
 8005be2:	0092      	lsls	r2, r2, #2
 8005be4:	300c      	adds	r0, #12
 8005be6:	f001 fd5f 	bl	80076a8 <memcpy>
 8005bea:	ec4b ab10 	vmov	d0, sl, fp
 8005bee:	aa1a      	add	r2, sp, #104	; 0x68
 8005bf0:	a919      	add	r1, sp, #100	; 0x64
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f002 f954 	bl	8007ea0 <__d2b>
 8005bf8:	ec4b ab18 	vmov	d8, sl, fp
 8005bfc:	9018      	str	r0, [sp, #96]	; 0x60
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f aef6 	beq.w	80059f0 <_strtod_l+0x490>
 8005c04:	2101      	movs	r1, #1
 8005c06:	4620      	mov	r0, r4
 8005c08:	f001 fe9e 	bl	8007948 <__i2b>
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f43f aeee 	beq.w	80059f0 <_strtod_l+0x490>
 8005c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c16:	9904      	ldr	r1, [sp, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bfab      	itete	ge
 8005c1c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005c1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005c20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005c22:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005c26:	bfac      	ite	ge
 8005c28:	eb03 0902 	addge.w	r9, r3, r2
 8005c2c:	1ad7      	sublt	r7, r2, r3
 8005c2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c30:	eba3 0801 	sub.w	r8, r3, r1
 8005c34:	4490      	add	r8, r2
 8005c36:	4ba1      	ldr	r3, [pc, #644]	; (8005ebc <_strtod_l+0x95c>)
 8005c38:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c3c:	4598      	cmp	r8, r3
 8005c3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c42:	f280 80c7 	bge.w	8005dd4 <_strtod_l+0x874>
 8005c46:	eba3 0308 	sub.w	r3, r3, r8
 8005c4a:	2b1f      	cmp	r3, #31
 8005c4c:	eba2 0203 	sub.w	r2, r2, r3
 8005c50:	f04f 0101 	mov.w	r1, #1
 8005c54:	f300 80b1 	bgt.w	8005dba <_strtod_l+0x85a>
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9308      	str	r3, [sp, #32]
 8005c62:	eb09 0802 	add.w	r8, r9, r2
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	45c1      	cmp	r9, r8
 8005c6a:	4417      	add	r7, r2
 8005c6c:	441f      	add	r7, r3
 8005c6e:	464b      	mov	r3, r9
 8005c70:	bfa8      	it	ge
 8005c72:	4643      	movge	r3, r8
 8005c74:	42bb      	cmp	r3, r7
 8005c76:	bfa8      	it	ge
 8005c78:	463b      	movge	r3, r7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bfc2      	ittt	gt
 8005c7e:	eba8 0803 	subgt.w	r8, r8, r3
 8005c82:	1aff      	subgt	r7, r7, r3
 8005c84:	eba9 0903 	subgt.w	r9, r9, r3
 8005c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd17      	ble.n	8005cbe <_strtod_l+0x75e>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	461a      	mov	r2, r3
 8005c92:	4620      	mov	r0, r4
 8005c94:	f001 ff18 	bl	8007ac8 <__pow5mult>
 8005c98:	4606      	mov	r6, r0
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f43f aea8 	beq.w	80059f0 <_strtod_l+0x490>
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f001 fe65 	bl	8007974 <__multiply>
 8005caa:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f43f ae9f 	beq.w	80059f0 <_strtod_l+0x490>
 8005cb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f001 fd45 	bl	8007744 <_Bfree>
 8005cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cbc:	9318      	str	r3, [sp, #96]	; 0x60
 8005cbe:	f1b8 0f00 	cmp.w	r8, #0
 8005cc2:	f300 808c 	bgt.w	8005dde <_strtod_l+0x87e>
 8005cc6:	9b06      	ldr	r3, [sp, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dd08      	ble.n	8005cde <_strtod_l+0x77e>
 8005ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cce:	9905      	ldr	r1, [sp, #20]
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f001 fef9 	bl	8007ac8 <__pow5mult>
 8005cd6:	9005      	str	r0, [sp, #20]
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f43f ae89 	beq.w	80059f0 <_strtod_l+0x490>
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	dd08      	ble.n	8005cf4 <_strtod_l+0x794>
 8005ce2:	9905      	ldr	r1, [sp, #20]
 8005ce4:	463a      	mov	r2, r7
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f001 ff48 	bl	8007b7c <__lshift>
 8005cec:	9005      	str	r0, [sp, #20]
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f ae7e 	beq.w	80059f0 <_strtod_l+0x490>
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	dd08      	ble.n	8005d0c <_strtod_l+0x7ac>
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	464a      	mov	r2, r9
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f001 ff3c 	bl	8007b7c <__lshift>
 8005d04:	4606      	mov	r6, r0
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f43f ae72 	beq.w	80059f0 <_strtod_l+0x490>
 8005d0c:	9a05      	ldr	r2, [sp, #20]
 8005d0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d10:	4620      	mov	r0, r4
 8005d12:	f001 ffbf 	bl	8007c94 <__mdiff>
 8005d16:	4605      	mov	r5, r0
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f43f ae69 	beq.w	80059f0 <_strtod_l+0x490>
 8005d1e:	68c3      	ldr	r3, [r0, #12]
 8005d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d22:	2300      	movs	r3, #0
 8005d24:	60c3      	str	r3, [r0, #12]
 8005d26:	4631      	mov	r1, r6
 8005d28:	f001 ff98 	bl	8007c5c <__mcmp>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	da60      	bge.n	8005df2 <_strtod_l+0x892>
 8005d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d32:	ea53 030a 	orrs.w	r3, r3, sl
 8005d36:	f040 8082 	bne.w	8005e3e <_strtod_l+0x8de>
 8005d3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d17d      	bne.n	8005e3e <_strtod_l+0x8de>
 8005d42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d46:	0d1b      	lsrs	r3, r3, #20
 8005d48:	051b      	lsls	r3, r3, #20
 8005d4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d4e:	d976      	bls.n	8005e3e <_strtod_l+0x8de>
 8005d50:	696b      	ldr	r3, [r5, #20]
 8005d52:	b913      	cbnz	r3, 8005d5a <_strtod_l+0x7fa>
 8005d54:	692b      	ldr	r3, [r5, #16]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	dd71      	ble.n	8005e3e <_strtod_l+0x8de>
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f001 ff0c 	bl	8007b7c <__lshift>
 8005d64:	4631      	mov	r1, r6
 8005d66:	4605      	mov	r5, r0
 8005d68:	f001 ff78 	bl	8007c5c <__mcmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	dd66      	ble.n	8005e3e <_strtod_l+0x8de>
 8005d70:	9904      	ldr	r1, [sp, #16]
 8005d72:	4a53      	ldr	r2, [pc, #332]	; (8005ec0 <_strtod_l+0x960>)
 8005d74:	465b      	mov	r3, fp
 8005d76:	2900      	cmp	r1, #0
 8005d78:	f000 8081 	beq.w	8005e7e <_strtod_l+0x91e>
 8005d7c:	ea02 010b 	and.w	r1, r2, fp
 8005d80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d84:	dc7b      	bgt.n	8005e7e <_strtod_l+0x91e>
 8005d86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d8a:	f77f aea9 	ble.w	8005ae0 <_strtod_l+0x580>
 8005d8e:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <_strtod_l+0x964>)
 8005d90:	4650      	mov	r0, sl
 8005d92:	4659      	mov	r1, fp
 8005d94:	2200      	movs	r2, #0
 8005d96:	f7fa fc4f 	bl	8000638 <__aeabi_dmul>
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4303      	orrs	r3, r0
 8005d9e:	bf08      	it	eq
 8005da0:	2322      	moveq	r3, #34	; 0x22
 8005da2:	4682      	mov	sl, r0
 8005da4:	468b      	mov	fp, r1
 8005da6:	bf08      	it	eq
 8005da8:	6023      	streq	r3, [r4, #0]
 8005daa:	e62b      	b.n	8005a04 <_strtod_l+0x4a4>
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	ea03 0a0a 	and.w	sl, r3, sl
 8005db8:	e6e3      	b.n	8005b82 <_strtod_l+0x622>
 8005dba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005dbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005dc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005dc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005dca:	fa01 f308 	lsl.w	r3, r1, r8
 8005dce:	9308      	str	r3, [sp, #32]
 8005dd0:	910d      	str	r1, [sp, #52]	; 0x34
 8005dd2:	e746      	b.n	8005c62 <_strtod_l+0x702>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9308      	str	r3, [sp, #32]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	930d      	str	r3, [sp, #52]	; 0x34
 8005ddc:	e741      	b.n	8005c62 <_strtod_l+0x702>
 8005dde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005de0:	4642      	mov	r2, r8
 8005de2:	4620      	mov	r0, r4
 8005de4:	f001 feca 	bl	8007b7c <__lshift>
 8005de8:	9018      	str	r0, [sp, #96]	; 0x60
 8005dea:	2800      	cmp	r0, #0
 8005dec:	f47f af6b 	bne.w	8005cc6 <_strtod_l+0x766>
 8005df0:	e5fe      	b.n	80059f0 <_strtod_l+0x490>
 8005df2:	465f      	mov	r7, fp
 8005df4:	d16e      	bne.n	8005ed4 <_strtod_l+0x974>
 8005df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005df8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dfc:	b342      	cbz	r2, 8005e50 <_strtod_l+0x8f0>
 8005dfe:	4a32      	ldr	r2, [pc, #200]	; (8005ec8 <_strtod_l+0x968>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d128      	bne.n	8005e56 <_strtod_l+0x8f6>
 8005e04:	9b04      	ldr	r3, [sp, #16]
 8005e06:	4651      	mov	r1, sl
 8005e08:	b1eb      	cbz	r3, 8005e46 <_strtod_l+0x8e6>
 8005e0a:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <_strtod_l+0x960>)
 8005e0c:	403b      	ands	r3, r7
 8005e0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005e12:	f04f 32ff 	mov.w	r2, #4294967295
 8005e16:	d819      	bhi.n	8005e4c <_strtod_l+0x8ec>
 8005e18:	0d1b      	lsrs	r3, r3, #20
 8005e1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d117      	bne.n	8005e56 <_strtod_l+0x8f6>
 8005e26:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <_strtod_l+0x96c>)
 8005e28:	429f      	cmp	r7, r3
 8005e2a:	d102      	bne.n	8005e32 <_strtod_l+0x8d2>
 8005e2c:	3101      	adds	r1, #1
 8005e2e:	f43f addf 	beq.w	80059f0 <_strtod_l+0x490>
 8005e32:	4b23      	ldr	r3, [pc, #140]	; (8005ec0 <_strtod_l+0x960>)
 8005e34:	403b      	ands	r3, r7
 8005e36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e3a:	f04f 0a00 	mov.w	sl, #0
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1a4      	bne.n	8005d8e <_strtod_l+0x82e>
 8005e44:	e5de      	b.n	8005a04 <_strtod_l+0x4a4>
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4a:	e7ea      	b.n	8005e22 <_strtod_l+0x8c2>
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	e7e8      	b.n	8005e22 <_strtod_l+0x8c2>
 8005e50:	ea53 030a 	orrs.w	r3, r3, sl
 8005e54:	d08c      	beq.n	8005d70 <_strtod_l+0x810>
 8005e56:	9b08      	ldr	r3, [sp, #32]
 8005e58:	b1db      	cbz	r3, 8005e92 <_strtod_l+0x932>
 8005e5a:	423b      	tst	r3, r7
 8005e5c:	d0ef      	beq.n	8005e3e <_strtod_l+0x8de>
 8005e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e60:	9a04      	ldr	r2, [sp, #16]
 8005e62:	4650      	mov	r0, sl
 8005e64:	4659      	mov	r1, fp
 8005e66:	b1c3      	cbz	r3, 8005e9a <_strtod_l+0x93a>
 8005e68:	f7ff fb5e 	bl	8005528 <sulp>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	ec51 0b18 	vmov	r0, r1, d8
 8005e74:	f7fa fa2a 	bl	80002cc <__adddf3>
 8005e78:	4682      	mov	sl, r0
 8005e7a:	468b      	mov	fp, r1
 8005e7c:	e7df      	b.n	8005e3e <_strtod_l+0x8de>
 8005e7e:	4013      	ands	r3, r2
 8005e80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005e88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005e8c:	f04f 3aff 	mov.w	sl, #4294967295
 8005e90:	e7d5      	b.n	8005e3e <_strtod_l+0x8de>
 8005e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e94:	ea13 0f0a 	tst.w	r3, sl
 8005e98:	e7e0      	b.n	8005e5c <_strtod_l+0x8fc>
 8005e9a:	f7ff fb45 	bl	8005528 <sulp>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	ec51 0b18 	vmov	r0, r1, d8
 8005ea6:	f7fa fa0f 	bl	80002c8 <__aeabi_dsub>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2300      	movs	r3, #0
 8005eae:	4682      	mov	sl, r0
 8005eb0:	468b      	mov	fp, r1
 8005eb2:	f7fa fe29 	bl	8000b08 <__aeabi_dcmpeq>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d0c1      	beq.n	8005e3e <_strtod_l+0x8de>
 8005eba:	e611      	b.n	8005ae0 <_strtod_l+0x580>
 8005ebc:	fffffc02 	.word	0xfffffc02
 8005ec0:	7ff00000 	.word	0x7ff00000
 8005ec4:	39500000 	.word	0x39500000
 8005ec8:	000fffff 	.word	0x000fffff
 8005ecc:	7fefffff 	.word	0x7fefffff
 8005ed0:	0800a4d0 	.word	0x0800a4d0
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f002 f83e 	bl	8007f58 <__ratio>
 8005edc:	ec59 8b10 	vmov	r8, r9, d0
 8005ee0:	ee10 0a10 	vmov	r0, s0
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eea:	4649      	mov	r1, r9
 8005eec:	f7fa fe20 	bl	8000b30 <__aeabi_dcmple>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d07a      	beq.n	8005fea <_strtod_l+0xa8a>
 8005ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d04a      	beq.n	8005f90 <_strtod_l+0xa30>
 8005efa:	4b95      	ldr	r3, [pc, #596]	; (8006150 <_strtod_l+0xbf0>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f02:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006150 <_strtod_l+0xbf0>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	4b92      	ldr	r3, [pc, #584]	; (8006154 <_strtod_l+0xbf4>)
 8005f0c:	403b      	ands	r3, r7
 8005f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f12:	4b91      	ldr	r3, [pc, #580]	; (8006158 <_strtod_l+0xbf8>)
 8005f14:	429a      	cmp	r2, r3
 8005f16:	f040 80b0 	bne.w	800607a <_strtod_l+0xb1a>
 8005f1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f1e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005f22:	ec4b ab10 	vmov	d0, sl, fp
 8005f26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f2a:	f001 ff3d 	bl	8007da8 <__ulp>
 8005f2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f32:	ec53 2b10 	vmov	r2, r3, d0
 8005f36:	f7fa fb7f 	bl	8000638 <__aeabi_dmul>
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	f7fa f9c5 	bl	80002cc <__adddf3>
 8005f42:	460b      	mov	r3, r1
 8005f44:	4983      	ldr	r1, [pc, #524]	; (8006154 <_strtod_l+0xbf4>)
 8005f46:	4a85      	ldr	r2, [pc, #532]	; (800615c <_strtod_l+0xbfc>)
 8005f48:	4019      	ands	r1, r3
 8005f4a:	4291      	cmp	r1, r2
 8005f4c:	4682      	mov	sl, r0
 8005f4e:	d960      	bls.n	8006012 <_strtod_l+0xab2>
 8005f50:	ee18 3a90 	vmov	r3, s17
 8005f54:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d104      	bne.n	8005f66 <_strtod_l+0xa06>
 8005f5c:	ee18 3a10 	vmov	r3, s16
 8005f60:	3301      	adds	r3, #1
 8005f62:	f43f ad45 	beq.w	80059f0 <_strtod_l+0x490>
 8005f66:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006168 <_strtod_l+0xc08>
 8005f6a:	f04f 3aff 	mov.w	sl, #4294967295
 8005f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f70:	4620      	mov	r0, r4
 8005f72:	f001 fbe7 	bl	8007744 <_Bfree>
 8005f76:	9905      	ldr	r1, [sp, #20]
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f001 fbe3 	bl	8007744 <_Bfree>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4620      	mov	r0, r4
 8005f82:	f001 fbdf 	bl	8007744 <_Bfree>
 8005f86:	4629      	mov	r1, r5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f001 fbdb 	bl	8007744 <_Bfree>
 8005f8e:	e61a      	b.n	8005bc6 <_strtod_l+0x666>
 8005f90:	f1ba 0f00 	cmp.w	sl, #0
 8005f94:	d11b      	bne.n	8005fce <_strtod_l+0xa6e>
 8005f96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f9a:	b9f3      	cbnz	r3, 8005fda <_strtod_l+0xa7a>
 8005f9c:	4b6c      	ldr	r3, [pc, #432]	; (8006150 <_strtod_l+0xbf0>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	f7fa fdba 	bl	8000b1c <__aeabi_dcmplt>
 8005fa8:	b9d0      	cbnz	r0, 8005fe0 <_strtod_l+0xa80>
 8005faa:	4640      	mov	r0, r8
 8005fac:	4649      	mov	r1, r9
 8005fae:	4b6c      	ldr	r3, [pc, #432]	; (8006160 <_strtod_l+0xc00>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f7fa fb41 	bl	8000638 <__aeabi_dmul>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	4689      	mov	r9, r1
 8005fba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005fc2:	9315      	str	r3, [sp, #84]	; 0x54
 8005fc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005fc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005fcc:	e79d      	b.n	8005f0a <_strtod_l+0x9aa>
 8005fce:	f1ba 0f01 	cmp.w	sl, #1
 8005fd2:	d102      	bne.n	8005fda <_strtod_l+0xa7a>
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	f43f ad83 	beq.w	8005ae0 <_strtod_l+0x580>
 8005fda:	4b62      	ldr	r3, [pc, #392]	; (8006164 <_strtod_l+0xc04>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	e78e      	b.n	8005efe <_strtod_l+0x99e>
 8005fe0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006160 <_strtod_l+0xc00>
 8005fe4:	f04f 0800 	mov.w	r8, #0
 8005fe8:	e7e7      	b.n	8005fba <_strtod_l+0xa5a>
 8005fea:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <_strtod_l+0xc00>)
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f7fa fb21 	bl	8000638 <__aeabi_dmul>
 8005ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4689      	mov	r9, r1
 8005ffc:	b933      	cbnz	r3, 800600c <_strtod_l+0xaac>
 8005ffe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006002:	900e      	str	r0, [sp, #56]	; 0x38
 8006004:	930f      	str	r3, [sp, #60]	; 0x3c
 8006006:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800600a:	e7dd      	b.n	8005fc8 <_strtod_l+0xa68>
 800600c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006010:	e7f9      	b.n	8006006 <_strtod_l+0xaa6>
 8006012:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1a8      	bne.n	8005f6e <_strtod_l+0xa0e>
 800601c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006022:	0d1b      	lsrs	r3, r3, #20
 8006024:	051b      	lsls	r3, r3, #20
 8006026:	429a      	cmp	r2, r3
 8006028:	d1a1      	bne.n	8005f6e <_strtod_l+0xa0e>
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa fe63 	bl	8000cf8 <__aeabi_d2lz>
 8006032:	f7fa fad3 	bl	80005dc <__aeabi_l2d>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4640      	mov	r0, r8
 800603c:	4649      	mov	r1, r9
 800603e:	f7fa f943 	bl	80002c8 <__aeabi_dsub>
 8006042:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006048:	ea43 030a 	orr.w	r3, r3, sl
 800604c:	4313      	orrs	r3, r2
 800604e:	4680      	mov	r8, r0
 8006050:	4689      	mov	r9, r1
 8006052:	d055      	beq.n	8006100 <_strtod_l+0xba0>
 8006054:	a336      	add	r3, pc, #216	; (adr r3, 8006130 <_strtod_l+0xbd0>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa fd5f 	bl	8000b1c <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	f47f acd0 	bne.w	8005a04 <_strtod_l+0x4a4>
 8006064:	a334      	add	r3, pc, #208	; (adr r3, 8006138 <_strtod_l+0xbd8>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa fd73 	bl	8000b58 <__aeabi_dcmpgt>
 8006072:	2800      	cmp	r0, #0
 8006074:	f43f af7b 	beq.w	8005f6e <_strtod_l+0xa0e>
 8006078:	e4c4      	b.n	8005a04 <_strtod_l+0x4a4>
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	b333      	cbz	r3, 80060cc <_strtod_l+0xb6c>
 800607e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006080:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006084:	d822      	bhi.n	80060cc <_strtod_l+0xb6c>
 8006086:	a32e      	add	r3, pc, #184	; (adr r3, 8006140 <_strtod_l+0xbe0>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	4640      	mov	r0, r8
 800608e:	4649      	mov	r1, r9
 8006090:	f7fa fd4e 	bl	8000b30 <__aeabi_dcmple>
 8006094:	b1a0      	cbz	r0, 80060c0 <_strtod_l+0xb60>
 8006096:	4649      	mov	r1, r9
 8006098:	4640      	mov	r0, r8
 800609a:	f7fa fda5 	bl	8000be8 <__aeabi_d2uiz>
 800609e:	2801      	cmp	r0, #1
 80060a0:	bf38      	it	cc
 80060a2:	2001      	movcc	r0, #1
 80060a4:	f7fa fa4e 	bl	8000544 <__aeabi_ui2d>
 80060a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060aa:	4680      	mov	r8, r0
 80060ac:	4689      	mov	r9, r1
 80060ae:	bb23      	cbnz	r3, 80060fa <_strtod_l+0xb9a>
 80060b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060b4:	9010      	str	r0, [sp, #64]	; 0x40
 80060b6:	9311      	str	r3, [sp, #68]	; 0x44
 80060b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060d0:	eeb0 0a48 	vmov.f32	s0, s16
 80060d4:	eef0 0a68 	vmov.f32	s1, s17
 80060d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060dc:	f001 fe64 	bl	8007da8 <__ulp>
 80060e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060e4:	ec53 2b10 	vmov	r2, r3, d0
 80060e8:	f7fa faa6 	bl	8000638 <__aeabi_dmul>
 80060ec:	ec53 2b18 	vmov	r2, r3, d8
 80060f0:	f7fa f8ec 	bl	80002cc <__adddf3>
 80060f4:	4682      	mov	sl, r0
 80060f6:	468b      	mov	fp, r1
 80060f8:	e78d      	b.n	8006016 <_strtod_l+0xab6>
 80060fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80060fe:	e7db      	b.n	80060b8 <_strtod_l+0xb58>
 8006100:	a311      	add	r3, pc, #68	; (adr r3, 8006148 <_strtod_l+0xbe8>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fd09 	bl	8000b1c <__aeabi_dcmplt>
 800610a:	e7b2      	b.n	8006072 <_strtod_l+0xb12>
 800610c:	2300      	movs	r3, #0
 800610e:	930a      	str	r3, [sp, #40]	; 0x28
 8006110:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	f7ff ba6b 	b.w	80055f0 <_strtod_l+0x90>
 800611a:	2a65      	cmp	r2, #101	; 0x65
 800611c:	f43f ab5f 	beq.w	80057de <_strtod_l+0x27e>
 8006120:	2a45      	cmp	r2, #69	; 0x45
 8006122:	f43f ab5c 	beq.w	80057de <_strtod_l+0x27e>
 8006126:	2301      	movs	r3, #1
 8006128:	f7ff bb94 	b.w	8005854 <_strtod_l+0x2f4>
 800612c:	f3af 8000 	nop.w
 8006130:	94a03595 	.word	0x94a03595
 8006134:	3fdfffff 	.word	0x3fdfffff
 8006138:	35afe535 	.word	0x35afe535
 800613c:	3fe00000 	.word	0x3fe00000
 8006140:	ffc00000 	.word	0xffc00000
 8006144:	41dfffff 	.word	0x41dfffff
 8006148:	94a03595 	.word	0x94a03595
 800614c:	3fcfffff 	.word	0x3fcfffff
 8006150:	3ff00000 	.word	0x3ff00000
 8006154:	7ff00000 	.word	0x7ff00000
 8006158:	7fe00000 	.word	0x7fe00000
 800615c:	7c9fffff 	.word	0x7c9fffff
 8006160:	3fe00000 	.word	0x3fe00000
 8006164:	bff00000 	.word	0xbff00000
 8006168:	7fefffff 	.word	0x7fefffff

0800616c <_strtod_r>:
 800616c:	4b01      	ldr	r3, [pc, #4]	; (8006174 <_strtod_r+0x8>)
 800616e:	f7ff b9f7 	b.w	8005560 <_strtod_l>
 8006172:	bf00      	nop
 8006174:	20000078 	.word	0x20000078

08006178 <_strtol_l.constprop.0>:
 8006178:	2b01      	cmp	r3, #1
 800617a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800617e:	d001      	beq.n	8006184 <_strtol_l.constprop.0+0xc>
 8006180:	2b24      	cmp	r3, #36	; 0x24
 8006182:	d906      	bls.n	8006192 <_strtol_l.constprop.0+0x1a>
 8006184:	f7fe fafe 	bl	8004784 <__errno>
 8006188:	2316      	movs	r3, #22
 800618a:	6003      	str	r3, [r0, #0]
 800618c:	2000      	movs	r0, #0
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006278 <_strtol_l.constprop.0+0x100>
 8006196:	460d      	mov	r5, r1
 8006198:	462e      	mov	r6, r5
 800619a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800619e:	f814 700c 	ldrb.w	r7, [r4, ip]
 80061a2:	f017 0708 	ands.w	r7, r7, #8
 80061a6:	d1f7      	bne.n	8006198 <_strtol_l.constprop.0+0x20>
 80061a8:	2c2d      	cmp	r4, #45	; 0x2d
 80061aa:	d132      	bne.n	8006212 <_strtol_l.constprop.0+0x9a>
 80061ac:	782c      	ldrb	r4, [r5, #0]
 80061ae:	2701      	movs	r7, #1
 80061b0:	1cb5      	adds	r5, r6, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d05b      	beq.n	800626e <_strtol_l.constprop.0+0xf6>
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d109      	bne.n	80061ce <_strtol_l.constprop.0+0x56>
 80061ba:	2c30      	cmp	r4, #48	; 0x30
 80061bc:	d107      	bne.n	80061ce <_strtol_l.constprop.0+0x56>
 80061be:	782c      	ldrb	r4, [r5, #0]
 80061c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80061c4:	2c58      	cmp	r4, #88	; 0x58
 80061c6:	d14d      	bne.n	8006264 <_strtol_l.constprop.0+0xec>
 80061c8:	786c      	ldrb	r4, [r5, #1]
 80061ca:	2310      	movs	r3, #16
 80061cc:	3502      	adds	r5, #2
 80061ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80061d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80061d6:	f04f 0c00 	mov.w	ip, #0
 80061da:	fbb8 f9f3 	udiv	r9, r8, r3
 80061de:	4666      	mov	r6, ip
 80061e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80061e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061e8:	f1be 0f09 	cmp.w	lr, #9
 80061ec:	d816      	bhi.n	800621c <_strtol_l.constprop.0+0xa4>
 80061ee:	4674      	mov	r4, lr
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	dd24      	ble.n	800623e <_strtol_l.constprop.0+0xc6>
 80061f4:	f1bc 0f00 	cmp.w	ip, #0
 80061f8:	db1e      	blt.n	8006238 <_strtol_l.constprop.0+0xc0>
 80061fa:	45b1      	cmp	r9, r6
 80061fc:	d31c      	bcc.n	8006238 <_strtol_l.constprop.0+0xc0>
 80061fe:	d101      	bne.n	8006204 <_strtol_l.constprop.0+0x8c>
 8006200:	45a2      	cmp	sl, r4
 8006202:	db19      	blt.n	8006238 <_strtol_l.constprop.0+0xc0>
 8006204:	fb06 4603 	mla	r6, r6, r3, r4
 8006208:	f04f 0c01 	mov.w	ip, #1
 800620c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006210:	e7e8      	b.n	80061e4 <_strtol_l.constprop.0+0x6c>
 8006212:	2c2b      	cmp	r4, #43	; 0x2b
 8006214:	bf04      	itt	eq
 8006216:	782c      	ldrbeq	r4, [r5, #0]
 8006218:	1cb5      	addeq	r5, r6, #2
 800621a:	e7ca      	b.n	80061b2 <_strtol_l.constprop.0+0x3a>
 800621c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006220:	f1be 0f19 	cmp.w	lr, #25
 8006224:	d801      	bhi.n	800622a <_strtol_l.constprop.0+0xb2>
 8006226:	3c37      	subs	r4, #55	; 0x37
 8006228:	e7e2      	b.n	80061f0 <_strtol_l.constprop.0+0x78>
 800622a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800622e:	f1be 0f19 	cmp.w	lr, #25
 8006232:	d804      	bhi.n	800623e <_strtol_l.constprop.0+0xc6>
 8006234:	3c57      	subs	r4, #87	; 0x57
 8006236:	e7db      	b.n	80061f0 <_strtol_l.constprop.0+0x78>
 8006238:	f04f 3cff 	mov.w	ip, #4294967295
 800623c:	e7e6      	b.n	800620c <_strtol_l.constprop.0+0x94>
 800623e:	f1bc 0f00 	cmp.w	ip, #0
 8006242:	da05      	bge.n	8006250 <_strtol_l.constprop.0+0xd8>
 8006244:	2322      	movs	r3, #34	; 0x22
 8006246:	6003      	str	r3, [r0, #0]
 8006248:	4646      	mov	r6, r8
 800624a:	b942      	cbnz	r2, 800625e <_strtol_l.constprop.0+0xe6>
 800624c:	4630      	mov	r0, r6
 800624e:	e79e      	b.n	800618e <_strtol_l.constprop.0+0x16>
 8006250:	b107      	cbz	r7, 8006254 <_strtol_l.constprop.0+0xdc>
 8006252:	4276      	negs	r6, r6
 8006254:	2a00      	cmp	r2, #0
 8006256:	d0f9      	beq.n	800624c <_strtol_l.constprop.0+0xd4>
 8006258:	f1bc 0f00 	cmp.w	ip, #0
 800625c:	d000      	beq.n	8006260 <_strtol_l.constprop.0+0xe8>
 800625e:	1e69      	subs	r1, r5, #1
 8006260:	6011      	str	r1, [r2, #0]
 8006262:	e7f3      	b.n	800624c <_strtol_l.constprop.0+0xd4>
 8006264:	2430      	movs	r4, #48	; 0x30
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1b1      	bne.n	80061ce <_strtol_l.constprop.0+0x56>
 800626a:	2308      	movs	r3, #8
 800626c:	e7af      	b.n	80061ce <_strtol_l.constprop.0+0x56>
 800626e:	2c30      	cmp	r4, #48	; 0x30
 8006270:	d0a5      	beq.n	80061be <_strtol_l.constprop.0+0x46>
 8006272:	230a      	movs	r3, #10
 8006274:	e7ab      	b.n	80061ce <_strtol_l.constprop.0+0x56>
 8006276:	bf00      	nop
 8006278:	0800a4f9 	.word	0x0800a4f9

0800627c <_strtol_r>:
 800627c:	f7ff bf7c 	b.w	8006178 <_strtol_l.constprop.0>

08006280 <strtol>:
 8006280:	4613      	mov	r3, r2
 8006282:	460a      	mov	r2, r1
 8006284:	4601      	mov	r1, r0
 8006286:	4802      	ldr	r0, [pc, #8]	; (8006290 <strtol+0x10>)
 8006288:	6800      	ldr	r0, [r0, #0]
 800628a:	f7ff bf75 	b.w	8006178 <_strtol_l.constprop.0>
 800628e:	bf00      	nop
 8006290:	20000010 	.word	0x20000010

08006294 <quorem>:
 8006294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	6903      	ldr	r3, [r0, #16]
 800629a:	690c      	ldr	r4, [r1, #16]
 800629c:	42a3      	cmp	r3, r4
 800629e:	4607      	mov	r7, r0
 80062a0:	f2c0 8081 	blt.w	80063a6 <quorem+0x112>
 80062a4:	3c01      	subs	r4, #1
 80062a6:	f101 0814 	add.w	r8, r1, #20
 80062aa:	f100 0514 	add.w	r5, r0, #20
 80062ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062bc:	3301      	adds	r3, #1
 80062be:	429a      	cmp	r2, r3
 80062c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062cc:	d331      	bcc.n	8006332 <quorem+0x9e>
 80062ce:	f04f 0e00 	mov.w	lr, #0
 80062d2:	4640      	mov	r0, r8
 80062d4:	46ac      	mov	ip, r5
 80062d6:	46f2      	mov	sl, lr
 80062d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062dc:	b293      	uxth	r3, r2
 80062de:	fb06 e303 	mla	r3, r6, r3, lr
 80062e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ebaa 0303 	sub.w	r3, sl, r3
 80062ec:	f8dc a000 	ldr.w	sl, [ip]
 80062f0:	0c12      	lsrs	r2, r2, #16
 80062f2:	fa13 f38a 	uxtah	r3, r3, sl
 80062f6:	fb06 e202 	mla	r2, r6, r2, lr
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	9b00      	ldr	r3, [sp, #0]
 80062fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006302:	b292      	uxth	r2, r2
 8006304:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800630c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006310:	4581      	cmp	r9, r0
 8006312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006316:	f84c 3b04 	str.w	r3, [ip], #4
 800631a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800631e:	d2db      	bcs.n	80062d8 <quorem+0x44>
 8006320:	f855 300b 	ldr.w	r3, [r5, fp]
 8006324:	b92b      	cbnz	r3, 8006332 <quorem+0x9e>
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	3b04      	subs	r3, #4
 800632a:	429d      	cmp	r5, r3
 800632c:	461a      	mov	r2, r3
 800632e:	d32e      	bcc.n	800638e <quorem+0xfa>
 8006330:	613c      	str	r4, [r7, #16]
 8006332:	4638      	mov	r0, r7
 8006334:	f001 fc92 	bl	8007c5c <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	db24      	blt.n	8006386 <quorem+0xf2>
 800633c:	3601      	adds	r6, #1
 800633e:	4628      	mov	r0, r5
 8006340:	f04f 0c00 	mov.w	ip, #0
 8006344:	f858 2b04 	ldr.w	r2, [r8], #4
 8006348:	f8d0 e000 	ldr.w	lr, [r0]
 800634c:	b293      	uxth	r3, r2
 800634e:	ebac 0303 	sub.w	r3, ip, r3
 8006352:	0c12      	lsrs	r2, r2, #16
 8006354:	fa13 f38e 	uxtah	r3, r3, lr
 8006358:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800635c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006366:	45c1      	cmp	r9, r8
 8006368:	f840 3b04 	str.w	r3, [r0], #4
 800636c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006370:	d2e8      	bcs.n	8006344 <quorem+0xb0>
 8006372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800637a:	b922      	cbnz	r2, 8006386 <quorem+0xf2>
 800637c:	3b04      	subs	r3, #4
 800637e:	429d      	cmp	r5, r3
 8006380:	461a      	mov	r2, r3
 8006382:	d30a      	bcc.n	800639a <quorem+0x106>
 8006384:	613c      	str	r4, [r7, #16]
 8006386:	4630      	mov	r0, r6
 8006388:	b003      	add	sp, #12
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	3b04      	subs	r3, #4
 8006392:	2a00      	cmp	r2, #0
 8006394:	d1cc      	bne.n	8006330 <quorem+0x9c>
 8006396:	3c01      	subs	r4, #1
 8006398:	e7c7      	b.n	800632a <quorem+0x96>
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	3b04      	subs	r3, #4
 800639e:	2a00      	cmp	r2, #0
 80063a0:	d1f0      	bne.n	8006384 <quorem+0xf0>
 80063a2:	3c01      	subs	r4, #1
 80063a4:	e7eb      	b.n	800637e <quorem+0xea>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e7ee      	b.n	8006388 <quorem+0xf4>
 80063aa:	0000      	movs	r0, r0
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <_dtoa_r>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	ed2d 8b04 	vpush	{d8-d9}
 80063b8:	ec57 6b10 	vmov	r6, r7, d0
 80063bc:	b093      	sub	sp, #76	; 0x4c
 80063be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063c4:	9106      	str	r1, [sp, #24]
 80063c6:	ee10 aa10 	vmov	sl, s0
 80063ca:	4604      	mov	r4, r0
 80063cc:	9209      	str	r2, [sp, #36]	; 0x24
 80063ce:	930c      	str	r3, [sp, #48]	; 0x30
 80063d0:	46bb      	mov	fp, r7
 80063d2:	b975      	cbnz	r5, 80063f2 <_dtoa_r+0x42>
 80063d4:	2010      	movs	r0, #16
 80063d6:	f001 f94d 	bl	8007674 <malloc>
 80063da:	4602      	mov	r2, r0
 80063dc:	6260      	str	r0, [r4, #36]	; 0x24
 80063de:	b920      	cbnz	r0, 80063ea <_dtoa_r+0x3a>
 80063e0:	4ba7      	ldr	r3, [pc, #668]	; (8006680 <_dtoa_r+0x2d0>)
 80063e2:	21ea      	movs	r1, #234	; 0xea
 80063e4:	48a7      	ldr	r0, [pc, #668]	; (8006684 <_dtoa_r+0x2d4>)
 80063e6:	f002 f8bd 	bl	8008564 <__assert_func>
 80063ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063ee:	6005      	str	r5, [r0, #0]
 80063f0:	60c5      	str	r5, [r0, #12]
 80063f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	b151      	cbz	r1, 800640e <_dtoa_r+0x5e>
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	604a      	str	r2, [r1, #4]
 80063fc:	2301      	movs	r3, #1
 80063fe:	4093      	lsls	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	4620      	mov	r0, r4
 8006404:	f001 f99e 	bl	8007744 <_Bfree>
 8006408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	1e3b      	subs	r3, r7, #0
 8006410:	bfaa      	itet	ge
 8006412:	2300      	movge	r3, #0
 8006414:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006418:	f8c8 3000 	strge.w	r3, [r8]
 800641c:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <_dtoa_r+0x2d8>)
 800641e:	bfbc      	itt	lt
 8006420:	2201      	movlt	r2, #1
 8006422:	f8c8 2000 	strlt.w	r2, [r8]
 8006426:	ea33 030b 	bics.w	r3, r3, fp
 800642a:	d11b      	bne.n	8006464 <_dtoa_r+0xb4>
 800642c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800642e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006438:	4333      	orrs	r3, r6
 800643a:	f000 8592 	beq.w	8006f62 <_dtoa_r+0xbb2>
 800643e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006440:	b963      	cbnz	r3, 800645c <_dtoa_r+0xac>
 8006442:	4b92      	ldr	r3, [pc, #584]	; (800668c <_dtoa_r+0x2dc>)
 8006444:	e022      	b.n	800648c <_dtoa_r+0xdc>
 8006446:	4b92      	ldr	r3, [pc, #584]	; (8006690 <_dtoa_r+0x2e0>)
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	3308      	adds	r3, #8
 800644c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	9801      	ldr	r0, [sp, #4]
 8006452:	b013      	add	sp, #76	; 0x4c
 8006454:	ecbd 8b04 	vpop	{d8-d9}
 8006458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645c:	4b8b      	ldr	r3, [pc, #556]	; (800668c <_dtoa_r+0x2dc>)
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	3303      	adds	r3, #3
 8006462:	e7f3      	b.n	800644c <_dtoa_r+0x9c>
 8006464:	2200      	movs	r2, #0
 8006466:	2300      	movs	r3, #0
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	f7fa fb4c 	bl	8000b08 <__aeabi_dcmpeq>
 8006470:	ec4b ab19 	vmov	d9, sl, fp
 8006474:	4680      	mov	r8, r0
 8006476:	b158      	cbz	r0, 8006490 <_dtoa_r+0xe0>
 8006478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800647a:	2301      	movs	r3, #1
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 856b 	beq.w	8006f5c <_dtoa_r+0xbac>
 8006486:	4883      	ldr	r0, [pc, #524]	; (8006694 <_dtoa_r+0x2e4>)
 8006488:	6018      	str	r0, [r3, #0]
 800648a:	1e43      	subs	r3, r0, #1
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	e7df      	b.n	8006450 <_dtoa_r+0xa0>
 8006490:	ec4b ab10 	vmov	d0, sl, fp
 8006494:	aa10      	add	r2, sp, #64	; 0x40
 8006496:	a911      	add	r1, sp, #68	; 0x44
 8006498:	4620      	mov	r0, r4
 800649a:	f001 fd01 	bl	8007ea0 <__d2b>
 800649e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064a2:	ee08 0a10 	vmov	s16, r0
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	f000 8084 	beq.w	80065b4 <_dtoa_r+0x204>
 80064ac:	ee19 3a90 	vmov	r3, s19
 80064b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064b8:	4656      	mov	r6, sl
 80064ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064c6:	4b74      	ldr	r3, [pc, #464]	; (8006698 <_dtoa_r+0x2e8>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7f9 fefb 	bl	80002c8 <__aeabi_dsub>
 80064d2:	a365      	add	r3, pc, #404	; (adr r3, 8006668 <_dtoa_r+0x2b8>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7fa f8ae 	bl	8000638 <__aeabi_dmul>
 80064dc:	a364      	add	r3, pc, #400	; (adr r3, 8006670 <_dtoa_r+0x2c0>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7f9 fef3 	bl	80002cc <__adddf3>
 80064e6:	4606      	mov	r6, r0
 80064e8:	4628      	mov	r0, r5
 80064ea:	460f      	mov	r7, r1
 80064ec:	f7fa f83a 	bl	8000564 <__aeabi_i2d>
 80064f0:	a361      	add	r3, pc, #388	; (adr r3, 8006678 <_dtoa_r+0x2c8>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f89f 	bl	8000638 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4630      	mov	r0, r6
 8006500:	4639      	mov	r1, r7
 8006502:	f7f9 fee3 	bl	80002cc <__adddf3>
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	f7fa fb45 	bl	8000b98 <__aeabi_d2iz>
 800650e:	2200      	movs	r2, #0
 8006510:	9000      	str	r0, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	4630      	mov	r0, r6
 8006516:	4639      	mov	r1, r7
 8006518:	f7fa fb00 	bl	8000b1c <__aeabi_dcmplt>
 800651c:	b150      	cbz	r0, 8006534 <_dtoa_r+0x184>
 800651e:	9800      	ldr	r0, [sp, #0]
 8006520:	f7fa f820 	bl	8000564 <__aeabi_i2d>
 8006524:	4632      	mov	r2, r6
 8006526:	463b      	mov	r3, r7
 8006528:	f7fa faee 	bl	8000b08 <__aeabi_dcmpeq>
 800652c:	b910      	cbnz	r0, 8006534 <_dtoa_r+0x184>
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	3b01      	subs	r3, #1
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	9b00      	ldr	r3, [sp, #0]
 8006536:	2b16      	cmp	r3, #22
 8006538:	d85a      	bhi.n	80065f0 <_dtoa_r+0x240>
 800653a:	9a00      	ldr	r2, [sp, #0]
 800653c:	4b57      	ldr	r3, [pc, #348]	; (800669c <_dtoa_r+0x2ec>)
 800653e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	ec51 0b19 	vmov	r0, r1, d9
 800654a:	f7fa fae7 	bl	8000b1c <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	d050      	beq.n	80065f4 <_dtoa_r+0x244>
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	3b01      	subs	r3, #1
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2300      	movs	r3, #0
 800655a:	930b      	str	r3, [sp, #44]	; 0x2c
 800655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800655e:	1b5d      	subs	r5, r3, r5
 8006560:	1e6b      	subs	r3, r5, #1
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	bf45      	ittet	mi
 8006566:	f1c5 0301 	rsbmi	r3, r5, #1
 800656a:	9304      	strmi	r3, [sp, #16]
 800656c:	2300      	movpl	r3, #0
 800656e:	2300      	movmi	r3, #0
 8006570:	bf4c      	ite	mi
 8006572:	9305      	strmi	r3, [sp, #20]
 8006574:	9304      	strpl	r3, [sp, #16]
 8006576:	9b00      	ldr	r3, [sp, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	db3d      	blt.n	80065f8 <_dtoa_r+0x248>
 800657c:	9b05      	ldr	r3, [sp, #20]
 800657e:	9a00      	ldr	r2, [sp, #0]
 8006580:	920a      	str	r2, [sp, #40]	; 0x28
 8006582:	4413      	add	r3, r2
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	2300      	movs	r3, #0
 8006588:	9307      	str	r3, [sp, #28]
 800658a:	9b06      	ldr	r3, [sp, #24]
 800658c:	2b09      	cmp	r3, #9
 800658e:	f200 8089 	bhi.w	80066a4 <_dtoa_r+0x2f4>
 8006592:	2b05      	cmp	r3, #5
 8006594:	bfc4      	itt	gt
 8006596:	3b04      	subgt	r3, #4
 8006598:	9306      	strgt	r3, [sp, #24]
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	f1a3 0302 	sub.w	r3, r3, #2
 80065a0:	bfcc      	ite	gt
 80065a2:	2500      	movgt	r5, #0
 80065a4:	2501      	movle	r5, #1
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f200 8087 	bhi.w	80066ba <_dtoa_r+0x30a>
 80065ac:	e8df f003 	tbb	[pc, r3]
 80065b0:	59383a2d 	.word	0x59383a2d
 80065b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065b8:	441d      	add	r5, r3
 80065ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065be:	2b20      	cmp	r3, #32
 80065c0:	bfc1      	itttt	gt
 80065c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80065ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065d2:	bfda      	itte	le
 80065d4:	f1c3 0320 	rsble	r3, r3, #32
 80065d8:	fa06 f003 	lslle.w	r0, r6, r3
 80065dc:	4318      	orrgt	r0, r3
 80065de:	f7f9 ffb1 	bl	8000544 <__aeabi_ui2d>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4606      	mov	r6, r0
 80065e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065ea:	3d01      	subs	r5, #1
 80065ec:	930e      	str	r3, [sp, #56]	; 0x38
 80065ee:	e76a      	b.n	80064c6 <_dtoa_r+0x116>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7b2      	b.n	800655a <_dtoa_r+0x1aa>
 80065f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065f6:	e7b1      	b.n	800655c <_dtoa_r+0x1ac>
 80065f8:	9b04      	ldr	r3, [sp, #16]
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	4253      	negs	r3, r2
 8006602:	9307      	str	r3, [sp, #28]
 8006604:	2300      	movs	r3, #0
 8006606:	930a      	str	r3, [sp, #40]	; 0x28
 8006608:	e7bf      	b.n	800658a <_dtoa_r+0x1da>
 800660a:	2300      	movs	r3, #0
 800660c:	9308      	str	r3, [sp, #32]
 800660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc55      	bgt.n	80066c0 <_dtoa_r+0x310>
 8006614:	2301      	movs	r3, #1
 8006616:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800661a:	461a      	mov	r2, r3
 800661c:	9209      	str	r2, [sp, #36]	; 0x24
 800661e:	e00c      	b.n	800663a <_dtoa_r+0x28a>
 8006620:	2301      	movs	r3, #1
 8006622:	e7f3      	b.n	800660c <_dtoa_r+0x25c>
 8006624:	2300      	movs	r3, #0
 8006626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006628:	9308      	str	r3, [sp, #32]
 800662a:	9b00      	ldr	r3, [sp, #0]
 800662c:	4413      	add	r3, r2
 800662e:	9302      	str	r3, [sp, #8]
 8006630:	3301      	adds	r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	bfb8      	it	lt
 8006638:	2301      	movlt	r3, #1
 800663a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800663c:	2200      	movs	r2, #0
 800663e:	6042      	str	r2, [r0, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	f102 0614 	add.w	r6, r2, #20
 8006646:	429e      	cmp	r6, r3
 8006648:	6841      	ldr	r1, [r0, #4]
 800664a:	d93d      	bls.n	80066c8 <_dtoa_r+0x318>
 800664c:	4620      	mov	r0, r4
 800664e:	f001 f839 	bl	80076c4 <_Balloc>
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	2800      	cmp	r0, #0
 8006656:	d13b      	bne.n	80066d0 <_dtoa_r+0x320>
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <_dtoa_r+0x2f0>)
 800665a:	4602      	mov	r2, r0
 800665c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006660:	e6c0      	b.n	80063e4 <_dtoa_r+0x34>
 8006662:	2301      	movs	r3, #1
 8006664:	e7df      	b.n	8006626 <_dtoa_r+0x276>
 8006666:	bf00      	nop
 8006668:	636f4361 	.word	0x636f4361
 800666c:	3fd287a7 	.word	0x3fd287a7
 8006670:	8b60c8b3 	.word	0x8b60c8b3
 8006674:	3fc68a28 	.word	0x3fc68a28
 8006678:	509f79fb 	.word	0x509f79fb
 800667c:	3fd34413 	.word	0x3fd34413
 8006680:	0800a606 	.word	0x0800a606
 8006684:	0800a61d 	.word	0x0800a61d
 8006688:	7ff00000 	.word	0x7ff00000
 800668c:	0800a602 	.word	0x0800a602
 8006690:	0800a5f9 	.word	0x0800a5f9
 8006694:	0800a479 	.word	0x0800a479
 8006698:	3ff80000 	.word	0x3ff80000
 800669c:	0800a788 	.word	0x0800a788
 80066a0:	0800a678 	.word	0x0800a678
 80066a4:	2501      	movs	r5, #1
 80066a6:	2300      	movs	r3, #0
 80066a8:	9306      	str	r3, [sp, #24]
 80066aa:	9508      	str	r5, [sp, #32]
 80066ac:	f04f 33ff 	mov.w	r3, #4294967295
 80066b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2312      	movs	r3, #18
 80066b8:	e7b0      	b.n	800661c <_dtoa_r+0x26c>
 80066ba:	2301      	movs	r3, #1
 80066bc:	9308      	str	r3, [sp, #32]
 80066be:	e7f5      	b.n	80066ac <_dtoa_r+0x2fc>
 80066c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066c6:	e7b8      	b.n	800663a <_dtoa_r+0x28a>
 80066c8:	3101      	adds	r1, #1
 80066ca:	6041      	str	r1, [r0, #4]
 80066cc:	0052      	lsls	r2, r2, #1
 80066ce:	e7b8      	b.n	8006642 <_dtoa_r+0x292>
 80066d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	2b0e      	cmp	r3, #14
 80066da:	f200 809d 	bhi.w	8006818 <_dtoa_r+0x468>
 80066de:	2d00      	cmp	r5, #0
 80066e0:	f000 809a 	beq.w	8006818 <_dtoa_r+0x468>
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd32      	ble.n	8006750 <_dtoa_r+0x3a0>
 80066ea:	4ab7      	ldr	r2, [pc, #732]	; (80069c8 <_dtoa_r+0x618>)
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	05d8      	lsls	r0, r3, #23
 80066fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006700:	d516      	bpl.n	8006730 <_dtoa_r+0x380>
 8006702:	4bb2      	ldr	r3, [pc, #712]	; (80069cc <_dtoa_r+0x61c>)
 8006704:	ec51 0b19 	vmov	r0, r1, d9
 8006708:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800670c:	f7fa f8be 	bl	800088c <__aeabi_ddiv>
 8006710:	f007 070f 	and.w	r7, r7, #15
 8006714:	4682      	mov	sl, r0
 8006716:	468b      	mov	fp, r1
 8006718:	2503      	movs	r5, #3
 800671a:	4eac      	ldr	r6, [pc, #688]	; (80069cc <_dtoa_r+0x61c>)
 800671c:	b957      	cbnz	r7, 8006734 <_dtoa_r+0x384>
 800671e:	4642      	mov	r2, r8
 8006720:	464b      	mov	r3, r9
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	f7fa f8b1 	bl	800088c <__aeabi_ddiv>
 800672a:	4682      	mov	sl, r0
 800672c:	468b      	mov	fp, r1
 800672e:	e028      	b.n	8006782 <_dtoa_r+0x3d2>
 8006730:	2502      	movs	r5, #2
 8006732:	e7f2      	b.n	800671a <_dtoa_r+0x36a>
 8006734:	07f9      	lsls	r1, r7, #31
 8006736:	d508      	bpl.n	800674a <_dtoa_r+0x39a>
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006740:	f7f9 ff7a 	bl	8000638 <__aeabi_dmul>
 8006744:	3501      	adds	r5, #1
 8006746:	4680      	mov	r8, r0
 8006748:	4689      	mov	r9, r1
 800674a:	107f      	asrs	r7, r7, #1
 800674c:	3608      	adds	r6, #8
 800674e:	e7e5      	b.n	800671c <_dtoa_r+0x36c>
 8006750:	f000 809b 	beq.w	800688a <_dtoa_r+0x4da>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	4f9d      	ldr	r7, [pc, #628]	; (80069cc <_dtoa_r+0x61c>)
 8006758:	425e      	negs	r6, r3
 800675a:	4b9b      	ldr	r3, [pc, #620]	; (80069c8 <_dtoa_r+0x618>)
 800675c:	f006 020f 	and.w	r2, r6, #15
 8006760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	ec51 0b19 	vmov	r0, r1, d9
 800676c:	f7f9 ff64 	bl	8000638 <__aeabi_dmul>
 8006770:	1136      	asrs	r6, r6, #4
 8006772:	4682      	mov	sl, r0
 8006774:	468b      	mov	fp, r1
 8006776:	2300      	movs	r3, #0
 8006778:	2502      	movs	r5, #2
 800677a:	2e00      	cmp	r6, #0
 800677c:	d17a      	bne.n	8006874 <_dtoa_r+0x4c4>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1d3      	bne.n	800672a <_dtoa_r+0x37a>
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8082 	beq.w	800688e <_dtoa_r+0x4de>
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <_dtoa_r+0x620>)
 800678c:	2200      	movs	r2, #0
 800678e:	4650      	mov	r0, sl
 8006790:	4659      	mov	r1, fp
 8006792:	f7fa f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8006796:	2800      	cmp	r0, #0
 8006798:	d079      	beq.n	800688e <_dtoa_r+0x4de>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d076      	beq.n	800688e <_dtoa_r+0x4de>
 80067a0:	9b02      	ldr	r3, [sp, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dd36      	ble.n	8006814 <_dtoa_r+0x464>
 80067a6:	9b00      	ldr	r3, [sp, #0]
 80067a8:	4650      	mov	r0, sl
 80067aa:	4659      	mov	r1, fp
 80067ac:	1e5f      	subs	r7, r3, #1
 80067ae:	2200      	movs	r2, #0
 80067b0:	4b88      	ldr	r3, [pc, #544]	; (80069d4 <_dtoa_r+0x624>)
 80067b2:	f7f9 ff41 	bl	8000638 <__aeabi_dmul>
 80067b6:	9e02      	ldr	r6, [sp, #8]
 80067b8:	4682      	mov	sl, r0
 80067ba:	468b      	mov	fp, r1
 80067bc:	3501      	adds	r5, #1
 80067be:	4628      	mov	r0, r5
 80067c0:	f7f9 fed0 	bl	8000564 <__aeabi_i2d>
 80067c4:	4652      	mov	r2, sl
 80067c6:	465b      	mov	r3, fp
 80067c8:	f7f9 ff36 	bl	8000638 <__aeabi_dmul>
 80067cc:	4b82      	ldr	r3, [pc, #520]	; (80069d8 <_dtoa_r+0x628>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	f7f9 fd7c 	bl	80002cc <__adddf3>
 80067d4:	46d0      	mov	r8, sl
 80067d6:	46d9      	mov	r9, fp
 80067d8:	4682      	mov	sl, r0
 80067da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d158      	bne.n	8006894 <_dtoa_r+0x4e4>
 80067e2:	4b7e      	ldr	r3, [pc, #504]	; (80069dc <_dtoa_r+0x62c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	4640      	mov	r0, r8
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7f9 fd6d 	bl	80002c8 <__aeabi_dsub>
 80067ee:	4652      	mov	r2, sl
 80067f0:	465b      	mov	r3, fp
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
 80067f6:	f7fa f9af 	bl	8000b58 <__aeabi_dcmpgt>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f040 8295 	bne.w	8006d2a <_dtoa_r+0x97a>
 8006800:	4652      	mov	r2, sl
 8006802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7fa f987 	bl	8000b1c <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	f040 8289 	bne.w	8006d26 <_dtoa_r+0x976>
 8006814:	ec5b ab19 	vmov	sl, fp, d9
 8006818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800681a:	2b00      	cmp	r3, #0
 800681c:	f2c0 8148 	blt.w	8006ab0 <_dtoa_r+0x700>
 8006820:	9a00      	ldr	r2, [sp, #0]
 8006822:	2a0e      	cmp	r2, #14
 8006824:	f300 8144 	bgt.w	8006ab0 <_dtoa_r+0x700>
 8006828:	4b67      	ldr	r3, [pc, #412]	; (80069c8 <_dtoa_r+0x618>)
 800682a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800682e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	f280 80d5 	bge.w	80069e4 <_dtoa_r+0x634>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f300 80d1 	bgt.w	80069e4 <_dtoa_r+0x634>
 8006842:	f040 826f 	bne.w	8006d24 <_dtoa_r+0x974>
 8006846:	4b65      	ldr	r3, [pc, #404]	; (80069dc <_dtoa_r+0x62c>)
 8006848:	2200      	movs	r2, #0
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 fef3 	bl	8000638 <__aeabi_dmul>
 8006852:	4652      	mov	r2, sl
 8006854:	465b      	mov	r3, fp
 8006856:	f7fa f975 	bl	8000b44 <__aeabi_dcmpge>
 800685a:	9e03      	ldr	r6, [sp, #12]
 800685c:	4637      	mov	r7, r6
 800685e:	2800      	cmp	r0, #0
 8006860:	f040 8245 	bne.w	8006cee <_dtoa_r+0x93e>
 8006864:	9d01      	ldr	r5, [sp, #4]
 8006866:	2331      	movs	r3, #49	; 0x31
 8006868:	f805 3b01 	strb.w	r3, [r5], #1
 800686c:	9b00      	ldr	r3, [sp, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	e240      	b.n	8006cf6 <_dtoa_r+0x946>
 8006874:	07f2      	lsls	r2, r6, #31
 8006876:	d505      	bpl.n	8006884 <_dtoa_r+0x4d4>
 8006878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687c:	f7f9 fedc 	bl	8000638 <__aeabi_dmul>
 8006880:	3501      	adds	r5, #1
 8006882:	2301      	movs	r3, #1
 8006884:	1076      	asrs	r6, r6, #1
 8006886:	3708      	adds	r7, #8
 8006888:	e777      	b.n	800677a <_dtoa_r+0x3ca>
 800688a:	2502      	movs	r5, #2
 800688c:	e779      	b.n	8006782 <_dtoa_r+0x3d2>
 800688e:	9f00      	ldr	r7, [sp, #0]
 8006890:	9e03      	ldr	r6, [sp, #12]
 8006892:	e794      	b.n	80067be <_dtoa_r+0x40e>
 8006894:	9901      	ldr	r1, [sp, #4]
 8006896:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <_dtoa_r+0x618>)
 8006898:	4431      	add	r1, r6
 800689a:	910d      	str	r1, [sp, #52]	; 0x34
 800689c:	9908      	ldr	r1, [sp, #32]
 800689e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068a6:	2900      	cmp	r1, #0
 80068a8:	d043      	beq.n	8006932 <_dtoa_r+0x582>
 80068aa:	494d      	ldr	r1, [pc, #308]	; (80069e0 <_dtoa_r+0x630>)
 80068ac:	2000      	movs	r0, #0
 80068ae:	f7f9 ffed 	bl	800088c <__aeabi_ddiv>
 80068b2:	4652      	mov	r2, sl
 80068b4:	465b      	mov	r3, fp
 80068b6:	f7f9 fd07 	bl	80002c8 <__aeabi_dsub>
 80068ba:	9d01      	ldr	r5, [sp, #4]
 80068bc:	4682      	mov	sl, r0
 80068be:	468b      	mov	fp, r1
 80068c0:	4649      	mov	r1, r9
 80068c2:	4640      	mov	r0, r8
 80068c4:	f7fa f968 	bl	8000b98 <__aeabi_d2iz>
 80068c8:	4606      	mov	r6, r0
 80068ca:	f7f9 fe4b 	bl	8000564 <__aeabi_i2d>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	f7f9 fcf7 	bl	80002c8 <__aeabi_dsub>
 80068da:	3630      	adds	r6, #48	; 0x30
 80068dc:	f805 6b01 	strb.w	r6, [r5], #1
 80068e0:	4652      	mov	r2, sl
 80068e2:	465b      	mov	r3, fp
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	f7fa f918 	bl	8000b1c <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d163      	bne.n	80069b8 <_dtoa_r+0x608>
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	4936      	ldr	r1, [pc, #216]	; (80069d0 <_dtoa_r+0x620>)
 80068f6:	2000      	movs	r0, #0
 80068f8:	f7f9 fce6 	bl	80002c8 <__aeabi_dsub>
 80068fc:	4652      	mov	r2, sl
 80068fe:	465b      	mov	r3, fp
 8006900:	f7fa f90c 	bl	8000b1c <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f040 80b5 	bne.w	8006a74 <_dtoa_r+0x6c4>
 800690a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800690c:	429d      	cmp	r5, r3
 800690e:	d081      	beq.n	8006814 <_dtoa_r+0x464>
 8006910:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <_dtoa_r+0x624>)
 8006912:	2200      	movs	r2, #0
 8006914:	4650      	mov	r0, sl
 8006916:	4659      	mov	r1, fp
 8006918:	f7f9 fe8e 	bl	8000638 <__aeabi_dmul>
 800691c:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <_dtoa_r+0x624>)
 800691e:	4682      	mov	sl, r0
 8006920:	468b      	mov	fp, r1
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	2200      	movs	r2, #0
 8006928:	f7f9 fe86 	bl	8000638 <__aeabi_dmul>
 800692c:	4680      	mov	r8, r0
 800692e:	4689      	mov	r9, r1
 8006930:	e7c6      	b.n	80068c0 <_dtoa_r+0x510>
 8006932:	4650      	mov	r0, sl
 8006934:	4659      	mov	r1, fp
 8006936:	f7f9 fe7f 	bl	8000638 <__aeabi_dmul>
 800693a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800693c:	9d01      	ldr	r5, [sp, #4]
 800693e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006940:	4682      	mov	sl, r0
 8006942:	468b      	mov	fp, r1
 8006944:	4649      	mov	r1, r9
 8006946:	4640      	mov	r0, r8
 8006948:	f7fa f926 	bl	8000b98 <__aeabi_d2iz>
 800694c:	4606      	mov	r6, r0
 800694e:	f7f9 fe09 	bl	8000564 <__aeabi_i2d>
 8006952:	3630      	adds	r6, #48	; 0x30
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4640      	mov	r0, r8
 800695a:	4649      	mov	r1, r9
 800695c:	f7f9 fcb4 	bl	80002c8 <__aeabi_dsub>
 8006960:	f805 6b01 	strb.w	r6, [r5], #1
 8006964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006966:	429d      	cmp	r5, r3
 8006968:	4680      	mov	r8, r0
 800696a:	4689      	mov	r9, r1
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	d124      	bne.n	80069bc <_dtoa_r+0x60c>
 8006972:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <_dtoa_r+0x630>)
 8006974:	4650      	mov	r0, sl
 8006976:	4659      	mov	r1, fp
 8006978:	f7f9 fca8 	bl	80002cc <__adddf3>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4640      	mov	r0, r8
 8006982:	4649      	mov	r1, r9
 8006984:	f7fa f8e8 	bl	8000b58 <__aeabi_dcmpgt>
 8006988:	2800      	cmp	r0, #0
 800698a:	d173      	bne.n	8006a74 <_dtoa_r+0x6c4>
 800698c:	4652      	mov	r2, sl
 800698e:	465b      	mov	r3, fp
 8006990:	4913      	ldr	r1, [pc, #76]	; (80069e0 <_dtoa_r+0x630>)
 8006992:	2000      	movs	r0, #0
 8006994:	f7f9 fc98 	bl	80002c8 <__aeabi_dsub>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f7fa f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f43f af35 	beq.w	8006814 <_dtoa_r+0x464>
 80069aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069ac:	1e6b      	subs	r3, r5, #1
 80069ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80069b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069b4:	2b30      	cmp	r3, #48	; 0x30
 80069b6:	d0f8      	beq.n	80069aa <_dtoa_r+0x5fa>
 80069b8:	9700      	str	r7, [sp, #0]
 80069ba:	e049      	b.n	8006a50 <_dtoa_r+0x6a0>
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <_dtoa_r+0x624>)
 80069be:	f7f9 fe3b 	bl	8000638 <__aeabi_dmul>
 80069c2:	4680      	mov	r8, r0
 80069c4:	4689      	mov	r9, r1
 80069c6:	e7bd      	b.n	8006944 <_dtoa_r+0x594>
 80069c8:	0800a788 	.word	0x0800a788
 80069cc:	0800a760 	.word	0x0800a760
 80069d0:	3ff00000 	.word	0x3ff00000
 80069d4:	40240000 	.word	0x40240000
 80069d8:	401c0000 	.word	0x401c0000
 80069dc:	40140000 	.word	0x40140000
 80069e0:	3fe00000 	.word	0x3fe00000
 80069e4:	9d01      	ldr	r5, [sp, #4]
 80069e6:	4656      	mov	r6, sl
 80069e8:	465f      	mov	r7, fp
 80069ea:	4642      	mov	r2, r8
 80069ec:	464b      	mov	r3, r9
 80069ee:	4630      	mov	r0, r6
 80069f0:	4639      	mov	r1, r7
 80069f2:	f7f9 ff4b 	bl	800088c <__aeabi_ddiv>
 80069f6:	f7fa f8cf 	bl	8000b98 <__aeabi_d2iz>
 80069fa:	4682      	mov	sl, r0
 80069fc:	f7f9 fdb2 	bl	8000564 <__aeabi_i2d>
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	f7f9 fe18 	bl	8000638 <__aeabi_dmul>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	4639      	mov	r1, r7
 8006a10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a14:	f7f9 fc58 	bl	80002c8 <__aeabi_dsub>
 8006a18:	f805 6b01 	strb.w	r6, [r5], #1
 8006a1c:	9e01      	ldr	r6, [sp, #4]
 8006a1e:	9f03      	ldr	r7, [sp, #12]
 8006a20:	1bae      	subs	r6, r5, r6
 8006a22:	42b7      	cmp	r7, r6
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	d135      	bne.n	8006a96 <_dtoa_r+0x6e6>
 8006a2a:	f7f9 fc4f 	bl	80002cc <__adddf3>
 8006a2e:	4642      	mov	r2, r8
 8006a30:	464b      	mov	r3, r9
 8006a32:	4606      	mov	r6, r0
 8006a34:	460f      	mov	r7, r1
 8006a36:	f7fa f88f 	bl	8000b58 <__aeabi_dcmpgt>
 8006a3a:	b9d0      	cbnz	r0, 8006a72 <_dtoa_r+0x6c2>
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f860 	bl	8000b08 <__aeabi_dcmpeq>
 8006a48:	b110      	cbz	r0, 8006a50 <_dtoa_r+0x6a0>
 8006a4a:	f01a 0f01 	tst.w	sl, #1
 8006a4e:	d110      	bne.n	8006a72 <_dtoa_r+0x6c2>
 8006a50:	4620      	mov	r0, r4
 8006a52:	ee18 1a10 	vmov	r1, s16
 8006a56:	f000 fe75 	bl	8007744 <_Bfree>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9800      	ldr	r0, [sp, #0]
 8006a5e:	702b      	strb	r3, [r5, #0]
 8006a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a62:	3001      	adds	r0, #1
 8006a64:	6018      	str	r0, [r3, #0]
 8006a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f43f acf1 	beq.w	8006450 <_dtoa_r+0xa0>
 8006a6e:	601d      	str	r5, [r3, #0]
 8006a70:	e4ee      	b.n	8006450 <_dtoa_r+0xa0>
 8006a72:	9f00      	ldr	r7, [sp, #0]
 8006a74:	462b      	mov	r3, r5
 8006a76:	461d      	mov	r5, r3
 8006a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7c:	2a39      	cmp	r2, #57	; 0x39
 8006a7e:	d106      	bne.n	8006a8e <_dtoa_r+0x6de>
 8006a80:	9a01      	ldr	r2, [sp, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d1f7      	bne.n	8006a76 <_dtoa_r+0x6c6>
 8006a86:	9901      	ldr	r1, [sp, #4]
 8006a88:	2230      	movs	r2, #48	; 0x30
 8006a8a:	3701      	adds	r7, #1
 8006a8c:	700a      	strb	r2, [r1, #0]
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	3201      	adds	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e790      	b.n	80069b8 <_dtoa_r+0x608>
 8006a96:	4ba6      	ldr	r3, [pc, #664]	; (8006d30 <_dtoa_r+0x980>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f7f9 fdcd 	bl	8000638 <__aeabi_dmul>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	f7fa f82f 	bl	8000b08 <__aeabi_dcmpeq>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d09d      	beq.n	80069ea <_dtoa_r+0x63a>
 8006aae:	e7cf      	b.n	8006a50 <_dtoa_r+0x6a0>
 8006ab0:	9a08      	ldr	r2, [sp, #32]
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	f000 80d7 	beq.w	8006c66 <_dtoa_r+0x8b6>
 8006ab8:	9a06      	ldr	r2, [sp, #24]
 8006aba:	2a01      	cmp	r2, #1
 8006abc:	f300 80ba 	bgt.w	8006c34 <_dtoa_r+0x884>
 8006ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	f000 80b2 	beq.w	8006c2c <_dtoa_r+0x87c>
 8006ac8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006acc:	9e07      	ldr	r6, [sp, #28]
 8006ace:	9d04      	ldr	r5, [sp, #16]
 8006ad0:	9a04      	ldr	r2, [sp, #16]
 8006ad2:	441a      	add	r2, r3
 8006ad4:	9204      	str	r2, [sp, #16]
 8006ad6:	9a05      	ldr	r2, [sp, #20]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	441a      	add	r2, r3
 8006adc:	4620      	mov	r0, r4
 8006ade:	9205      	str	r2, [sp, #20]
 8006ae0:	f000 ff32 	bl	8007948 <__i2b>
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	dd0c      	ble.n	8006b04 <_dtoa_r+0x754>
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dd09      	ble.n	8006b04 <_dtoa_r+0x754>
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	9a04      	ldr	r2, [sp, #16]
 8006af4:	bfa8      	it	ge
 8006af6:	462b      	movge	r3, r5
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	9204      	str	r2, [sp, #16]
 8006afc:	9a05      	ldr	r2, [sp, #20]
 8006afe:	1aed      	subs	r5, r5, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	9305      	str	r3, [sp, #20]
 8006b04:	9b07      	ldr	r3, [sp, #28]
 8006b06:	b31b      	cbz	r3, 8006b50 <_dtoa_r+0x7a0>
 8006b08:	9b08      	ldr	r3, [sp, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80af 	beq.w	8006c6e <_dtoa_r+0x8be>
 8006b10:	2e00      	cmp	r6, #0
 8006b12:	dd13      	ble.n	8006b3c <_dtoa_r+0x78c>
 8006b14:	4639      	mov	r1, r7
 8006b16:	4632      	mov	r2, r6
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 ffd5 	bl	8007ac8 <__pow5mult>
 8006b1e:	ee18 2a10 	vmov	r2, s16
 8006b22:	4601      	mov	r1, r0
 8006b24:	4607      	mov	r7, r0
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 ff24 	bl	8007974 <__multiply>
 8006b2c:	ee18 1a10 	vmov	r1, s16
 8006b30:	4680      	mov	r8, r0
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fe06 	bl	8007744 <_Bfree>
 8006b38:	ee08 8a10 	vmov	s16, r8
 8006b3c:	9b07      	ldr	r3, [sp, #28]
 8006b3e:	1b9a      	subs	r2, r3, r6
 8006b40:	d006      	beq.n	8006b50 <_dtoa_r+0x7a0>
 8006b42:	ee18 1a10 	vmov	r1, s16
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 ffbe 	bl	8007ac8 <__pow5mult>
 8006b4c:	ee08 0a10 	vmov	s16, r0
 8006b50:	2101      	movs	r1, #1
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fef8 	bl	8007948 <__i2b>
 8006b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f340 8088 	ble.w	8006c72 <_dtoa_r+0x8c2>
 8006b62:	461a      	mov	r2, r3
 8006b64:	4601      	mov	r1, r0
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 ffae 	bl	8007ac8 <__pow5mult>
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	4606      	mov	r6, r0
 8006b72:	f340 8081 	ble.w	8006c78 <_dtoa_r+0x8c8>
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	6933      	ldr	r3, [r6, #16]
 8006b7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b80:	6918      	ldr	r0, [r3, #16]
 8006b82:	f000 fe91 	bl	80078a8 <__hi0bits>
 8006b86:	f1c0 0020 	rsb	r0, r0, #32
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	4418      	add	r0, r3
 8006b8e:	f010 001f 	ands.w	r0, r0, #31
 8006b92:	f000 8092 	beq.w	8006cba <_dtoa_r+0x90a>
 8006b96:	f1c0 0320 	rsb	r3, r0, #32
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	f340 808a 	ble.w	8006cb4 <_dtoa_r+0x904>
 8006ba0:	f1c0 001c 	rsb	r0, r0, #28
 8006ba4:	9b04      	ldr	r3, [sp, #16]
 8006ba6:	4403      	add	r3, r0
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	4403      	add	r3, r0
 8006bae:	4405      	add	r5, r0
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	9b04      	ldr	r3, [sp, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd07      	ble.n	8006bc8 <_dtoa_r+0x818>
 8006bb8:	ee18 1a10 	vmov	r1, s16
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 ffdc 	bl	8007b7c <__lshift>
 8006bc4:	ee08 0a10 	vmov	s16, r0
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd05      	ble.n	8006bda <_dtoa_r+0x82a>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 ffd2 	bl	8007b7c <__lshift>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d06e      	beq.n	8006cbe <_dtoa_r+0x90e>
 8006be0:	ee18 0a10 	vmov	r0, s16
 8006be4:	4631      	mov	r1, r6
 8006be6:	f001 f839 	bl	8007c5c <__mcmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	da67      	bge.n	8006cbe <_dtoa_r+0x90e>
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	ee18 1a10 	vmov	r1, s16
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fdc3 	bl	8007788 <__multadd>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	ee08 0a10 	vmov	s16, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 81b1 	beq.w	8006f70 <_dtoa_r+0xbc0>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4639      	mov	r1, r7
 8006c12:	220a      	movs	r2, #10
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fdb7 	bl	8007788 <__multadd>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	4607      	mov	r7, r0
 8006c20:	f300 808e 	bgt.w	8006d40 <_dtoa_r+0x990>
 8006c24:	9b06      	ldr	r3, [sp, #24]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	dc51      	bgt.n	8006cce <_dtoa_r+0x91e>
 8006c2a:	e089      	b.n	8006d40 <_dtoa_r+0x990>
 8006c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c32:	e74b      	b.n	8006acc <_dtoa_r+0x71c>
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	1e5e      	subs	r6, r3, #1
 8006c38:	9b07      	ldr	r3, [sp, #28]
 8006c3a:	42b3      	cmp	r3, r6
 8006c3c:	bfbf      	itttt	lt
 8006c3e:	9b07      	ldrlt	r3, [sp, #28]
 8006c40:	9607      	strlt	r6, [sp, #28]
 8006c42:	1af2      	sublt	r2, r6, r3
 8006c44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c46:	bfb6      	itet	lt
 8006c48:	189b      	addlt	r3, r3, r2
 8006c4a:	1b9e      	subge	r6, r3, r6
 8006c4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	bfb8      	it	lt
 8006c52:	2600      	movlt	r6, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfb7      	itett	lt
 8006c58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c60:	1a9d      	sublt	r5, r3, r2
 8006c62:	2300      	movlt	r3, #0
 8006c64:	e734      	b.n	8006ad0 <_dtoa_r+0x720>
 8006c66:	9e07      	ldr	r6, [sp, #28]
 8006c68:	9d04      	ldr	r5, [sp, #16]
 8006c6a:	9f08      	ldr	r7, [sp, #32]
 8006c6c:	e73b      	b.n	8006ae6 <_dtoa_r+0x736>
 8006c6e:	9a07      	ldr	r2, [sp, #28]
 8006c70:	e767      	b.n	8006b42 <_dtoa_r+0x792>
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	dc18      	bgt.n	8006caa <_dtoa_r+0x8fa>
 8006c78:	f1ba 0f00 	cmp.w	sl, #0
 8006c7c:	d115      	bne.n	8006caa <_dtoa_r+0x8fa>
 8006c7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c82:	b993      	cbnz	r3, 8006caa <_dtoa_r+0x8fa>
 8006c84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c88:	0d1b      	lsrs	r3, r3, #20
 8006c8a:	051b      	lsls	r3, r3, #20
 8006c8c:	b183      	cbz	r3, 8006cb0 <_dtoa_r+0x900>
 8006c8e:	9b04      	ldr	r3, [sp, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	3301      	adds	r3, #1
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	f04f 0801 	mov.w	r8, #1
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f af6a 	bne.w	8006b7a <_dtoa_r+0x7ca>
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e76f      	b.n	8006b8a <_dtoa_r+0x7da>
 8006caa:	f04f 0800 	mov.w	r8, #0
 8006cae:	e7f6      	b.n	8006c9e <_dtoa_r+0x8ee>
 8006cb0:	4698      	mov	r8, r3
 8006cb2:	e7f4      	b.n	8006c9e <_dtoa_r+0x8ee>
 8006cb4:	f43f af7d 	beq.w	8006bb2 <_dtoa_r+0x802>
 8006cb8:	4618      	mov	r0, r3
 8006cba:	301c      	adds	r0, #28
 8006cbc:	e772      	b.n	8006ba4 <_dtoa_r+0x7f4>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc37      	bgt.n	8006d34 <_dtoa_r+0x984>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	dd34      	ble.n	8006d34 <_dtoa_r+0x984>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	9302      	str	r3, [sp, #8]
 8006cce:	9b02      	ldr	r3, [sp, #8]
 8006cd0:	b96b      	cbnz	r3, 8006cee <_dtoa_r+0x93e>
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f000 fd56 	bl	8007788 <__multadd>
 8006cdc:	4601      	mov	r1, r0
 8006cde:	4606      	mov	r6, r0
 8006ce0:	ee18 0a10 	vmov	r0, s16
 8006ce4:	f000 ffba 	bl	8007c5c <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f73f adbb 	bgt.w	8006864 <_dtoa_r+0x4b4>
 8006cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf0:	9d01      	ldr	r5, [sp, #4]
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fd21 	bl	8007744 <_Bfree>
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	f43f aea4 	beq.w	8006a50 <_dtoa_r+0x6a0>
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	d005      	beq.n	8006d1a <_dtoa_r+0x96a>
 8006d0e:	45b8      	cmp	r8, r7
 8006d10:	d003      	beq.n	8006d1a <_dtoa_r+0x96a>
 8006d12:	4641      	mov	r1, r8
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fd15 	bl	8007744 <_Bfree>
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fd11 	bl	8007744 <_Bfree>
 8006d22:	e695      	b.n	8006a50 <_dtoa_r+0x6a0>
 8006d24:	2600      	movs	r6, #0
 8006d26:	4637      	mov	r7, r6
 8006d28:	e7e1      	b.n	8006cee <_dtoa_r+0x93e>
 8006d2a:	9700      	str	r7, [sp, #0]
 8006d2c:	4637      	mov	r7, r6
 8006d2e:	e599      	b.n	8006864 <_dtoa_r+0x4b4>
 8006d30:	40240000 	.word	0x40240000
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80ca 	beq.w	8006ed0 <_dtoa_r+0xb20>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	dd05      	ble.n	8006d50 <_dtoa_r+0x9a0>
 8006d44:	4639      	mov	r1, r7
 8006d46:	462a      	mov	r2, r5
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 ff17 	bl	8007b7c <__lshift>
 8006d4e:	4607      	mov	r7, r0
 8006d50:	f1b8 0f00 	cmp.w	r8, #0
 8006d54:	d05b      	beq.n	8006e0e <_dtoa_r+0xa5e>
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fcb3 	bl	80076c4 <_Balloc>
 8006d5e:	4605      	mov	r5, r0
 8006d60:	b928      	cbnz	r0, 8006d6e <_dtoa_r+0x9be>
 8006d62:	4b87      	ldr	r3, [pc, #540]	; (8006f80 <_dtoa_r+0xbd0>)
 8006d64:	4602      	mov	r2, r0
 8006d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d6a:	f7ff bb3b 	b.w	80063e4 <_dtoa_r+0x34>
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	3202      	adds	r2, #2
 8006d72:	0092      	lsls	r2, r2, #2
 8006d74:	f107 010c 	add.w	r1, r7, #12
 8006d78:	300c      	adds	r0, #12
 8006d7a:	f000 fc95 	bl	80076a8 <memcpy>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4629      	mov	r1, r5
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 fefa 	bl	8007b7c <__lshift>
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	f103 0901 	add.w	r9, r3, #1
 8006d8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	9305      	str	r3, [sp, #20]
 8006d96:	f00a 0301 	and.w	r3, sl, #1
 8006d9a:	46b8      	mov	r8, r7
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	4607      	mov	r7, r0
 8006da0:	4631      	mov	r1, r6
 8006da2:	ee18 0a10 	vmov	r0, s16
 8006da6:	f7ff fa75 	bl	8006294 <quorem>
 8006daa:	4641      	mov	r1, r8
 8006dac:	9002      	str	r0, [sp, #8]
 8006dae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f000 ff51 	bl	8007c5c <__mcmp>
 8006dba:	463a      	mov	r2, r7
 8006dbc:	9003      	str	r0, [sp, #12]
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 ff67 	bl	8007c94 <__mdiff>
 8006dc6:	68c2      	ldr	r2, [r0, #12]
 8006dc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006dcc:	4605      	mov	r5, r0
 8006dce:	bb02      	cbnz	r2, 8006e12 <_dtoa_r+0xa62>
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	ee18 0a10 	vmov	r0, s16
 8006dd6:	f000 ff41 	bl	8007c5c <__mcmp>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4620      	mov	r0, r4
 8006de0:	9207      	str	r2, [sp, #28]
 8006de2:	f000 fcaf 	bl	8007744 <_Bfree>
 8006de6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dea:	ea43 0102 	orr.w	r1, r3, r2
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	464d      	mov	r5, r9
 8006df4:	d10f      	bne.n	8006e16 <_dtoa_r+0xa66>
 8006df6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dfa:	d02a      	beq.n	8006e52 <_dtoa_r+0xaa2>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd02      	ble.n	8006e08 <_dtoa_r+0xa58>
 8006e02:	9b02      	ldr	r3, [sp, #8]
 8006e04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e08:	f88b a000 	strb.w	sl, [fp]
 8006e0c:	e775      	b.n	8006cfa <_dtoa_r+0x94a>
 8006e0e:	4638      	mov	r0, r7
 8006e10:	e7ba      	b.n	8006d88 <_dtoa_r+0x9d8>
 8006e12:	2201      	movs	r2, #1
 8006e14:	e7e2      	b.n	8006ddc <_dtoa_r+0xa2c>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db04      	blt.n	8006e26 <_dtoa_r+0xa76>
 8006e1c:	9906      	ldr	r1, [sp, #24]
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	9904      	ldr	r1, [sp, #16]
 8006e22:	430b      	orrs	r3, r1
 8006e24:	d122      	bne.n	8006e6c <_dtoa_r+0xabc>
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	ddee      	ble.n	8006e08 <_dtoa_r+0xa58>
 8006e2a:	ee18 1a10 	vmov	r1, s16
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fea3 	bl	8007b7c <__lshift>
 8006e36:	4631      	mov	r1, r6
 8006e38:	ee08 0a10 	vmov	s16, r0
 8006e3c:	f000 ff0e 	bl	8007c5c <__mcmp>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	dc03      	bgt.n	8006e4c <_dtoa_r+0xa9c>
 8006e44:	d1e0      	bne.n	8006e08 <_dtoa_r+0xa58>
 8006e46:	f01a 0f01 	tst.w	sl, #1
 8006e4a:	d0dd      	beq.n	8006e08 <_dtoa_r+0xa58>
 8006e4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e50:	d1d7      	bne.n	8006e02 <_dtoa_r+0xa52>
 8006e52:	2339      	movs	r3, #57	; 0x39
 8006e54:	f88b 3000 	strb.w	r3, [fp]
 8006e58:	462b      	mov	r3, r5
 8006e5a:	461d      	mov	r5, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e62:	2a39      	cmp	r2, #57	; 0x39
 8006e64:	d071      	beq.n	8006f4a <_dtoa_r+0xb9a>
 8006e66:	3201      	adds	r2, #1
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e746      	b.n	8006cfa <_dtoa_r+0x94a>
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	dd07      	ble.n	8006e80 <_dtoa_r+0xad0>
 8006e70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e74:	d0ed      	beq.n	8006e52 <_dtoa_r+0xaa2>
 8006e76:	f10a 0301 	add.w	r3, sl, #1
 8006e7a:	f88b 3000 	strb.w	r3, [fp]
 8006e7e:	e73c      	b.n	8006cfa <_dtoa_r+0x94a>
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e86:	4599      	cmp	r9, r3
 8006e88:	d047      	beq.n	8006f1a <_dtoa_r+0xb6a>
 8006e8a:	ee18 1a10 	vmov	r1, s16
 8006e8e:	2300      	movs	r3, #0
 8006e90:	220a      	movs	r2, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fc78 	bl	8007788 <__multadd>
 8006e98:	45b8      	cmp	r8, r7
 8006e9a:	ee08 0a10 	vmov	s16, r0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	f04f 020a 	mov.w	r2, #10
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	d106      	bne.n	8006eba <_dtoa_r+0xb0a>
 8006eac:	f000 fc6c 	bl	8007788 <__multadd>
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	f109 0901 	add.w	r9, r9, #1
 8006eb8:	e772      	b.n	8006da0 <_dtoa_r+0x9f0>
 8006eba:	f000 fc65 	bl	8007788 <__multadd>
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fc5e 	bl	8007788 <__multadd>
 8006ecc:	4607      	mov	r7, r0
 8006ece:	e7f1      	b.n	8006eb4 <_dtoa_r+0xb04>
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	9302      	str	r3, [sp, #8]
 8006ed4:	9d01      	ldr	r5, [sp, #4]
 8006ed6:	ee18 0a10 	vmov	r0, s16
 8006eda:	4631      	mov	r1, r6
 8006edc:	f7ff f9da 	bl	8006294 <quorem>
 8006ee0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	f805 ab01 	strb.w	sl, [r5], #1
 8006eea:	1aea      	subs	r2, r5, r3
 8006eec:	9b02      	ldr	r3, [sp, #8]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	dd09      	ble.n	8006f06 <_dtoa_r+0xb56>
 8006ef2:	ee18 1a10 	vmov	r1, s16
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	220a      	movs	r2, #10
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fc44 	bl	8007788 <__multadd>
 8006f00:	ee08 0a10 	vmov	s16, r0
 8006f04:	e7e7      	b.n	8006ed6 <_dtoa_r+0xb26>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bfc8      	it	gt
 8006f0c:	461d      	movgt	r5, r3
 8006f0e:	9b01      	ldr	r3, [sp, #4]
 8006f10:	bfd8      	it	le
 8006f12:	2501      	movle	r5, #1
 8006f14:	441d      	add	r5, r3
 8006f16:	f04f 0800 	mov.w	r8, #0
 8006f1a:	ee18 1a10 	vmov	r1, s16
 8006f1e:	2201      	movs	r2, #1
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fe2b 	bl	8007b7c <__lshift>
 8006f26:	4631      	mov	r1, r6
 8006f28:	ee08 0a10 	vmov	s16, r0
 8006f2c:	f000 fe96 	bl	8007c5c <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	dc91      	bgt.n	8006e58 <_dtoa_r+0xaa8>
 8006f34:	d102      	bne.n	8006f3c <_dtoa_r+0xb8c>
 8006f36:	f01a 0f01 	tst.w	sl, #1
 8006f3a:	d18d      	bne.n	8006e58 <_dtoa_r+0xaa8>
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	461d      	mov	r5, r3
 8006f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f44:	2a30      	cmp	r2, #48	; 0x30
 8006f46:	d0fa      	beq.n	8006f3e <_dtoa_r+0xb8e>
 8006f48:	e6d7      	b.n	8006cfa <_dtoa_r+0x94a>
 8006f4a:	9a01      	ldr	r2, [sp, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d184      	bne.n	8006e5a <_dtoa_r+0xaaa>
 8006f50:	9b00      	ldr	r3, [sp, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2331      	movs	r3, #49	; 0x31
 8006f58:	7013      	strb	r3, [r2, #0]
 8006f5a:	e6ce      	b.n	8006cfa <_dtoa_r+0x94a>
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <_dtoa_r+0xbd4>)
 8006f5e:	f7ff ba95 	b.w	800648c <_dtoa_r+0xdc>
 8006f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f47f aa6e 	bne.w	8006446 <_dtoa_r+0x96>
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <_dtoa_r+0xbd8>)
 8006f6c:	f7ff ba8e 	b.w	800648c <_dtoa_r+0xdc>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dcae      	bgt.n	8006ed4 <_dtoa_r+0xb24>
 8006f76:	9b06      	ldr	r3, [sp, #24]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	f73f aea8 	bgt.w	8006cce <_dtoa_r+0x91e>
 8006f7e:	e7a9      	b.n	8006ed4 <_dtoa_r+0xb24>
 8006f80:	0800a678 	.word	0x0800a678
 8006f84:	0800a478 	.word	0x0800a478
 8006f88:	0800a5f9 	.word	0x0800a5f9

08006f8c <rshift>:
 8006f8c:	6903      	ldr	r3, [r0, #16]
 8006f8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f9a:	f100 0414 	add.w	r4, r0, #20
 8006f9e:	dd45      	ble.n	800702c <rshift+0xa0>
 8006fa0:	f011 011f 	ands.w	r1, r1, #31
 8006fa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006fa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006fac:	d10c      	bne.n	8006fc8 <rshift+0x3c>
 8006fae:	f100 0710 	add.w	r7, r0, #16
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	42b1      	cmp	r1, r6
 8006fb6:	d334      	bcc.n	8007022 <rshift+0x96>
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	1eea      	subs	r2, r5, #3
 8006fbe:	4296      	cmp	r6, r2
 8006fc0:	bf38      	it	cc
 8006fc2:	2300      	movcc	r3, #0
 8006fc4:	4423      	add	r3, r4
 8006fc6:	e015      	b.n	8006ff4 <rshift+0x68>
 8006fc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006fcc:	f1c1 0820 	rsb	r8, r1, #32
 8006fd0:	40cf      	lsrs	r7, r1
 8006fd2:	f105 0e04 	add.w	lr, r5, #4
 8006fd6:	46a1      	mov	r9, r4
 8006fd8:	4576      	cmp	r6, lr
 8006fda:	46f4      	mov	ip, lr
 8006fdc:	d815      	bhi.n	800700a <rshift+0x7e>
 8006fde:	1a9a      	subs	r2, r3, r2
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	3a04      	subs	r2, #4
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	42ae      	cmp	r6, r5
 8006fe8:	bf38      	it	cc
 8006fea:	2200      	movcc	r2, #0
 8006fec:	18a3      	adds	r3, r4, r2
 8006fee:	50a7      	str	r7, [r4, r2]
 8006ff0:	b107      	cbz	r7, 8006ff4 <rshift+0x68>
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	1b1a      	subs	r2, r3, r4
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ffc:	bf08      	it	eq
 8006ffe:	2300      	moveq	r3, #0
 8007000:	6102      	str	r2, [r0, #16]
 8007002:	bf08      	it	eq
 8007004:	6143      	streq	r3, [r0, #20]
 8007006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700a:	f8dc c000 	ldr.w	ip, [ip]
 800700e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007012:	ea4c 0707 	orr.w	r7, ip, r7
 8007016:	f849 7b04 	str.w	r7, [r9], #4
 800701a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800701e:	40cf      	lsrs	r7, r1
 8007020:	e7da      	b.n	8006fd8 <rshift+0x4c>
 8007022:	f851 cb04 	ldr.w	ip, [r1], #4
 8007026:	f847 cf04 	str.w	ip, [r7, #4]!
 800702a:	e7c3      	b.n	8006fb4 <rshift+0x28>
 800702c:	4623      	mov	r3, r4
 800702e:	e7e1      	b.n	8006ff4 <rshift+0x68>

08007030 <__hexdig_fun>:
 8007030:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007034:	2b09      	cmp	r3, #9
 8007036:	d802      	bhi.n	800703e <__hexdig_fun+0xe>
 8007038:	3820      	subs	r0, #32
 800703a:	b2c0      	uxtb	r0, r0
 800703c:	4770      	bx	lr
 800703e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007042:	2b05      	cmp	r3, #5
 8007044:	d801      	bhi.n	800704a <__hexdig_fun+0x1a>
 8007046:	3847      	subs	r0, #71	; 0x47
 8007048:	e7f7      	b.n	800703a <__hexdig_fun+0xa>
 800704a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800704e:	2b05      	cmp	r3, #5
 8007050:	d801      	bhi.n	8007056 <__hexdig_fun+0x26>
 8007052:	3827      	subs	r0, #39	; 0x27
 8007054:	e7f1      	b.n	800703a <__hexdig_fun+0xa>
 8007056:	2000      	movs	r0, #0
 8007058:	4770      	bx	lr
	...

0800705c <__gethex>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	ed2d 8b02 	vpush	{d8}
 8007064:	b089      	sub	sp, #36	; 0x24
 8007066:	ee08 0a10 	vmov	s16, r0
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	4bb4      	ldr	r3, [pc, #720]	; (8007340 <__gethex+0x2e4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	468b      	mov	fp, r1
 8007076:	4690      	mov	r8, r2
 8007078:	f7f9 f8ca 	bl	8000210 <strlen>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	f8db 2000 	ldr.w	r2, [fp]
 8007082:	4403      	add	r3, r0
 8007084:	4682      	mov	sl, r0
 8007086:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	1c93      	adds	r3, r2, #2
 800708e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007092:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007096:	32fe      	adds	r2, #254	; 0xfe
 8007098:	18d1      	adds	r1, r2, r3
 800709a:	461f      	mov	r7, r3
 800709c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80070a0:	9100      	str	r1, [sp, #0]
 80070a2:	2830      	cmp	r0, #48	; 0x30
 80070a4:	d0f8      	beq.n	8007098 <__gethex+0x3c>
 80070a6:	f7ff ffc3 	bl	8007030 <__hexdig_fun>
 80070aa:	4604      	mov	r4, r0
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d13a      	bne.n	8007126 <__gethex+0xca>
 80070b0:	9901      	ldr	r1, [sp, #4]
 80070b2:	4652      	mov	r2, sl
 80070b4:	4638      	mov	r0, r7
 80070b6:	f001 fa33 	bl	8008520 <strncmp>
 80070ba:	4605      	mov	r5, r0
 80070bc:	2800      	cmp	r0, #0
 80070be:	d168      	bne.n	8007192 <__gethex+0x136>
 80070c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80070c4:	eb07 060a 	add.w	r6, r7, sl
 80070c8:	f7ff ffb2 	bl	8007030 <__hexdig_fun>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d062      	beq.n	8007196 <__gethex+0x13a>
 80070d0:	4633      	mov	r3, r6
 80070d2:	7818      	ldrb	r0, [r3, #0]
 80070d4:	2830      	cmp	r0, #48	; 0x30
 80070d6:	461f      	mov	r7, r3
 80070d8:	f103 0301 	add.w	r3, r3, #1
 80070dc:	d0f9      	beq.n	80070d2 <__gethex+0x76>
 80070de:	f7ff ffa7 	bl	8007030 <__hexdig_fun>
 80070e2:	2301      	movs	r3, #1
 80070e4:	fab0 f480 	clz	r4, r0
 80070e8:	0964      	lsrs	r4, r4, #5
 80070ea:	4635      	mov	r5, r6
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	463a      	mov	r2, r7
 80070f0:	4616      	mov	r6, r2
 80070f2:	3201      	adds	r2, #1
 80070f4:	7830      	ldrb	r0, [r6, #0]
 80070f6:	f7ff ff9b 	bl	8007030 <__hexdig_fun>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d1f8      	bne.n	80070f0 <__gethex+0x94>
 80070fe:	9901      	ldr	r1, [sp, #4]
 8007100:	4652      	mov	r2, sl
 8007102:	4630      	mov	r0, r6
 8007104:	f001 fa0c 	bl	8008520 <strncmp>
 8007108:	b980      	cbnz	r0, 800712c <__gethex+0xd0>
 800710a:	b94d      	cbnz	r5, 8007120 <__gethex+0xc4>
 800710c:	eb06 050a 	add.w	r5, r6, sl
 8007110:	462a      	mov	r2, r5
 8007112:	4616      	mov	r6, r2
 8007114:	3201      	adds	r2, #1
 8007116:	7830      	ldrb	r0, [r6, #0]
 8007118:	f7ff ff8a 	bl	8007030 <__hexdig_fun>
 800711c:	2800      	cmp	r0, #0
 800711e:	d1f8      	bne.n	8007112 <__gethex+0xb6>
 8007120:	1bad      	subs	r5, r5, r6
 8007122:	00ad      	lsls	r5, r5, #2
 8007124:	e004      	b.n	8007130 <__gethex+0xd4>
 8007126:	2400      	movs	r4, #0
 8007128:	4625      	mov	r5, r4
 800712a:	e7e0      	b.n	80070ee <__gethex+0x92>
 800712c:	2d00      	cmp	r5, #0
 800712e:	d1f7      	bne.n	8007120 <__gethex+0xc4>
 8007130:	7833      	ldrb	r3, [r6, #0]
 8007132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007136:	2b50      	cmp	r3, #80	; 0x50
 8007138:	d13b      	bne.n	80071b2 <__gethex+0x156>
 800713a:	7873      	ldrb	r3, [r6, #1]
 800713c:	2b2b      	cmp	r3, #43	; 0x2b
 800713e:	d02c      	beq.n	800719a <__gethex+0x13e>
 8007140:	2b2d      	cmp	r3, #45	; 0x2d
 8007142:	d02e      	beq.n	80071a2 <__gethex+0x146>
 8007144:	1c71      	adds	r1, r6, #1
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	7808      	ldrb	r0, [r1, #0]
 800714c:	f7ff ff70 	bl	8007030 <__hexdig_fun>
 8007150:	1e43      	subs	r3, r0, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b18      	cmp	r3, #24
 8007156:	d82c      	bhi.n	80071b2 <__gethex+0x156>
 8007158:	f1a0 0210 	sub.w	r2, r0, #16
 800715c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007160:	f7ff ff66 	bl	8007030 <__hexdig_fun>
 8007164:	1e43      	subs	r3, r0, #1
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b18      	cmp	r3, #24
 800716a:	d91d      	bls.n	80071a8 <__gethex+0x14c>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	d000      	beq.n	8007174 <__gethex+0x118>
 8007172:	4252      	negs	r2, r2
 8007174:	4415      	add	r5, r2
 8007176:	f8cb 1000 	str.w	r1, [fp]
 800717a:	b1e4      	cbz	r4, 80071b6 <__gethex+0x15a>
 800717c:	9b00      	ldr	r3, [sp, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf14      	ite	ne
 8007182:	2700      	movne	r7, #0
 8007184:	2706      	moveq	r7, #6
 8007186:	4638      	mov	r0, r7
 8007188:	b009      	add	sp, #36	; 0x24
 800718a:	ecbd 8b02 	vpop	{d8}
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	463e      	mov	r6, r7
 8007194:	4625      	mov	r5, r4
 8007196:	2401      	movs	r4, #1
 8007198:	e7ca      	b.n	8007130 <__gethex+0xd4>
 800719a:	f04f 0900 	mov.w	r9, #0
 800719e:	1cb1      	adds	r1, r6, #2
 80071a0:	e7d3      	b.n	800714a <__gethex+0xee>
 80071a2:	f04f 0901 	mov.w	r9, #1
 80071a6:	e7fa      	b.n	800719e <__gethex+0x142>
 80071a8:	230a      	movs	r3, #10
 80071aa:	fb03 0202 	mla	r2, r3, r2, r0
 80071ae:	3a10      	subs	r2, #16
 80071b0:	e7d4      	b.n	800715c <__gethex+0x100>
 80071b2:	4631      	mov	r1, r6
 80071b4:	e7df      	b.n	8007176 <__gethex+0x11a>
 80071b6:	1bf3      	subs	r3, r6, r7
 80071b8:	3b01      	subs	r3, #1
 80071ba:	4621      	mov	r1, r4
 80071bc:	2b07      	cmp	r3, #7
 80071be:	dc0b      	bgt.n	80071d8 <__gethex+0x17c>
 80071c0:	ee18 0a10 	vmov	r0, s16
 80071c4:	f000 fa7e 	bl	80076c4 <_Balloc>
 80071c8:	4604      	mov	r4, r0
 80071ca:	b940      	cbnz	r0, 80071de <__gethex+0x182>
 80071cc:	4b5d      	ldr	r3, [pc, #372]	; (8007344 <__gethex+0x2e8>)
 80071ce:	4602      	mov	r2, r0
 80071d0:	21de      	movs	r1, #222	; 0xde
 80071d2:	485d      	ldr	r0, [pc, #372]	; (8007348 <__gethex+0x2ec>)
 80071d4:	f001 f9c6 	bl	8008564 <__assert_func>
 80071d8:	3101      	adds	r1, #1
 80071da:	105b      	asrs	r3, r3, #1
 80071dc:	e7ee      	b.n	80071bc <__gethex+0x160>
 80071de:	f100 0914 	add.w	r9, r0, #20
 80071e2:	f04f 0b00 	mov.w	fp, #0
 80071e6:	f1ca 0301 	rsb	r3, sl, #1
 80071ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80071ee:	f8cd b000 	str.w	fp, [sp]
 80071f2:	9306      	str	r3, [sp, #24]
 80071f4:	42b7      	cmp	r7, r6
 80071f6:	d340      	bcc.n	800727a <__gethex+0x21e>
 80071f8:	9802      	ldr	r0, [sp, #8]
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	f840 3b04 	str.w	r3, [r0], #4
 8007200:	eba0 0009 	sub.w	r0, r0, r9
 8007204:	1080      	asrs	r0, r0, #2
 8007206:	0146      	lsls	r6, r0, #5
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fb4c 	bl	80078a8 <__hi0bits>
 8007210:	1a30      	subs	r0, r6, r0
 8007212:	f8d8 6000 	ldr.w	r6, [r8]
 8007216:	42b0      	cmp	r0, r6
 8007218:	dd63      	ble.n	80072e2 <__gethex+0x286>
 800721a:	1b87      	subs	r7, r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fef0 	bl	8008004 <__any_on>
 8007224:	4682      	mov	sl, r0
 8007226:	b1a8      	cbz	r0, 8007254 <__gethex+0x1f8>
 8007228:	1e7b      	subs	r3, r7, #1
 800722a:	1159      	asrs	r1, r3, #5
 800722c:	f003 021f 	and.w	r2, r3, #31
 8007230:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007234:	f04f 0a01 	mov.w	sl, #1
 8007238:	fa0a f202 	lsl.w	r2, sl, r2
 800723c:	420a      	tst	r2, r1
 800723e:	d009      	beq.n	8007254 <__gethex+0x1f8>
 8007240:	4553      	cmp	r3, sl
 8007242:	dd05      	ble.n	8007250 <__gethex+0x1f4>
 8007244:	1eb9      	subs	r1, r7, #2
 8007246:	4620      	mov	r0, r4
 8007248:	f000 fedc 	bl	8008004 <__any_on>
 800724c:	2800      	cmp	r0, #0
 800724e:	d145      	bne.n	80072dc <__gethex+0x280>
 8007250:	f04f 0a02 	mov.w	sl, #2
 8007254:	4639      	mov	r1, r7
 8007256:	4620      	mov	r0, r4
 8007258:	f7ff fe98 	bl	8006f8c <rshift>
 800725c:	443d      	add	r5, r7
 800725e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007262:	42ab      	cmp	r3, r5
 8007264:	da4c      	bge.n	8007300 <__gethex+0x2a4>
 8007266:	ee18 0a10 	vmov	r0, s16
 800726a:	4621      	mov	r1, r4
 800726c:	f000 fa6a 	bl	8007744 <_Bfree>
 8007270:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007272:	2300      	movs	r3, #0
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	27a3      	movs	r7, #163	; 0xa3
 8007278:	e785      	b.n	8007186 <__gethex+0x12a>
 800727a:	1e73      	subs	r3, r6, #1
 800727c:	9a05      	ldr	r2, [sp, #20]
 800727e:	9303      	str	r3, [sp, #12]
 8007280:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007284:	4293      	cmp	r3, r2
 8007286:	d019      	beq.n	80072bc <__gethex+0x260>
 8007288:	f1bb 0f20 	cmp.w	fp, #32
 800728c:	d107      	bne.n	800729e <__gethex+0x242>
 800728e:	9b02      	ldr	r3, [sp, #8]
 8007290:	9a00      	ldr	r2, [sp, #0]
 8007292:	f843 2b04 	str.w	r2, [r3], #4
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	469b      	mov	fp, r3
 800729e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80072a2:	f7ff fec5 	bl	8007030 <__hexdig_fun>
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	f000 000f 	and.w	r0, r0, #15
 80072ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80072b0:	4303      	orrs	r3, r0
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	f10b 0b04 	add.w	fp, fp, #4
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	e00d      	b.n	80072d8 <__gethex+0x27c>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	9a06      	ldr	r2, [sp, #24]
 80072c0:	4413      	add	r3, r2
 80072c2:	42bb      	cmp	r3, r7
 80072c4:	d3e0      	bcc.n	8007288 <__gethex+0x22c>
 80072c6:	4618      	mov	r0, r3
 80072c8:	9901      	ldr	r1, [sp, #4]
 80072ca:	9307      	str	r3, [sp, #28]
 80072cc:	4652      	mov	r2, sl
 80072ce:	f001 f927 	bl	8008520 <strncmp>
 80072d2:	9b07      	ldr	r3, [sp, #28]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1d7      	bne.n	8007288 <__gethex+0x22c>
 80072d8:	461e      	mov	r6, r3
 80072da:	e78b      	b.n	80071f4 <__gethex+0x198>
 80072dc:	f04f 0a03 	mov.w	sl, #3
 80072e0:	e7b8      	b.n	8007254 <__gethex+0x1f8>
 80072e2:	da0a      	bge.n	80072fa <__gethex+0x29e>
 80072e4:	1a37      	subs	r7, r6, r0
 80072e6:	4621      	mov	r1, r4
 80072e8:	ee18 0a10 	vmov	r0, s16
 80072ec:	463a      	mov	r2, r7
 80072ee:	f000 fc45 	bl	8007b7c <__lshift>
 80072f2:	1bed      	subs	r5, r5, r7
 80072f4:	4604      	mov	r4, r0
 80072f6:	f100 0914 	add.w	r9, r0, #20
 80072fa:	f04f 0a00 	mov.w	sl, #0
 80072fe:	e7ae      	b.n	800725e <__gethex+0x202>
 8007300:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007304:	42a8      	cmp	r0, r5
 8007306:	dd72      	ble.n	80073ee <__gethex+0x392>
 8007308:	1b45      	subs	r5, r0, r5
 800730a:	42ae      	cmp	r6, r5
 800730c:	dc36      	bgt.n	800737c <__gethex+0x320>
 800730e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d02a      	beq.n	800736c <__gethex+0x310>
 8007316:	2b03      	cmp	r3, #3
 8007318:	d02c      	beq.n	8007374 <__gethex+0x318>
 800731a:	2b01      	cmp	r3, #1
 800731c:	d11c      	bne.n	8007358 <__gethex+0x2fc>
 800731e:	42ae      	cmp	r6, r5
 8007320:	d11a      	bne.n	8007358 <__gethex+0x2fc>
 8007322:	2e01      	cmp	r6, #1
 8007324:	d112      	bne.n	800734c <__gethex+0x2f0>
 8007326:	9a04      	ldr	r2, [sp, #16]
 8007328:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	2301      	movs	r3, #1
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	f8c9 3000 	str.w	r3, [r9]
 8007336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007338:	2762      	movs	r7, #98	; 0x62
 800733a:	601c      	str	r4, [r3, #0]
 800733c:	e723      	b.n	8007186 <__gethex+0x12a>
 800733e:	bf00      	nop
 8007340:	0800a6f0 	.word	0x0800a6f0
 8007344:	0800a678 	.word	0x0800a678
 8007348:	0800a689 	.word	0x0800a689
 800734c:	1e71      	subs	r1, r6, #1
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fe58 	bl	8008004 <__any_on>
 8007354:	2800      	cmp	r0, #0
 8007356:	d1e6      	bne.n	8007326 <__gethex+0x2ca>
 8007358:	ee18 0a10 	vmov	r0, s16
 800735c:	4621      	mov	r1, r4
 800735e:	f000 f9f1 	bl	8007744 <_Bfree>
 8007362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007364:	2300      	movs	r3, #0
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	2750      	movs	r7, #80	; 0x50
 800736a:	e70c      	b.n	8007186 <__gethex+0x12a>
 800736c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f2      	bne.n	8007358 <__gethex+0x2fc>
 8007372:	e7d8      	b.n	8007326 <__gethex+0x2ca>
 8007374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1d5      	bne.n	8007326 <__gethex+0x2ca>
 800737a:	e7ed      	b.n	8007358 <__gethex+0x2fc>
 800737c:	1e6f      	subs	r7, r5, #1
 800737e:	f1ba 0f00 	cmp.w	sl, #0
 8007382:	d131      	bne.n	80073e8 <__gethex+0x38c>
 8007384:	b127      	cbz	r7, 8007390 <__gethex+0x334>
 8007386:	4639      	mov	r1, r7
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fe3b 	bl	8008004 <__any_on>
 800738e:	4682      	mov	sl, r0
 8007390:	117b      	asrs	r3, r7, #5
 8007392:	2101      	movs	r1, #1
 8007394:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007398:	f007 071f 	and.w	r7, r7, #31
 800739c:	fa01 f707 	lsl.w	r7, r1, r7
 80073a0:	421f      	tst	r7, r3
 80073a2:	4629      	mov	r1, r5
 80073a4:	4620      	mov	r0, r4
 80073a6:	bf18      	it	ne
 80073a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80073ac:	1b76      	subs	r6, r6, r5
 80073ae:	f7ff fded 	bl	8006f8c <rshift>
 80073b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80073b6:	2702      	movs	r7, #2
 80073b8:	f1ba 0f00 	cmp.w	sl, #0
 80073bc:	d048      	beq.n	8007450 <__gethex+0x3f4>
 80073be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d015      	beq.n	80073f2 <__gethex+0x396>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d017      	beq.n	80073fa <__gethex+0x39e>
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d109      	bne.n	80073e2 <__gethex+0x386>
 80073ce:	f01a 0f02 	tst.w	sl, #2
 80073d2:	d006      	beq.n	80073e2 <__gethex+0x386>
 80073d4:	f8d9 0000 	ldr.w	r0, [r9]
 80073d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80073dc:	f01a 0f01 	tst.w	sl, #1
 80073e0:	d10e      	bne.n	8007400 <__gethex+0x3a4>
 80073e2:	f047 0710 	orr.w	r7, r7, #16
 80073e6:	e033      	b.n	8007450 <__gethex+0x3f4>
 80073e8:	f04f 0a01 	mov.w	sl, #1
 80073ec:	e7d0      	b.n	8007390 <__gethex+0x334>
 80073ee:	2701      	movs	r7, #1
 80073f0:	e7e2      	b.n	80073b8 <__gethex+0x35c>
 80073f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073f4:	f1c3 0301 	rsb	r3, r3, #1
 80073f8:	9315      	str	r3, [sp, #84]	; 0x54
 80073fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <__gethex+0x386>
 8007400:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007404:	f104 0314 	add.w	r3, r4, #20
 8007408:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800740c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007410:	f04f 0c00 	mov.w	ip, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f853 2b04 	ldr.w	r2, [r3], #4
 800741a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800741e:	d01c      	beq.n	800745a <__gethex+0x3fe>
 8007420:	3201      	adds	r2, #1
 8007422:	6002      	str	r2, [r0, #0]
 8007424:	2f02      	cmp	r7, #2
 8007426:	f104 0314 	add.w	r3, r4, #20
 800742a:	d13f      	bne.n	80074ac <__gethex+0x450>
 800742c:	f8d8 2000 	ldr.w	r2, [r8]
 8007430:	3a01      	subs	r2, #1
 8007432:	42b2      	cmp	r2, r6
 8007434:	d10a      	bne.n	800744c <__gethex+0x3f0>
 8007436:	1171      	asrs	r1, r6, #5
 8007438:	2201      	movs	r2, #1
 800743a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800743e:	f006 061f 	and.w	r6, r6, #31
 8007442:	fa02 f606 	lsl.w	r6, r2, r6
 8007446:	421e      	tst	r6, r3
 8007448:	bf18      	it	ne
 800744a:	4617      	movne	r7, r2
 800744c:	f047 0720 	orr.w	r7, r7, #32
 8007450:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007452:	601c      	str	r4, [r3, #0]
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	601d      	str	r5, [r3, #0]
 8007458:	e695      	b.n	8007186 <__gethex+0x12a>
 800745a:	4299      	cmp	r1, r3
 800745c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007460:	d8d8      	bhi.n	8007414 <__gethex+0x3b8>
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	459b      	cmp	fp, r3
 8007466:	db19      	blt.n	800749c <__gethex+0x440>
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	ee18 0a10 	vmov	r0, s16
 800746e:	3101      	adds	r1, #1
 8007470:	f000 f928 	bl	80076c4 <_Balloc>
 8007474:	4681      	mov	r9, r0
 8007476:	b918      	cbnz	r0, 8007480 <__gethex+0x424>
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <__gethex+0x488>)
 800747a:	4602      	mov	r2, r0
 800747c:	2184      	movs	r1, #132	; 0x84
 800747e:	e6a8      	b.n	80071d2 <__gethex+0x176>
 8007480:	6922      	ldr	r2, [r4, #16]
 8007482:	3202      	adds	r2, #2
 8007484:	f104 010c 	add.w	r1, r4, #12
 8007488:	0092      	lsls	r2, r2, #2
 800748a:	300c      	adds	r0, #12
 800748c:	f000 f90c 	bl	80076a8 <memcpy>
 8007490:	4621      	mov	r1, r4
 8007492:	ee18 0a10 	vmov	r0, s16
 8007496:	f000 f955 	bl	8007744 <_Bfree>
 800749a:	464c      	mov	r4, r9
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074a4:	6122      	str	r2, [r4, #16]
 80074a6:	2201      	movs	r2, #1
 80074a8:	615a      	str	r2, [r3, #20]
 80074aa:	e7bb      	b.n	8007424 <__gethex+0x3c8>
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	455a      	cmp	r2, fp
 80074b0:	dd0b      	ble.n	80074ca <__gethex+0x46e>
 80074b2:	2101      	movs	r1, #1
 80074b4:	4620      	mov	r0, r4
 80074b6:	f7ff fd69 	bl	8006f8c <rshift>
 80074ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074be:	3501      	adds	r5, #1
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	f6ff aed0 	blt.w	8007266 <__gethex+0x20a>
 80074c6:	2701      	movs	r7, #1
 80074c8:	e7c0      	b.n	800744c <__gethex+0x3f0>
 80074ca:	f016 061f 	ands.w	r6, r6, #31
 80074ce:	d0fa      	beq.n	80074c6 <__gethex+0x46a>
 80074d0:	4453      	add	r3, sl
 80074d2:	f1c6 0620 	rsb	r6, r6, #32
 80074d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80074da:	f000 f9e5 	bl	80078a8 <__hi0bits>
 80074de:	42b0      	cmp	r0, r6
 80074e0:	dbe7      	blt.n	80074b2 <__gethex+0x456>
 80074e2:	e7f0      	b.n	80074c6 <__gethex+0x46a>
 80074e4:	0800a678 	.word	0x0800a678

080074e8 <L_shift>:
 80074e8:	f1c2 0208 	rsb	r2, r2, #8
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	b570      	push	{r4, r5, r6, lr}
 80074f0:	f1c2 0620 	rsb	r6, r2, #32
 80074f4:	6843      	ldr	r3, [r0, #4]
 80074f6:	6804      	ldr	r4, [r0, #0]
 80074f8:	fa03 f506 	lsl.w	r5, r3, r6
 80074fc:	432c      	orrs	r4, r5
 80074fe:	40d3      	lsrs	r3, r2
 8007500:	6004      	str	r4, [r0, #0]
 8007502:	f840 3f04 	str.w	r3, [r0, #4]!
 8007506:	4288      	cmp	r0, r1
 8007508:	d3f4      	bcc.n	80074f4 <L_shift+0xc>
 800750a:	bd70      	pop	{r4, r5, r6, pc}

0800750c <__match>:
 800750c:	b530      	push	{r4, r5, lr}
 800750e:	6803      	ldr	r3, [r0, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007516:	b914      	cbnz	r4, 800751e <__match+0x12>
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	2001      	movs	r0, #1
 800751c:	bd30      	pop	{r4, r5, pc}
 800751e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007522:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007526:	2d19      	cmp	r5, #25
 8007528:	bf98      	it	ls
 800752a:	3220      	addls	r2, #32
 800752c:	42a2      	cmp	r2, r4
 800752e:	d0f0      	beq.n	8007512 <__match+0x6>
 8007530:	2000      	movs	r0, #0
 8007532:	e7f3      	b.n	800751c <__match+0x10>

08007534 <__hexnan>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	680b      	ldr	r3, [r1, #0]
 800753a:	115e      	asrs	r6, r3, #5
 800753c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007540:	f013 031f 	ands.w	r3, r3, #31
 8007544:	b087      	sub	sp, #28
 8007546:	bf18      	it	ne
 8007548:	3604      	addne	r6, #4
 800754a:	2500      	movs	r5, #0
 800754c:	1f37      	subs	r7, r6, #4
 800754e:	4690      	mov	r8, r2
 8007550:	6802      	ldr	r2, [r0, #0]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	4682      	mov	sl, r0
 8007556:	f846 5c04 	str.w	r5, [r6, #-4]
 800755a:	46b9      	mov	r9, r7
 800755c:	463c      	mov	r4, r7
 800755e:	9502      	str	r5, [sp, #8]
 8007560:	46ab      	mov	fp, r5
 8007562:	7851      	ldrb	r1, [r2, #1]
 8007564:	1c53      	adds	r3, r2, #1
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	b341      	cbz	r1, 80075bc <__hexnan+0x88>
 800756a:	4608      	mov	r0, r1
 800756c:	9205      	str	r2, [sp, #20]
 800756e:	9104      	str	r1, [sp, #16]
 8007570:	f7ff fd5e 	bl	8007030 <__hexdig_fun>
 8007574:	2800      	cmp	r0, #0
 8007576:	d14f      	bne.n	8007618 <__hexnan+0xe4>
 8007578:	9904      	ldr	r1, [sp, #16]
 800757a:	9a05      	ldr	r2, [sp, #20]
 800757c:	2920      	cmp	r1, #32
 800757e:	d818      	bhi.n	80075b2 <__hexnan+0x7e>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	459b      	cmp	fp, r3
 8007584:	dd13      	ble.n	80075ae <__hexnan+0x7a>
 8007586:	454c      	cmp	r4, r9
 8007588:	d206      	bcs.n	8007598 <__hexnan+0x64>
 800758a:	2d07      	cmp	r5, #7
 800758c:	dc04      	bgt.n	8007598 <__hexnan+0x64>
 800758e:	462a      	mov	r2, r5
 8007590:	4649      	mov	r1, r9
 8007592:	4620      	mov	r0, r4
 8007594:	f7ff ffa8 	bl	80074e8 <L_shift>
 8007598:	4544      	cmp	r4, r8
 800759a:	d950      	bls.n	800763e <__hexnan+0x10a>
 800759c:	2300      	movs	r3, #0
 800759e:	f1a4 0904 	sub.w	r9, r4, #4
 80075a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80075a6:	f8cd b008 	str.w	fp, [sp, #8]
 80075aa:	464c      	mov	r4, r9
 80075ac:	461d      	mov	r5, r3
 80075ae:	9a03      	ldr	r2, [sp, #12]
 80075b0:	e7d7      	b.n	8007562 <__hexnan+0x2e>
 80075b2:	2929      	cmp	r1, #41	; 0x29
 80075b4:	d156      	bne.n	8007664 <__hexnan+0x130>
 80075b6:	3202      	adds	r2, #2
 80075b8:	f8ca 2000 	str.w	r2, [sl]
 80075bc:	f1bb 0f00 	cmp.w	fp, #0
 80075c0:	d050      	beq.n	8007664 <__hexnan+0x130>
 80075c2:	454c      	cmp	r4, r9
 80075c4:	d206      	bcs.n	80075d4 <__hexnan+0xa0>
 80075c6:	2d07      	cmp	r5, #7
 80075c8:	dc04      	bgt.n	80075d4 <__hexnan+0xa0>
 80075ca:	462a      	mov	r2, r5
 80075cc:	4649      	mov	r1, r9
 80075ce:	4620      	mov	r0, r4
 80075d0:	f7ff ff8a 	bl	80074e8 <L_shift>
 80075d4:	4544      	cmp	r4, r8
 80075d6:	d934      	bls.n	8007642 <__hexnan+0x10e>
 80075d8:	f1a8 0204 	sub.w	r2, r8, #4
 80075dc:	4623      	mov	r3, r4
 80075de:	f853 1b04 	ldr.w	r1, [r3], #4
 80075e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80075e6:	429f      	cmp	r7, r3
 80075e8:	d2f9      	bcs.n	80075de <__hexnan+0xaa>
 80075ea:	1b3b      	subs	r3, r7, r4
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	3304      	adds	r3, #4
 80075f2:	3401      	adds	r4, #1
 80075f4:	3e03      	subs	r6, #3
 80075f6:	42b4      	cmp	r4, r6
 80075f8:	bf88      	it	hi
 80075fa:	2304      	movhi	r3, #4
 80075fc:	4443      	add	r3, r8
 80075fe:	2200      	movs	r2, #0
 8007600:	f843 2b04 	str.w	r2, [r3], #4
 8007604:	429f      	cmp	r7, r3
 8007606:	d2fb      	bcs.n	8007600 <__hexnan+0xcc>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	b91b      	cbnz	r3, 8007614 <__hexnan+0xe0>
 800760c:	4547      	cmp	r7, r8
 800760e:	d127      	bne.n	8007660 <__hexnan+0x12c>
 8007610:	2301      	movs	r3, #1
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	2005      	movs	r0, #5
 8007616:	e026      	b.n	8007666 <__hexnan+0x132>
 8007618:	3501      	adds	r5, #1
 800761a:	2d08      	cmp	r5, #8
 800761c:	f10b 0b01 	add.w	fp, fp, #1
 8007620:	dd06      	ble.n	8007630 <__hexnan+0xfc>
 8007622:	4544      	cmp	r4, r8
 8007624:	d9c3      	bls.n	80075ae <__hexnan+0x7a>
 8007626:	2300      	movs	r3, #0
 8007628:	f844 3c04 	str.w	r3, [r4, #-4]
 800762c:	2501      	movs	r5, #1
 800762e:	3c04      	subs	r4, #4
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	f000 000f 	and.w	r0, r0, #15
 8007636:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	e7b7      	b.n	80075ae <__hexnan+0x7a>
 800763e:	2508      	movs	r5, #8
 8007640:	e7b5      	b.n	80075ae <__hexnan+0x7a>
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0df      	beq.n	8007608 <__hexnan+0xd4>
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	f1c3 0320 	rsb	r3, r3, #32
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007658:	401a      	ands	r2, r3
 800765a:	f846 2c04 	str.w	r2, [r6, #-4]
 800765e:	e7d3      	b.n	8007608 <__hexnan+0xd4>
 8007660:	3f04      	subs	r7, #4
 8007662:	e7d1      	b.n	8007608 <__hexnan+0xd4>
 8007664:	2004      	movs	r0, #4
 8007666:	b007      	add	sp, #28
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800766c <_localeconv_r>:
 800766c:	4800      	ldr	r0, [pc, #0]	; (8007670 <_localeconv_r+0x4>)
 800766e:	4770      	bx	lr
 8007670:	20000168 	.word	0x20000168

08007674 <malloc>:
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <malloc+0xc>)
 8007676:	4601      	mov	r1, r0
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	f000 bd67 	b.w	800814c <_malloc_r>
 800767e:	bf00      	nop
 8007680:	20000010 	.word	0x20000010

08007684 <__ascii_mbtowc>:
 8007684:	b082      	sub	sp, #8
 8007686:	b901      	cbnz	r1, 800768a <__ascii_mbtowc+0x6>
 8007688:	a901      	add	r1, sp, #4
 800768a:	b142      	cbz	r2, 800769e <__ascii_mbtowc+0x1a>
 800768c:	b14b      	cbz	r3, 80076a2 <__ascii_mbtowc+0x1e>
 800768e:	7813      	ldrb	r3, [r2, #0]
 8007690:	600b      	str	r3, [r1, #0]
 8007692:	7812      	ldrb	r2, [r2, #0]
 8007694:	1e10      	subs	r0, r2, #0
 8007696:	bf18      	it	ne
 8007698:	2001      	movne	r0, #1
 800769a:	b002      	add	sp, #8
 800769c:	4770      	bx	lr
 800769e:	4610      	mov	r0, r2
 80076a0:	e7fb      	b.n	800769a <__ascii_mbtowc+0x16>
 80076a2:	f06f 0001 	mvn.w	r0, #1
 80076a6:	e7f8      	b.n	800769a <__ascii_mbtowc+0x16>

080076a8 <memcpy>:
 80076a8:	440a      	add	r2, r1
 80076aa:	4291      	cmp	r1, r2
 80076ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b0:	d100      	bne.n	80076b4 <memcpy+0xc>
 80076b2:	4770      	bx	lr
 80076b4:	b510      	push	{r4, lr}
 80076b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076be:	4291      	cmp	r1, r2
 80076c0:	d1f9      	bne.n	80076b6 <memcpy+0xe>
 80076c2:	bd10      	pop	{r4, pc}

080076c4 <_Balloc>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076c8:	4604      	mov	r4, r0
 80076ca:	460d      	mov	r5, r1
 80076cc:	b976      	cbnz	r6, 80076ec <_Balloc+0x28>
 80076ce:	2010      	movs	r0, #16
 80076d0:	f7ff ffd0 	bl	8007674 <malloc>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6260      	str	r0, [r4, #36]	; 0x24
 80076d8:	b920      	cbnz	r0, 80076e4 <_Balloc+0x20>
 80076da:	4b18      	ldr	r3, [pc, #96]	; (800773c <_Balloc+0x78>)
 80076dc:	4818      	ldr	r0, [pc, #96]	; (8007740 <_Balloc+0x7c>)
 80076de:	2166      	movs	r1, #102	; 0x66
 80076e0:	f000 ff40 	bl	8008564 <__assert_func>
 80076e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e8:	6006      	str	r6, [r0, #0]
 80076ea:	60c6      	str	r6, [r0, #12]
 80076ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076ee:	68f3      	ldr	r3, [r6, #12]
 80076f0:	b183      	cbz	r3, 8007714 <_Balloc+0x50>
 80076f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076fa:	b9b8      	cbnz	r0, 800772c <_Balloc+0x68>
 80076fc:	2101      	movs	r1, #1
 80076fe:	fa01 f605 	lsl.w	r6, r1, r5
 8007702:	1d72      	adds	r2, r6, #5
 8007704:	0092      	lsls	r2, r2, #2
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fc9d 	bl	8008046 <_calloc_r>
 800770c:	b160      	cbz	r0, 8007728 <_Balloc+0x64>
 800770e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007712:	e00e      	b.n	8007732 <_Balloc+0x6e>
 8007714:	2221      	movs	r2, #33	; 0x21
 8007716:	2104      	movs	r1, #4
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fc94 	bl	8008046 <_calloc_r>
 800771e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007720:	60f0      	str	r0, [r6, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e4      	bne.n	80076f2 <_Balloc+0x2e>
 8007728:	2000      	movs	r0, #0
 800772a:	bd70      	pop	{r4, r5, r6, pc}
 800772c:	6802      	ldr	r2, [r0, #0]
 800772e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007732:	2300      	movs	r3, #0
 8007734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007738:	e7f7      	b.n	800772a <_Balloc+0x66>
 800773a:	bf00      	nop
 800773c:	0800a606 	.word	0x0800a606
 8007740:	0800a704 	.word	0x0800a704

08007744 <_Bfree>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007748:	4605      	mov	r5, r0
 800774a:	460c      	mov	r4, r1
 800774c:	b976      	cbnz	r6, 800776c <_Bfree+0x28>
 800774e:	2010      	movs	r0, #16
 8007750:	f7ff ff90 	bl	8007674 <malloc>
 8007754:	4602      	mov	r2, r0
 8007756:	6268      	str	r0, [r5, #36]	; 0x24
 8007758:	b920      	cbnz	r0, 8007764 <_Bfree+0x20>
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <_Bfree+0x3c>)
 800775c:	4809      	ldr	r0, [pc, #36]	; (8007784 <_Bfree+0x40>)
 800775e:	218a      	movs	r1, #138	; 0x8a
 8007760:	f000 ff00 	bl	8008564 <__assert_func>
 8007764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007768:	6006      	str	r6, [r0, #0]
 800776a:	60c6      	str	r6, [r0, #12]
 800776c:	b13c      	cbz	r4, 800777e <_Bfree+0x3a>
 800776e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007770:	6862      	ldr	r2, [r4, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007778:	6021      	str	r1, [r4, #0]
 800777a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	0800a606 	.word	0x0800a606
 8007784:	0800a704 	.word	0x0800a704

08007788 <__multadd>:
 8007788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	690d      	ldr	r5, [r1, #16]
 800778e:	4607      	mov	r7, r0
 8007790:	460c      	mov	r4, r1
 8007792:	461e      	mov	r6, r3
 8007794:	f101 0c14 	add.w	ip, r1, #20
 8007798:	2000      	movs	r0, #0
 800779a:	f8dc 3000 	ldr.w	r3, [ip]
 800779e:	b299      	uxth	r1, r3
 80077a0:	fb02 6101 	mla	r1, r2, r1, r6
 80077a4:	0c1e      	lsrs	r6, r3, #16
 80077a6:	0c0b      	lsrs	r3, r1, #16
 80077a8:	fb02 3306 	mla	r3, r2, r6, r3
 80077ac:	b289      	uxth	r1, r1
 80077ae:	3001      	adds	r0, #1
 80077b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077b4:	4285      	cmp	r5, r0
 80077b6:	f84c 1b04 	str.w	r1, [ip], #4
 80077ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077be:	dcec      	bgt.n	800779a <__multadd+0x12>
 80077c0:	b30e      	cbz	r6, 8007806 <__multadd+0x7e>
 80077c2:	68a3      	ldr	r3, [r4, #8]
 80077c4:	42ab      	cmp	r3, r5
 80077c6:	dc19      	bgt.n	80077fc <__multadd+0x74>
 80077c8:	6861      	ldr	r1, [r4, #4]
 80077ca:	4638      	mov	r0, r7
 80077cc:	3101      	adds	r1, #1
 80077ce:	f7ff ff79 	bl	80076c4 <_Balloc>
 80077d2:	4680      	mov	r8, r0
 80077d4:	b928      	cbnz	r0, 80077e2 <__multadd+0x5a>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <__multadd+0x84>)
 80077da:	480d      	ldr	r0, [pc, #52]	; (8007810 <__multadd+0x88>)
 80077dc:	21b5      	movs	r1, #181	; 0xb5
 80077de:	f000 fec1 	bl	8008564 <__assert_func>
 80077e2:	6922      	ldr	r2, [r4, #16]
 80077e4:	3202      	adds	r2, #2
 80077e6:	f104 010c 	add.w	r1, r4, #12
 80077ea:	0092      	lsls	r2, r2, #2
 80077ec:	300c      	adds	r0, #12
 80077ee:	f7ff ff5b 	bl	80076a8 <memcpy>
 80077f2:	4621      	mov	r1, r4
 80077f4:	4638      	mov	r0, r7
 80077f6:	f7ff ffa5 	bl	8007744 <_Bfree>
 80077fa:	4644      	mov	r4, r8
 80077fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007800:	3501      	adds	r5, #1
 8007802:	615e      	str	r6, [r3, #20]
 8007804:	6125      	str	r5, [r4, #16]
 8007806:	4620      	mov	r0, r4
 8007808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800780c:	0800a678 	.word	0x0800a678
 8007810:	0800a704 	.word	0x0800a704

08007814 <__s2b>:
 8007814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007818:	460c      	mov	r4, r1
 800781a:	4615      	mov	r5, r2
 800781c:	461f      	mov	r7, r3
 800781e:	2209      	movs	r2, #9
 8007820:	3308      	adds	r3, #8
 8007822:	4606      	mov	r6, r0
 8007824:	fb93 f3f2 	sdiv	r3, r3, r2
 8007828:	2100      	movs	r1, #0
 800782a:	2201      	movs	r2, #1
 800782c:	429a      	cmp	r2, r3
 800782e:	db09      	blt.n	8007844 <__s2b+0x30>
 8007830:	4630      	mov	r0, r6
 8007832:	f7ff ff47 	bl	80076c4 <_Balloc>
 8007836:	b940      	cbnz	r0, 800784a <__s2b+0x36>
 8007838:	4602      	mov	r2, r0
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <__s2b+0x8c>)
 800783c:	4819      	ldr	r0, [pc, #100]	; (80078a4 <__s2b+0x90>)
 800783e:	21ce      	movs	r1, #206	; 0xce
 8007840:	f000 fe90 	bl	8008564 <__assert_func>
 8007844:	0052      	lsls	r2, r2, #1
 8007846:	3101      	adds	r1, #1
 8007848:	e7f0      	b.n	800782c <__s2b+0x18>
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	6143      	str	r3, [r0, #20]
 800784e:	2d09      	cmp	r5, #9
 8007850:	f04f 0301 	mov.w	r3, #1
 8007854:	6103      	str	r3, [r0, #16]
 8007856:	dd16      	ble.n	8007886 <__s2b+0x72>
 8007858:	f104 0909 	add.w	r9, r4, #9
 800785c:	46c8      	mov	r8, r9
 800785e:	442c      	add	r4, r5
 8007860:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007864:	4601      	mov	r1, r0
 8007866:	3b30      	subs	r3, #48	; 0x30
 8007868:	220a      	movs	r2, #10
 800786a:	4630      	mov	r0, r6
 800786c:	f7ff ff8c 	bl	8007788 <__multadd>
 8007870:	45a0      	cmp	r8, r4
 8007872:	d1f5      	bne.n	8007860 <__s2b+0x4c>
 8007874:	f1a5 0408 	sub.w	r4, r5, #8
 8007878:	444c      	add	r4, r9
 800787a:	1b2d      	subs	r5, r5, r4
 800787c:	1963      	adds	r3, r4, r5
 800787e:	42bb      	cmp	r3, r7
 8007880:	db04      	blt.n	800788c <__s2b+0x78>
 8007882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007886:	340a      	adds	r4, #10
 8007888:	2509      	movs	r5, #9
 800788a:	e7f6      	b.n	800787a <__s2b+0x66>
 800788c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007890:	4601      	mov	r1, r0
 8007892:	3b30      	subs	r3, #48	; 0x30
 8007894:	220a      	movs	r2, #10
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff ff76 	bl	8007788 <__multadd>
 800789c:	e7ee      	b.n	800787c <__s2b+0x68>
 800789e:	bf00      	nop
 80078a0:	0800a678 	.word	0x0800a678
 80078a4:	0800a704 	.word	0x0800a704

080078a8 <__hi0bits>:
 80078a8:	0c03      	lsrs	r3, r0, #16
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	b9d3      	cbnz	r3, 80078e4 <__hi0bits+0x3c>
 80078ae:	0400      	lsls	r0, r0, #16
 80078b0:	2310      	movs	r3, #16
 80078b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078b6:	bf04      	itt	eq
 80078b8:	0200      	lsleq	r0, r0, #8
 80078ba:	3308      	addeq	r3, #8
 80078bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078c0:	bf04      	itt	eq
 80078c2:	0100      	lsleq	r0, r0, #4
 80078c4:	3304      	addeq	r3, #4
 80078c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ca:	bf04      	itt	eq
 80078cc:	0080      	lsleq	r0, r0, #2
 80078ce:	3302      	addeq	r3, #2
 80078d0:	2800      	cmp	r0, #0
 80078d2:	db05      	blt.n	80078e0 <__hi0bits+0x38>
 80078d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078d8:	f103 0301 	add.w	r3, r3, #1
 80078dc:	bf08      	it	eq
 80078de:	2320      	moveq	r3, #32
 80078e0:	4618      	mov	r0, r3
 80078e2:	4770      	bx	lr
 80078e4:	2300      	movs	r3, #0
 80078e6:	e7e4      	b.n	80078b2 <__hi0bits+0xa>

080078e8 <__lo0bits>:
 80078e8:	6803      	ldr	r3, [r0, #0]
 80078ea:	f013 0207 	ands.w	r2, r3, #7
 80078ee:	4601      	mov	r1, r0
 80078f0:	d00b      	beq.n	800790a <__lo0bits+0x22>
 80078f2:	07da      	lsls	r2, r3, #31
 80078f4:	d423      	bmi.n	800793e <__lo0bits+0x56>
 80078f6:	0798      	lsls	r0, r3, #30
 80078f8:	bf49      	itett	mi
 80078fa:	085b      	lsrmi	r3, r3, #1
 80078fc:	089b      	lsrpl	r3, r3, #2
 80078fe:	2001      	movmi	r0, #1
 8007900:	600b      	strmi	r3, [r1, #0]
 8007902:	bf5c      	itt	pl
 8007904:	600b      	strpl	r3, [r1, #0]
 8007906:	2002      	movpl	r0, #2
 8007908:	4770      	bx	lr
 800790a:	b298      	uxth	r0, r3
 800790c:	b9a8      	cbnz	r0, 800793a <__lo0bits+0x52>
 800790e:	0c1b      	lsrs	r3, r3, #16
 8007910:	2010      	movs	r0, #16
 8007912:	b2da      	uxtb	r2, r3
 8007914:	b90a      	cbnz	r2, 800791a <__lo0bits+0x32>
 8007916:	3008      	adds	r0, #8
 8007918:	0a1b      	lsrs	r3, r3, #8
 800791a:	071a      	lsls	r2, r3, #28
 800791c:	bf04      	itt	eq
 800791e:	091b      	lsreq	r3, r3, #4
 8007920:	3004      	addeq	r0, #4
 8007922:	079a      	lsls	r2, r3, #30
 8007924:	bf04      	itt	eq
 8007926:	089b      	lsreq	r3, r3, #2
 8007928:	3002      	addeq	r0, #2
 800792a:	07da      	lsls	r2, r3, #31
 800792c:	d403      	bmi.n	8007936 <__lo0bits+0x4e>
 800792e:	085b      	lsrs	r3, r3, #1
 8007930:	f100 0001 	add.w	r0, r0, #1
 8007934:	d005      	beq.n	8007942 <__lo0bits+0x5a>
 8007936:	600b      	str	r3, [r1, #0]
 8007938:	4770      	bx	lr
 800793a:	4610      	mov	r0, r2
 800793c:	e7e9      	b.n	8007912 <__lo0bits+0x2a>
 800793e:	2000      	movs	r0, #0
 8007940:	4770      	bx	lr
 8007942:	2020      	movs	r0, #32
 8007944:	4770      	bx	lr
	...

08007948 <__i2b>:
 8007948:	b510      	push	{r4, lr}
 800794a:	460c      	mov	r4, r1
 800794c:	2101      	movs	r1, #1
 800794e:	f7ff feb9 	bl	80076c4 <_Balloc>
 8007952:	4602      	mov	r2, r0
 8007954:	b928      	cbnz	r0, 8007962 <__i2b+0x1a>
 8007956:	4b05      	ldr	r3, [pc, #20]	; (800796c <__i2b+0x24>)
 8007958:	4805      	ldr	r0, [pc, #20]	; (8007970 <__i2b+0x28>)
 800795a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800795e:	f000 fe01 	bl	8008564 <__assert_func>
 8007962:	2301      	movs	r3, #1
 8007964:	6144      	str	r4, [r0, #20]
 8007966:	6103      	str	r3, [r0, #16]
 8007968:	bd10      	pop	{r4, pc}
 800796a:	bf00      	nop
 800796c:	0800a678 	.word	0x0800a678
 8007970:	0800a704 	.word	0x0800a704

08007974 <__multiply>:
 8007974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007978:	4691      	mov	r9, r2
 800797a:	690a      	ldr	r2, [r1, #16]
 800797c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007980:	429a      	cmp	r2, r3
 8007982:	bfb8      	it	lt
 8007984:	460b      	movlt	r3, r1
 8007986:	460c      	mov	r4, r1
 8007988:	bfbc      	itt	lt
 800798a:	464c      	movlt	r4, r9
 800798c:	4699      	movlt	r9, r3
 800798e:	6927      	ldr	r7, [r4, #16]
 8007990:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6861      	ldr	r1, [r4, #4]
 8007998:	eb07 060a 	add.w	r6, r7, sl
 800799c:	42b3      	cmp	r3, r6
 800799e:	b085      	sub	sp, #20
 80079a0:	bfb8      	it	lt
 80079a2:	3101      	addlt	r1, #1
 80079a4:	f7ff fe8e 	bl	80076c4 <_Balloc>
 80079a8:	b930      	cbnz	r0, 80079b8 <__multiply+0x44>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4b44      	ldr	r3, [pc, #272]	; (8007ac0 <__multiply+0x14c>)
 80079ae:	4845      	ldr	r0, [pc, #276]	; (8007ac4 <__multiply+0x150>)
 80079b0:	f240 115d 	movw	r1, #349	; 0x15d
 80079b4:	f000 fdd6 	bl	8008564 <__assert_func>
 80079b8:	f100 0514 	add.w	r5, r0, #20
 80079bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079c0:	462b      	mov	r3, r5
 80079c2:	2200      	movs	r2, #0
 80079c4:	4543      	cmp	r3, r8
 80079c6:	d321      	bcc.n	8007a0c <__multiply+0x98>
 80079c8:	f104 0314 	add.w	r3, r4, #20
 80079cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079d0:	f109 0314 	add.w	r3, r9, #20
 80079d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079d8:	9202      	str	r2, [sp, #8]
 80079da:	1b3a      	subs	r2, r7, r4
 80079dc:	3a15      	subs	r2, #21
 80079de:	f022 0203 	bic.w	r2, r2, #3
 80079e2:	3204      	adds	r2, #4
 80079e4:	f104 0115 	add.w	r1, r4, #21
 80079e8:	428f      	cmp	r7, r1
 80079ea:	bf38      	it	cc
 80079ec:	2204      	movcc	r2, #4
 80079ee:	9201      	str	r2, [sp, #4]
 80079f0:	9a02      	ldr	r2, [sp, #8]
 80079f2:	9303      	str	r3, [sp, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d80c      	bhi.n	8007a12 <__multiply+0x9e>
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	dd03      	ble.n	8007a04 <__multiply+0x90>
 80079fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d05a      	beq.n	8007aba <__multiply+0x146>
 8007a04:	6106      	str	r6, [r0, #16]
 8007a06:	b005      	add	sp, #20
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	f843 2b04 	str.w	r2, [r3], #4
 8007a10:	e7d8      	b.n	80079c4 <__multiply+0x50>
 8007a12:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a16:	f1ba 0f00 	cmp.w	sl, #0
 8007a1a:	d024      	beq.n	8007a66 <__multiply+0xf2>
 8007a1c:	f104 0e14 	add.w	lr, r4, #20
 8007a20:	46a9      	mov	r9, r5
 8007a22:	f04f 0c00 	mov.w	ip, #0
 8007a26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a2a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a2e:	fa1f fb82 	uxth.w	fp, r2
 8007a32:	b289      	uxth	r1, r1
 8007a34:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a40:	4461      	add	r1, ip
 8007a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a46:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a4e:	b289      	uxth	r1, r1
 8007a50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a54:	4577      	cmp	r7, lr
 8007a56:	f849 1b04 	str.w	r1, [r9], #4
 8007a5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a5e:	d8e2      	bhi.n	8007a26 <__multiply+0xb2>
 8007a60:	9a01      	ldr	r2, [sp, #4]
 8007a62:	f845 c002 	str.w	ip, [r5, r2]
 8007a66:	9a03      	ldr	r2, [sp, #12]
 8007a68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	f1b9 0f00 	cmp.w	r9, #0
 8007a72:	d020      	beq.n	8007ab6 <__multiply+0x142>
 8007a74:	6829      	ldr	r1, [r5, #0]
 8007a76:	f104 0c14 	add.w	ip, r4, #20
 8007a7a:	46ae      	mov	lr, r5
 8007a7c:	f04f 0a00 	mov.w	sl, #0
 8007a80:	f8bc b000 	ldrh.w	fp, [ip]
 8007a84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a88:	fb09 220b 	mla	r2, r9, fp, r2
 8007a8c:	4492      	add	sl, r2
 8007a8e:	b289      	uxth	r1, r1
 8007a90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a94:	f84e 1b04 	str.w	r1, [lr], #4
 8007a98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a9c:	f8be 1000 	ldrh.w	r1, [lr]
 8007aa0:	0c12      	lsrs	r2, r2, #16
 8007aa2:	fb09 1102 	mla	r1, r9, r2, r1
 8007aa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007aaa:	4567      	cmp	r7, ip
 8007aac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ab0:	d8e6      	bhi.n	8007a80 <__multiply+0x10c>
 8007ab2:	9a01      	ldr	r2, [sp, #4]
 8007ab4:	50a9      	str	r1, [r5, r2]
 8007ab6:	3504      	adds	r5, #4
 8007ab8:	e79a      	b.n	80079f0 <__multiply+0x7c>
 8007aba:	3e01      	subs	r6, #1
 8007abc:	e79c      	b.n	80079f8 <__multiply+0x84>
 8007abe:	bf00      	nop
 8007ac0:	0800a678 	.word	0x0800a678
 8007ac4:	0800a704 	.word	0x0800a704

08007ac8 <__pow5mult>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	4615      	mov	r5, r2
 8007ace:	f012 0203 	ands.w	r2, r2, #3
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	460f      	mov	r7, r1
 8007ad6:	d007      	beq.n	8007ae8 <__pow5mult+0x20>
 8007ad8:	4c25      	ldr	r4, [pc, #148]	; (8007b70 <__pow5mult+0xa8>)
 8007ada:	3a01      	subs	r2, #1
 8007adc:	2300      	movs	r3, #0
 8007ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ae2:	f7ff fe51 	bl	8007788 <__multadd>
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	10ad      	asrs	r5, r5, #2
 8007aea:	d03d      	beq.n	8007b68 <__pow5mult+0xa0>
 8007aec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007aee:	b97c      	cbnz	r4, 8007b10 <__pow5mult+0x48>
 8007af0:	2010      	movs	r0, #16
 8007af2:	f7ff fdbf 	bl	8007674 <malloc>
 8007af6:	4602      	mov	r2, r0
 8007af8:	6270      	str	r0, [r6, #36]	; 0x24
 8007afa:	b928      	cbnz	r0, 8007b08 <__pow5mult+0x40>
 8007afc:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <__pow5mult+0xac>)
 8007afe:	481e      	ldr	r0, [pc, #120]	; (8007b78 <__pow5mult+0xb0>)
 8007b00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b04:	f000 fd2e 	bl	8008564 <__assert_func>
 8007b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b0c:	6004      	str	r4, [r0, #0]
 8007b0e:	60c4      	str	r4, [r0, #12]
 8007b10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b18:	b94c      	cbnz	r4, 8007b2e <__pow5mult+0x66>
 8007b1a:	f240 2171 	movw	r1, #625	; 0x271
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ff12 	bl	8007948 <__i2b>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	6003      	str	r3, [r0, #0]
 8007b2e:	f04f 0900 	mov.w	r9, #0
 8007b32:	07eb      	lsls	r3, r5, #31
 8007b34:	d50a      	bpl.n	8007b4c <__pow5mult+0x84>
 8007b36:	4639      	mov	r1, r7
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff ff1a 	bl	8007974 <__multiply>
 8007b40:	4639      	mov	r1, r7
 8007b42:	4680      	mov	r8, r0
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff fdfd 	bl	8007744 <_Bfree>
 8007b4a:	4647      	mov	r7, r8
 8007b4c:	106d      	asrs	r5, r5, #1
 8007b4e:	d00b      	beq.n	8007b68 <__pow5mult+0xa0>
 8007b50:	6820      	ldr	r0, [r4, #0]
 8007b52:	b938      	cbnz	r0, 8007b64 <__pow5mult+0x9c>
 8007b54:	4622      	mov	r2, r4
 8007b56:	4621      	mov	r1, r4
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7ff ff0b 	bl	8007974 <__multiply>
 8007b5e:	6020      	str	r0, [r4, #0]
 8007b60:	f8c0 9000 	str.w	r9, [r0]
 8007b64:	4604      	mov	r4, r0
 8007b66:	e7e4      	b.n	8007b32 <__pow5mult+0x6a>
 8007b68:	4638      	mov	r0, r7
 8007b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b6e:	bf00      	nop
 8007b70:	0800a850 	.word	0x0800a850
 8007b74:	0800a606 	.word	0x0800a606
 8007b78:	0800a704 	.word	0x0800a704

08007b7c <__lshift>:
 8007b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b80:	460c      	mov	r4, r1
 8007b82:	6849      	ldr	r1, [r1, #4]
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	4691      	mov	r9, r2
 8007b90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b94:	f108 0601 	add.w	r6, r8, #1
 8007b98:	42b3      	cmp	r3, r6
 8007b9a:	db0b      	blt.n	8007bb4 <__lshift+0x38>
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff fd91 	bl	80076c4 <_Balloc>
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	b948      	cbnz	r0, 8007bba <__lshift+0x3e>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	4b2a      	ldr	r3, [pc, #168]	; (8007c54 <__lshift+0xd8>)
 8007baa:	482b      	ldr	r0, [pc, #172]	; (8007c58 <__lshift+0xdc>)
 8007bac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bb0:	f000 fcd8 	bl	8008564 <__assert_func>
 8007bb4:	3101      	adds	r1, #1
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	e7ee      	b.n	8007b98 <__lshift+0x1c>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f100 0114 	add.w	r1, r0, #20
 8007bc0:	f100 0210 	add.w	r2, r0, #16
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	4553      	cmp	r3, sl
 8007bc8:	db37      	blt.n	8007c3a <__lshift+0xbe>
 8007bca:	6920      	ldr	r0, [r4, #16]
 8007bcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bd0:	f104 0314 	add.w	r3, r4, #20
 8007bd4:	f019 091f 	ands.w	r9, r9, #31
 8007bd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007be0:	d02f      	beq.n	8007c42 <__lshift+0xc6>
 8007be2:	f1c9 0e20 	rsb	lr, r9, #32
 8007be6:	468a      	mov	sl, r1
 8007be8:	f04f 0c00 	mov.w	ip, #0
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	fa02 f209 	lsl.w	r2, r2, r9
 8007bf2:	ea42 020c 	orr.w	r2, r2, ip
 8007bf6:	f84a 2b04 	str.w	r2, [sl], #4
 8007bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c04:	d8f2      	bhi.n	8007bec <__lshift+0x70>
 8007c06:	1b03      	subs	r3, r0, r4
 8007c08:	3b15      	subs	r3, #21
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	3304      	adds	r3, #4
 8007c10:	f104 0215 	add.w	r2, r4, #21
 8007c14:	4290      	cmp	r0, r2
 8007c16:	bf38      	it	cc
 8007c18:	2304      	movcc	r3, #4
 8007c1a:	f841 c003 	str.w	ip, [r1, r3]
 8007c1e:	f1bc 0f00 	cmp.w	ip, #0
 8007c22:	d001      	beq.n	8007c28 <__lshift+0xac>
 8007c24:	f108 0602 	add.w	r6, r8, #2
 8007c28:	3e01      	subs	r6, #1
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	612e      	str	r6, [r5, #16]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	f7ff fd88 	bl	8007744 <_Bfree>
 8007c34:	4628      	mov	r0, r5
 8007c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c3e:	3301      	adds	r3, #1
 8007c40:	e7c1      	b.n	8007bc6 <__lshift+0x4a>
 8007c42:	3904      	subs	r1, #4
 8007c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c48:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c4c:	4298      	cmp	r0, r3
 8007c4e:	d8f9      	bhi.n	8007c44 <__lshift+0xc8>
 8007c50:	e7ea      	b.n	8007c28 <__lshift+0xac>
 8007c52:	bf00      	nop
 8007c54:	0800a678 	.word	0x0800a678
 8007c58:	0800a704 	.word	0x0800a704

08007c5c <__mcmp>:
 8007c5c:	b530      	push	{r4, r5, lr}
 8007c5e:	6902      	ldr	r2, [r0, #16]
 8007c60:	690c      	ldr	r4, [r1, #16]
 8007c62:	1b12      	subs	r2, r2, r4
 8007c64:	d10e      	bne.n	8007c84 <__mcmp+0x28>
 8007c66:	f100 0314 	add.w	r3, r0, #20
 8007c6a:	3114      	adds	r1, #20
 8007c6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c7c:	42a5      	cmp	r5, r4
 8007c7e:	d003      	beq.n	8007c88 <__mcmp+0x2c>
 8007c80:	d305      	bcc.n	8007c8e <__mcmp+0x32>
 8007c82:	2201      	movs	r2, #1
 8007c84:	4610      	mov	r0, r2
 8007c86:	bd30      	pop	{r4, r5, pc}
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	d3f3      	bcc.n	8007c74 <__mcmp+0x18>
 8007c8c:	e7fa      	b.n	8007c84 <__mcmp+0x28>
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	e7f7      	b.n	8007c84 <__mcmp+0x28>

08007c94 <__mdiff>:
 8007c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c98:	460c      	mov	r4, r1
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4690      	mov	r8, r2
 8007ca2:	f7ff ffdb 	bl	8007c5c <__mcmp>
 8007ca6:	1e05      	subs	r5, r0, #0
 8007ca8:	d110      	bne.n	8007ccc <__mdiff+0x38>
 8007caa:	4629      	mov	r1, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff fd09 	bl	80076c4 <_Balloc>
 8007cb2:	b930      	cbnz	r0, 8007cc2 <__mdiff+0x2e>
 8007cb4:	4b3a      	ldr	r3, [pc, #232]	; (8007da0 <__mdiff+0x10c>)
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	f240 2132 	movw	r1, #562	; 0x232
 8007cbc:	4839      	ldr	r0, [pc, #228]	; (8007da4 <__mdiff+0x110>)
 8007cbe:	f000 fc51 	bl	8008564 <__assert_func>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ccc:	bfa4      	itt	ge
 8007cce:	4643      	movge	r3, r8
 8007cd0:	46a0      	movge	r8, r4
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cd8:	bfa6      	itte	ge
 8007cda:	461c      	movge	r4, r3
 8007cdc:	2500      	movge	r5, #0
 8007cde:	2501      	movlt	r5, #1
 8007ce0:	f7ff fcf0 	bl	80076c4 <_Balloc>
 8007ce4:	b920      	cbnz	r0, 8007cf0 <__mdiff+0x5c>
 8007ce6:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <__mdiff+0x10c>)
 8007ce8:	4602      	mov	r2, r0
 8007cea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cee:	e7e5      	b.n	8007cbc <__mdiff+0x28>
 8007cf0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cf4:	6926      	ldr	r6, [r4, #16]
 8007cf6:	60c5      	str	r5, [r0, #12]
 8007cf8:	f104 0914 	add.w	r9, r4, #20
 8007cfc:	f108 0514 	add.w	r5, r8, #20
 8007d00:	f100 0e14 	add.w	lr, r0, #20
 8007d04:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d0c:	f108 0210 	add.w	r2, r8, #16
 8007d10:	46f2      	mov	sl, lr
 8007d12:	2100      	movs	r1, #0
 8007d14:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d1c:	fa1f f883 	uxth.w	r8, r3
 8007d20:	fa11 f18b 	uxtah	r1, r1, fp
 8007d24:	0c1b      	lsrs	r3, r3, #16
 8007d26:	eba1 0808 	sub.w	r8, r1, r8
 8007d2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d32:	fa1f f888 	uxth.w	r8, r8
 8007d36:	1419      	asrs	r1, r3, #16
 8007d38:	454e      	cmp	r6, r9
 8007d3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d3e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d42:	d8e7      	bhi.n	8007d14 <__mdiff+0x80>
 8007d44:	1b33      	subs	r3, r6, r4
 8007d46:	3b15      	subs	r3, #21
 8007d48:	f023 0303 	bic.w	r3, r3, #3
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	3415      	adds	r4, #21
 8007d50:	42a6      	cmp	r6, r4
 8007d52:	bf38      	it	cc
 8007d54:	2304      	movcc	r3, #4
 8007d56:	441d      	add	r5, r3
 8007d58:	4473      	add	r3, lr
 8007d5a:	469e      	mov	lr, r3
 8007d5c:	462e      	mov	r6, r5
 8007d5e:	4566      	cmp	r6, ip
 8007d60:	d30e      	bcc.n	8007d80 <__mdiff+0xec>
 8007d62:	f10c 0203 	add.w	r2, ip, #3
 8007d66:	1b52      	subs	r2, r2, r5
 8007d68:	f022 0203 	bic.w	r2, r2, #3
 8007d6c:	3d03      	subs	r5, #3
 8007d6e:	45ac      	cmp	ip, r5
 8007d70:	bf38      	it	cc
 8007d72:	2200      	movcc	r2, #0
 8007d74:	441a      	add	r2, r3
 8007d76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d7a:	b17b      	cbz	r3, 8007d9c <__mdiff+0x108>
 8007d7c:	6107      	str	r7, [r0, #16]
 8007d7e:	e7a3      	b.n	8007cc8 <__mdiff+0x34>
 8007d80:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d84:	fa11 f288 	uxtah	r2, r1, r8
 8007d88:	1414      	asrs	r4, r2, #16
 8007d8a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d94:	f84e 2b04 	str.w	r2, [lr], #4
 8007d98:	1421      	asrs	r1, r4, #16
 8007d9a:	e7e0      	b.n	8007d5e <__mdiff+0xca>
 8007d9c:	3f01      	subs	r7, #1
 8007d9e:	e7ea      	b.n	8007d76 <__mdiff+0xe2>
 8007da0:	0800a678 	.word	0x0800a678
 8007da4:	0800a704 	.word	0x0800a704

08007da8 <__ulp>:
 8007da8:	b082      	sub	sp, #8
 8007daa:	ed8d 0b00 	vstr	d0, [sp]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	4912      	ldr	r1, [pc, #72]	; (8007dfc <__ulp+0x54>)
 8007db2:	4019      	ands	r1, r3
 8007db4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007db8:	2900      	cmp	r1, #0
 8007dba:	dd05      	ble.n	8007dc8 <__ulp+0x20>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	ec43 2b10 	vmov	d0, r2, r3
 8007dc4:	b002      	add	sp, #8
 8007dc6:	4770      	bx	lr
 8007dc8:	4249      	negs	r1, r1
 8007dca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007dce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	da04      	bge.n	8007de6 <__ulp+0x3e>
 8007ddc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007de0:	fa41 f300 	asr.w	r3, r1, r0
 8007de4:	e7ec      	b.n	8007dc0 <__ulp+0x18>
 8007de6:	f1a0 0114 	sub.w	r1, r0, #20
 8007dea:	291e      	cmp	r1, #30
 8007dec:	bfda      	itte	le
 8007dee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007df2:	fa20 f101 	lsrle.w	r1, r0, r1
 8007df6:	2101      	movgt	r1, #1
 8007df8:	460a      	mov	r2, r1
 8007dfa:	e7e1      	b.n	8007dc0 <__ulp+0x18>
 8007dfc:	7ff00000 	.word	0x7ff00000

08007e00 <__b2d>:
 8007e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e02:	6905      	ldr	r5, [r0, #16]
 8007e04:	f100 0714 	add.w	r7, r0, #20
 8007e08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e0c:	1f2e      	subs	r6, r5, #4
 8007e0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e12:	4620      	mov	r0, r4
 8007e14:	f7ff fd48 	bl	80078a8 <__hi0bits>
 8007e18:	f1c0 0320 	rsb	r3, r0, #32
 8007e1c:	280a      	cmp	r0, #10
 8007e1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007e9c <__b2d+0x9c>
 8007e22:	600b      	str	r3, [r1, #0]
 8007e24:	dc14      	bgt.n	8007e50 <__b2d+0x50>
 8007e26:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007e2e:	42b7      	cmp	r7, r6
 8007e30:	ea41 030c 	orr.w	r3, r1, ip
 8007e34:	bf34      	ite	cc
 8007e36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e3a:	2100      	movcs	r1, #0
 8007e3c:	3015      	adds	r0, #21
 8007e3e:	fa04 f000 	lsl.w	r0, r4, r0
 8007e42:	fa21 f10e 	lsr.w	r1, r1, lr
 8007e46:	ea40 0201 	orr.w	r2, r0, r1
 8007e4a:	ec43 2b10 	vmov	d0, r2, r3
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	42b7      	cmp	r7, r6
 8007e52:	bf3a      	itte	cc
 8007e54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e58:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e5c:	2100      	movcs	r1, #0
 8007e5e:	380b      	subs	r0, #11
 8007e60:	d017      	beq.n	8007e92 <__b2d+0x92>
 8007e62:	f1c0 0c20 	rsb	ip, r0, #32
 8007e66:	fa04 f500 	lsl.w	r5, r4, r0
 8007e6a:	42be      	cmp	r6, r7
 8007e6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8007e70:	ea45 0504 	orr.w	r5, r5, r4
 8007e74:	bf8c      	ite	hi
 8007e76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007e7a:	2400      	movls	r4, #0
 8007e7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007e80:	fa01 f000 	lsl.w	r0, r1, r0
 8007e84:	fa24 f40c 	lsr.w	r4, r4, ip
 8007e88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e8c:	ea40 0204 	orr.w	r2, r0, r4
 8007e90:	e7db      	b.n	8007e4a <__b2d+0x4a>
 8007e92:	ea44 030c 	orr.w	r3, r4, ip
 8007e96:	460a      	mov	r2, r1
 8007e98:	e7d7      	b.n	8007e4a <__b2d+0x4a>
 8007e9a:	bf00      	nop
 8007e9c:	3ff00000 	.word	0x3ff00000

08007ea0 <__d2b>:
 8007ea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	4689      	mov	r9, r1
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	ec57 6b10 	vmov	r6, r7, d0
 8007eac:	4690      	mov	r8, r2
 8007eae:	f7ff fc09 	bl	80076c4 <_Balloc>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	b930      	cbnz	r0, 8007ec4 <__d2b+0x24>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b25      	ldr	r3, [pc, #148]	; (8007f50 <__d2b+0xb0>)
 8007eba:	4826      	ldr	r0, [pc, #152]	; (8007f54 <__d2b+0xb4>)
 8007ebc:	f240 310a 	movw	r1, #778	; 0x30a
 8007ec0:	f000 fb50 	bl	8008564 <__assert_func>
 8007ec4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ecc:	bb35      	cbnz	r5, 8007f1c <__d2b+0x7c>
 8007ece:	2e00      	cmp	r6, #0
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	d028      	beq.n	8007f26 <__d2b+0x86>
 8007ed4:	4668      	mov	r0, sp
 8007ed6:	9600      	str	r6, [sp, #0]
 8007ed8:	f7ff fd06 	bl	80078e8 <__lo0bits>
 8007edc:	9900      	ldr	r1, [sp, #0]
 8007ede:	b300      	cbz	r0, 8007f22 <__d2b+0x82>
 8007ee0:	9a01      	ldr	r2, [sp, #4]
 8007ee2:	f1c0 0320 	rsb	r3, r0, #32
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	430b      	orrs	r3, r1
 8007eec:	40c2      	lsrs	r2, r0
 8007eee:	6163      	str	r3, [r4, #20]
 8007ef0:	9201      	str	r2, [sp, #4]
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	61a3      	str	r3, [r4, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bf14      	ite	ne
 8007efa:	2202      	movne	r2, #2
 8007efc:	2201      	moveq	r2, #1
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	b1d5      	cbz	r5, 8007f38 <__d2b+0x98>
 8007f02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f06:	4405      	add	r5, r0
 8007f08:	f8c9 5000 	str.w	r5, [r9]
 8007f0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f10:	f8c8 0000 	str.w	r0, [r8]
 8007f14:	4620      	mov	r0, r4
 8007f16:	b003      	add	sp, #12
 8007f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f20:	e7d5      	b.n	8007ece <__d2b+0x2e>
 8007f22:	6161      	str	r1, [r4, #20]
 8007f24:	e7e5      	b.n	8007ef2 <__d2b+0x52>
 8007f26:	a801      	add	r0, sp, #4
 8007f28:	f7ff fcde 	bl	80078e8 <__lo0bits>
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	6163      	str	r3, [r4, #20]
 8007f30:	2201      	movs	r2, #1
 8007f32:	6122      	str	r2, [r4, #16]
 8007f34:	3020      	adds	r0, #32
 8007f36:	e7e3      	b.n	8007f00 <__d2b+0x60>
 8007f38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f40:	f8c9 0000 	str.w	r0, [r9]
 8007f44:	6918      	ldr	r0, [r3, #16]
 8007f46:	f7ff fcaf 	bl	80078a8 <__hi0bits>
 8007f4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f4e:	e7df      	b.n	8007f10 <__d2b+0x70>
 8007f50:	0800a678 	.word	0x0800a678
 8007f54:	0800a704 	.word	0x0800a704

08007f58 <__ratio>:
 8007f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	4688      	mov	r8, r1
 8007f5e:	4669      	mov	r1, sp
 8007f60:	4681      	mov	r9, r0
 8007f62:	f7ff ff4d 	bl	8007e00 <__b2d>
 8007f66:	a901      	add	r1, sp, #4
 8007f68:	4640      	mov	r0, r8
 8007f6a:	ec55 4b10 	vmov	r4, r5, d0
 8007f6e:	f7ff ff47 	bl	8007e00 <__b2d>
 8007f72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f7a:	eba3 0c02 	sub.w	ip, r3, r2
 8007f7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f82:	1a9b      	subs	r3, r3, r2
 8007f84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f88:	ec51 0b10 	vmov	r0, r1, d0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfd6      	itet	le
 8007f90:	460a      	movle	r2, r1
 8007f92:	462a      	movgt	r2, r5
 8007f94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f98:	468b      	mov	fp, r1
 8007f9a:	462f      	mov	r7, r5
 8007f9c:	bfd4      	ite	le
 8007f9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007fa2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	ee10 2a10 	vmov	r2, s0
 8007fac:	465b      	mov	r3, fp
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fc6c 	bl	800088c <__aeabi_ddiv>
 8007fb4:	ec41 0b10 	vmov	d0, r0, r1
 8007fb8:	b003      	add	sp, #12
 8007fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fbe <__copybits>:
 8007fbe:	3901      	subs	r1, #1
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	1149      	asrs	r1, r1, #5
 8007fc4:	6914      	ldr	r4, [r2, #16]
 8007fc6:	3101      	adds	r1, #1
 8007fc8:	f102 0314 	add.w	r3, r2, #20
 8007fcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fd4:	1f05      	subs	r5, r0, #4
 8007fd6:	42a3      	cmp	r3, r4
 8007fd8:	d30c      	bcc.n	8007ff4 <__copybits+0x36>
 8007fda:	1aa3      	subs	r3, r4, r2
 8007fdc:	3b11      	subs	r3, #17
 8007fde:	f023 0303 	bic.w	r3, r3, #3
 8007fe2:	3211      	adds	r2, #17
 8007fe4:	42a2      	cmp	r2, r4
 8007fe6:	bf88      	it	hi
 8007fe8:	2300      	movhi	r3, #0
 8007fea:	4418      	add	r0, r3
 8007fec:	2300      	movs	r3, #0
 8007fee:	4288      	cmp	r0, r1
 8007ff0:	d305      	bcc.n	8007ffe <__copybits+0x40>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f853 6b04 	ldr.w	r6, [r3], #4
 8007ff8:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ffc:	e7eb      	b.n	8007fd6 <__copybits+0x18>
 8007ffe:	f840 3b04 	str.w	r3, [r0], #4
 8008002:	e7f4      	b.n	8007fee <__copybits+0x30>

08008004 <__any_on>:
 8008004:	f100 0214 	add.w	r2, r0, #20
 8008008:	6900      	ldr	r0, [r0, #16]
 800800a:	114b      	asrs	r3, r1, #5
 800800c:	4298      	cmp	r0, r3
 800800e:	b510      	push	{r4, lr}
 8008010:	db11      	blt.n	8008036 <__any_on+0x32>
 8008012:	dd0a      	ble.n	800802a <__any_on+0x26>
 8008014:	f011 011f 	ands.w	r1, r1, #31
 8008018:	d007      	beq.n	800802a <__any_on+0x26>
 800801a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800801e:	fa24 f001 	lsr.w	r0, r4, r1
 8008022:	fa00 f101 	lsl.w	r1, r0, r1
 8008026:	428c      	cmp	r4, r1
 8008028:	d10b      	bne.n	8008042 <__any_on+0x3e>
 800802a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800802e:	4293      	cmp	r3, r2
 8008030:	d803      	bhi.n	800803a <__any_on+0x36>
 8008032:	2000      	movs	r0, #0
 8008034:	bd10      	pop	{r4, pc}
 8008036:	4603      	mov	r3, r0
 8008038:	e7f7      	b.n	800802a <__any_on+0x26>
 800803a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800803e:	2900      	cmp	r1, #0
 8008040:	d0f5      	beq.n	800802e <__any_on+0x2a>
 8008042:	2001      	movs	r0, #1
 8008044:	e7f6      	b.n	8008034 <__any_on+0x30>

08008046 <_calloc_r>:
 8008046:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008048:	fba1 2402 	umull	r2, r4, r1, r2
 800804c:	b94c      	cbnz	r4, 8008062 <_calloc_r+0x1c>
 800804e:	4611      	mov	r1, r2
 8008050:	9201      	str	r2, [sp, #4]
 8008052:	f000 f87b 	bl	800814c <_malloc_r>
 8008056:	9a01      	ldr	r2, [sp, #4]
 8008058:	4605      	mov	r5, r0
 800805a:	b930      	cbnz	r0, 800806a <_calloc_r+0x24>
 800805c:	4628      	mov	r0, r5
 800805e:	b003      	add	sp, #12
 8008060:	bd30      	pop	{r4, r5, pc}
 8008062:	220c      	movs	r2, #12
 8008064:	6002      	str	r2, [r0, #0]
 8008066:	2500      	movs	r5, #0
 8008068:	e7f8      	b.n	800805c <_calloc_r+0x16>
 800806a:	4621      	mov	r1, r4
 800806c:	f7fc fbb4 	bl	80047d8 <memset>
 8008070:	e7f4      	b.n	800805c <_calloc_r+0x16>
	...

08008074 <_free_r>:
 8008074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008076:	2900      	cmp	r1, #0
 8008078:	d044      	beq.n	8008104 <_free_r+0x90>
 800807a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807e:	9001      	str	r0, [sp, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f1a1 0404 	sub.w	r4, r1, #4
 8008086:	bfb8      	it	lt
 8008088:	18e4      	addlt	r4, r4, r3
 800808a:	f000 fab5 	bl	80085f8 <__malloc_lock>
 800808e:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <_free_r+0x94>)
 8008090:	9801      	ldr	r0, [sp, #4]
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	b933      	cbnz	r3, 80080a4 <_free_r+0x30>
 8008096:	6063      	str	r3, [r4, #4]
 8008098:	6014      	str	r4, [r2, #0]
 800809a:	b003      	add	sp, #12
 800809c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a0:	f000 bab0 	b.w	8008604 <__malloc_unlock>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d908      	bls.n	80080ba <_free_r+0x46>
 80080a8:	6825      	ldr	r5, [r4, #0]
 80080aa:	1961      	adds	r1, r4, r5
 80080ac:	428b      	cmp	r3, r1
 80080ae:	bf01      	itttt	eq
 80080b0:	6819      	ldreq	r1, [r3, #0]
 80080b2:	685b      	ldreq	r3, [r3, #4]
 80080b4:	1949      	addeq	r1, r1, r5
 80080b6:	6021      	streq	r1, [r4, #0]
 80080b8:	e7ed      	b.n	8008096 <_free_r+0x22>
 80080ba:	461a      	mov	r2, r3
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b10b      	cbz	r3, 80080c4 <_free_r+0x50>
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	d9fa      	bls.n	80080ba <_free_r+0x46>
 80080c4:	6811      	ldr	r1, [r2, #0]
 80080c6:	1855      	adds	r5, r2, r1
 80080c8:	42a5      	cmp	r5, r4
 80080ca:	d10b      	bne.n	80080e4 <_free_r+0x70>
 80080cc:	6824      	ldr	r4, [r4, #0]
 80080ce:	4421      	add	r1, r4
 80080d0:	1854      	adds	r4, r2, r1
 80080d2:	42a3      	cmp	r3, r4
 80080d4:	6011      	str	r1, [r2, #0]
 80080d6:	d1e0      	bne.n	800809a <_free_r+0x26>
 80080d8:	681c      	ldr	r4, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	6053      	str	r3, [r2, #4]
 80080de:	4421      	add	r1, r4
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	e7da      	b.n	800809a <_free_r+0x26>
 80080e4:	d902      	bls.n	80080ec <_free_r+0x78>
 80080e6:	230c      	movs	r3, #12
 80080e8:	6003      	str	r3, [r0, #0]
 80080ea:	e7d6      	b.n	800809a <_free_r+0x26>
 80080ec:	6825      	ldr	r5, [r4, #0]
 80080ee:	1961      	adds	r1, r4, r5
 80080f0:	428b      	cmp	r3, r1
 80080f2:	bf04      	itt	eq
 80080f4:	6819      	ldreq	r1, [r3, #0]
 80080f6:	685b      	ldreq	r3, [r3, #4]
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	bf04      	itt	eq
 80080fc:	1949      	addeq	r1, r1, r5
 80080fe:	6021      	streq	r1, [r4, #0]
 8008100:	6054      	str	r4, [r2, #4]
 8008102:	e7ca      	b.n	800809a <_free_r+0x26>
 8008104:	b003      	add	sp, #12
 8008106:	bd30      	pop	{r4, r5, pc}
 8008108:	2000030c 	.word	0x2000030c

0800810c <sbrk_aligned>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4e0e      	ldr	r6, [pc, #56]	; (8008148 <sbrk_aligned+0x3c>)
 8008110:	460c      	mov	r4, r1
 8008112:	6831      	ldr	r1, [r6, #0]
 8008114:	4605      	mov	r5, r0
 8008116:	b911      	cbnz	r1, 800811e <sbrk_aligned+0x12>
 8008118:	f000 f9f2 	bl	8008500 <_sbrk_r>
 800811c:	6030      	str	r0, [r6, #0]
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	f000 f9ed 	bl	8008500 <_sbrk_r>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d00a      	beq.n	8008140 <sbrk_aligned+0x34>
 800812a:	1cc4      	adds	r4, r0, #3
 800812c:	f024 0403 	bic.w	r4, r4, #3
 8008130:	42a0      	cmp	r0, r4
 8008132:	d007      	beq.n	8008144 <sbrk_aligned+0x38>
 8008134:	1a21      	subs	r1, r4, r0
 8008136:	4628      	mov	r0, r5
 8008138:	f000 f9e2 	bl	8008500 <_sbrk_r>
 800813c:	3001      	adds	r0, #1
 800813e:	d101      	bne.n	8008144 <sbrk_aligned+0x38>
 8008140:	f04f 34ff 	mov.w	r4, #4294967295
 8008144:	4620      	mov	r0, r4
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	20000310 	.word	0x20000310

0800814c <_malloc_r>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	1ccd      	adds	r5, r1, #3
 8008152:	f025 0503 	bic.w	r5, r5, #3
 8008156:	3508      	adds	r5, #8
 8008158:	2d0c      	cmp	r5, #12
 800815a:	bf38      	it	cc
 800815c:	250c      	movcc	r5, #12
 800815e:	2d00      	cmp	r5, #0
 8008160:	4607      	mov	r7, r0
 8008162:	db01      	blt.n	8008168 <_malloc_r+0x1c>
 8008164:	42a9      	cmp	r1, r5
 8008166:	d905      	bls.n	8008174 <_malloc_r+0x28>
 8008168:	230c      	movs	r3, #12
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	2600      	movs	r6, #0
 800816e:	4630      	mov	r0, r6
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	4e2e      	ldr	r6, [pc, #184]	; (8008230 <_malloc_r+0xe4>)
 8008176:	f000 fa3f 	bl	80085f8 <__malloc_lock>
 800817a:	6833      	ldr	r3, [r6, #0]
 800817c:	461c      	mov	r4, r3
 800817e:	bb34      	cbnz	r4, 80081ce <_malloc_r+0x82>
 8008180:	4629      	mov	r1, r5
 8008182:	4638      	mov	r0, r7
 8008184:	f7ff ffc2 	bl	800810c <sbrk_aligned>
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	4604      	mov	r4, r0
 800818c:	d14d      	bne.n	800822a <_malloc_r+0xde>
 800818e:	6834      	ldr	r4, [r6, #0]
 8008190:	4626      	mov	r6, r4
 8008192:	2e00      	cmp	r6, #0
 8008194:	d140      	bne.n	8008218 <_malloc_r+0xcc>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	4631      	mov	r1, r6
 800819a:	4638      	mov	r0, r7
 800819c:	eb04 0803 	add.w	r8, r4, r3
 80081a0:	f000 f9ae 	bl	8008500 <_sbrk_r>
 80081a4:	4580      	cmp	r8, r0
 80081a6:	d13a      	bne.n	800821e <_malloc_r+0xd2>
 80081a8:	6821      	ldr	r1, [r4, #0]
 80081aa:	3503      	adds	r5, #3
 80081ac:	1a6d      	subs	r5, r5, r1
 80081ae:	f025 0503 	bic.w	r5, r5, #3
 80081b2:	3508      	adds	r5, #8
 80081b4:	2d0c      	cmp	r5, #12
 80081b6:	bf38      	it	cc
 80081b8:	250c      	movcc	r5, #12
 80081ba:	4629      	mov	r1, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff ffa5 	bl	800810c <sbrk_aligned>
 80081c2:	3001      	adds	r0, #1
 80081c4:	d02b      	beq.n	800821e <_malloc_r+0xd2>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	442b      	add	r3, r5
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	e00e      	b.n	80081ec <_malloc_r+0xa0>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	1b52      	subs	r2, r2, r5
 80081d2:	d41e      	bmi.n	8008212 <_malloc_r+0xc6>
 80081d4:	2a0b      	cmp	r2, #11
 80081d6:	d916      	bls.n	8008206 <_malloc_r+0xba>
 80081d8:	1961      	adds	r1, r4, r5
 80081da:	42a3      	cmp	r3, r4
 80081dc:	6025      	str	r5, [r4, #0]
 80081de:	bf18      	it	ne
 80081e0:	6059      	strne	r1, [r3, #4]
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	bf08      	it	eq
 80081e6:	6031      	streq	r1, [r6, #0]
 80081e8:	5162      	str	r2, [r4, r5]
 80081ea:	604b      	str	r3, [r1, #4]
 80081ec:	4638      	mov	r0, r7
 80081ee:	f104 060b 	add.w	r6, r4, #11
 80081f2:	f000 fa07 	bl	8008604 <__malloc_unlock>
 80081f6:	f026 0607 	bic.w	r6, r6, #7
 80081fa:	1d23      	adds	r3, r4, #4
 80081fc:	1af2      	subs	r2, r6, r3
 80081fe:	d0b6      	beq.n	800816e <_malloc_r+0x22>
 8008200:	1b9b      	subs	r3, r3, r6
 8008202:	50a3      	str	r3, [r4, r2]
 8008204:	e7b3      	b.n	800816e <_malloc_r+0x22>
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	42a3      	cmp	r3, r4
 800820a:	bf0c      	ite	eq
 800820c:	6032      	streq	r2, [r6, #0]
 800820e:	605a      	strne	r2, [r3, #4]
 8008210:	e7ec      	b.n	80081ec <_malloc_r+0xa0>
 8008212:	4623      	mov	r3, r4
 8008214:	6864      	ldr	r4, [r4, #4]
 8008216:	e7b2      	b.n	800817e <_malloc_r+0x32>
 8008218:	4634      	mov	r4, r6
 800821a:	6876      	ldr	r6, [r6, #4]
 800821c:	e7b9      	b.n	8008192 <_malloc_r+0x46>
 800821e:	230c      	movs	r3, #12
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	4638      	mov	r0, r7
 8008224:	f000 f9ee 	bl	8008604 <__malloc_unlock>
 8008228:	e7a1      	b.n	800816e <_malloc_r+0x22>
 800822a:	6025      	str	r5, [r4, #0]
 800822c:	e7de      	b.n	80081ec <_malloc_r+0xa0>
 800822e:	bf00      	nop
 8008230:	2000030c 	.word	0x2000030c

08008234 <__ssputs_r>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	688e      	ldr	r6, [r1, #8]
 800823a:	429e      	cmp	r6, r3
 800823c:	4682      	mov	sl, r0
 800823e:	460c      	mov	r4, r1
 8008240:	4690      	mov	r8, r2
 8008242:	461f      	mov	r7, r3
 8008244:	d838      	bhi.n	80082b8 <__ssputs_r+0x84>
 8008246:	898a      	ldrh	r2, [r1, #12]
 8008248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800824c:	d032      	beq.n	80082b4 <__ssputs_r+0x80>
 800824e:	6825      	ldr	r5, [r4, #0]
 8008250:	6909      	ldr	r1, [r1, #16]
 8008252:	eba5 0901 	sub.w	r9, r5, r1
 8008256:	6965      	ldr	r5, [r4, #20]
 8008258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800825c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008260:	3301      	adds	r3, #1
 8008262:	444b      	add	r3, r9
 8008264:	106d      	asrs	r5, r5, #1
 8008266:	429d      	cmp	r5, r3
 8008268:	bf38      	it	cc
 800826a:	461d      	movcc	r5, r3
 800826c:	0553      	lsls	r3, r2, #21
 800826e:	d531      	bpl.n	80082d4 <__ssputs_r+0xa0>
 8008270:	4629      	mov	r1, r5
 8008272:	f7ff ff6b 	bl	800814c <_malloc_r>
 8008276:	4606      	mov	r6, r0
 8008278:	b950      	cbnz	r0, 8008290 <__ssputs_r+0x5c>
 800827a:	230c      	movs	r3, #12
 800827c:	f8ca 3000 	str.w	r3, [sl]
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008290:	6921      	ldr	r1, [r4, #16]
 8008292:	464a      	mov	r2, r9
 8008294:	f7ff fa08 	bl	80076a8 <memcpy>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800829e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a2:	81a3      	strh	r3, [r4, #12]
 80082a4:	6126      	str	r6, [r4, #16]
 80082a6:	6165      	str	r5, [r4, #20]
 80082a8:	444e      	add	r6, r9
 80082aa:	eba5 0509 	sub.w	r5, r5, r9
 80082ae:	6026      	str	r6, [r4, #0]
 80082b0:	60a5      	str	r5, [r4, #8]
 80082b2:	463e      	mov	r6, r7
 80082b4:	42be      	cmp	r6, r7
 80082b6:	d900      	bls.n	80082ba <__ssputs_r+0x86>
 80082b8:	463e      	mov	r6, r7
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	4632      	mov	r2, r6
 80082be:	4641      	mov	r1, r8
 80082c0:	f000 f980 	bl	80085c4 <memmove>
 80082c4:	68a3      	ldr	r3, [r4, #8]
 80082c6:	1b9b      	subs	r3, r3, r6
 80082c8:	60a3      	str	r3, [r4, #8]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	4433      	add	r3, r6
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	2000      	movs	r0, #0
 80082d2:	e7db      	b.n	800828c <__ssputs_r+0x58>
 80082d4:	462a      	mov	r2, r5
 80082d6:	f000 f99b 	bl	8008610 <_realloc_r>
 80082da:	4606      	mov	r6, r0
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1e1      	bne.n	80082a4 <__ssputs_r+0x70>
 80082e0:	6921      	ldr	r1, [r4, #16]
 80082e2:	4650      	mov	r0, sl
 80082e4:	f7ff fec6 	bl	8008074 <_free_r>
 80082e8:	e7c7      	b.n	800827a <__ssputs_r+0x46>
	...

080082ec <_svfiprintf_r>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4698      	mov	r8, r3
 80082f2:	898b      	ldrh	r3, [r1, #12]
 80082f4:	061b      	lsls	r3, r3, #24
 80082f6:	b09d      	sub	sp, #116	; 0x74
 80082f8:	4607      	mov	r7, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	d50e      	bpl.n	800831e <_svfiprintf_r+0x32>
 8008300:	690b      	ldr	r3, [r1, #16]
 8008302:	b963      	cbnz	r3, 800831e <_svfiprintf_r+0x32>
 8008304:	2140      	movs	r1, #64	; 0x40
 8008306:	f7ff ff21 	bl	800814c <_malloc_r>
 800830a:	6028      	str	r0, [r5, #0]
 800830c:	6128      	str	r0, [r5, #16]
 800830e:	b920      	cbnz	r0, 800831a <_svfiprintf_r+0x2e>
 8008310:	230c      	movs	r3, #12
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	e0d1      	b.n	80084be <_svfiprintf_r+0x1d2>
 800831a:	2340      	movs	r3, #64	; 0x40
 800831c:	616b      	str	r3, [r5, #20]
 800831e:	2300      	movs	r3, #0
 8008320:	9309      	str	r3, [sp, #36]	; 0x24
 8008322:	2320      	movs	r3, #32
 8008324:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008328:	f8cd 800c 	str.w	r8, [sp, #12]
 800832c:	2330      	movs	r3, #48	; 0x30
 800832e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084d8 <_svfiprintf_r+0x1ec>
 8008332:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008336:	f04f 0901 	mov.w	r9, #1
 800833a:	4623      	mov	r3, r4
 800833c:	469a      	mov	sl, r3
 800833e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008342:	b10a      	cbz	r2, 8008348 <_svfiprintf_r+0x5c>
 8008344:	2a25      	cmp	r2, #37	; 0x25
 8008346:	d1f9      	bne.n	800833c <_svfiprintf_r+0x50>
 8008348:	ebba 0b04 	subs.w	fp, sl, r4
 800834c:	d00b      	beq.n	8008366 <_svfiprintf_r+0x7a>
 800834e:	465b      	mov	r3, fp
 8008350:	4622      	mov	r2, r4
 8008352:	4629      	mov	r1, r5
 8008354:	4638      	mov	r0, r7
 8008356:	f7ff ff6d 	bl	8008234 <__ssputs_r>
 800835a:	3001      	adds	r0, #1
 800835c:	f000 80aa 	beq.w	80084b4 <_svfiprintf_r+0x1c8>
 8008360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008362:	445a      	add	r2, fp
 8008364:	9209      	str	r2, [sp, #36]	; 0x24
 8008366:	f89a 3000 	ldrb.w	r3, [sl]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 80a2 	beq.w	80084b4 <_svfiprintf_r+0x1c8>
 8008370:	2300      	movs	r3, #0
 8008372:	f04f 32ff 	mov.w	r2, #4294967295
 8008376:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837a:	f10a 0a01 	add.w	sl, sl, #1
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008386:	931a      	str	r3, [sp, #104]	; 0x68
 8008388:	4654      	mov	r4, sl
 800838a:	2205      	movs	r2, #5
 800838c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008390:	4851      	ldr	r0, [pc, #324]	; (80084d8 <_svfiprintf_r+0x1ec>)
 8008392:	f7f7 ff45 	bl	8000220 <memchr>
 8008396:	9a04      	ldr	r2, [sp, #16]
 8008398:	b9d8      	cbnz	r0, 80083d2 <_svfiprintf_r+0xe6>
 800839a:	06d0      	lsls	r0, r2, #27
 800839c:	bf44      	itt	mi
 800839e:	2320      	movmi	r3, #32
 80083a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a4:	0711      	lsls	r1, r2, #28
 80083a6:	bf44      	itt	mi
 80083a8:	232b      	movmi	r3, #43	; 0x2b
 80083aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ae:	f89a 3000 	ldrb.w	r3, [sl]
 80083b2:	2b2a      	cmp	r3, #42	; 0x2a
 80083b4:	d015      	beq.n	80083e2 <_svfiprintf_r+0xf6>
 80083b6:	9a07      	ldr	r2, [sp, #28]
 80083b8:	4654      	mov	r4, sl
 80083ba:	2000      	movs	r0, #0
 80083bc:	f04f 0c0a 	mov.w	ip, #10
 80083c0:	4621      	mov	r1, r4
 80083c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c6:	3b30      	subs	r3, #48	; 0x30
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d94e      	bls.n	800846a <_svfiprintf_r+0x17e>
 80083cc:	b1b0      	cbz	r0, 80083fc <_svfiprintf_r+0x110>
 80083ce:	9207      	str	r2, [sp, #28]
 80083d0:	e014      	b.n	80083fc <_svfiprintf_r+0x110>
 80083d2:	eba0 0308 	sub.w	r3, r0, r8
 80083d6:	fa09 f303 	lsl.w	r3, r9, r3
 80083da:	4313      	orrs	r3, r2
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	46a2      	mov	sl, r4
 80083e0:	e7d2      	b.n	8008388 <_svfiprintf_r+0x9c>
 80083e2:	9b03      	ldr	r3, [sp, #12]
 80083e4:	1d19      	adds	r1, r3, #4
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	9103      	str	r1, [sp, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bfbb      	ittet	lt
 80083ee:	425b      	neglt	r3, r3
 80083f0:	f042 0202 	orrlt.w	r2, r2, #2
 80083f4:	9307      	strge	r3, [sp, #28]
 80083f6:	9307      	strlt	r3, [sp, #28]
 80083f8:	bfb8      	it	lt
 80083fa:	9204      	strlt	r2, [sp, #16]
 80083fc:	7823      	ldrb	r3, [r4, #0]
 80083fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008400:	d10c      	bne.n	800841c <_svfiprintf_r+0x130>
 8008402:	7863      	ldrb	r3, [r4, #1]
 8008404:	2b2a      	cmp	r3, #42	; 0x2a
 8008406:	d135      	bne.n	8008474 <_svfiprintf_r+0x188>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9203      	str	r2, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfb8      	it	lt
 8008414:	f04f 33ff 	movlt.w	r3, #4294967295
 8008418:	3402      	adds	r4, #2
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084e8 <_svfiprintf_r+0x1fc>
 8008420:	7821      	ldrb	r1, [r4, #0]
 8008422:	2203      	movs	r2, #3
 8008424:	4650      	mov	r0, sl
 8008426:	f7f7 fefb 	bl	8000220 <memchr>
 800842a:	b140      	cbz	r0, 800843e <_svfiprintf_r+0x152>
 800842c:	2340      	movs	r3, #64	; 0x40
 800842e:	eba0 000a 	sub.w	r0, r0, sl
 8008432:	fa03 f000 	lsl.w	r0, r3, r0
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	4303      	orrs	r3, r0
 800843a:	3401      	adds	r4, #1
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008442:	4826      	ldr	r0, [pc, #152]	; (80084dc <_svfiprintf_r+0x1f0>)
 8008444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008448:	2206      	movs	r2, #6
 800844a:	f7f7 fee9 	bl	8000220 <memchr>
 800844e:	2800      	cmp	r0, #0
 8008450:	d038      	beq.n	80084c4 <_svfiprintf_r+0x1d8>
 8008452:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <_svfiprintf_r+0x1f4>)
 8008454:	bb1b      	cbnz	r3, 800849e <_svfiprintf_r+0x1b2>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	3307      	adds	r3, #7
 800845a:	f023 0307 	bic.w	r3, r3, #7
 800845e:	3308      	adds	r3, #8
 8008460:	9303      	str	r3, [sp, #12]
 8008462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008464:	4433      	add	r3, r6
 8008466:	9309      	str	r3, [sp, #36]	; 0x24
 8008468:	e767      	b.n	800833a <_svfiprintf_r+0x4e>
 800846a:	fb0c 3202 	mla	r2, ip, r2, r3
 800846e:	460c      	mov	r4, r1
 8008470:	2001      	movs	r0, #1
 8008472:	e7a5      	b.n	80083c0 <_svfiprintf_r+0xd4>
 8008474:	2300      	movs	r3, #0
 8008476:	3401      	adds	r4, #1
 8008478:	9305      	str	r3, [sp, #20]
 800847a:	4619      	mov	r1, r3
 800847c:	f04f 0c0a 	mov.w	ip, #10
 8008480:	4620      	mov	r0, r4
 8008482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008486:	3a30      	subs	r2, #48	; 0x30
 8008488:	2a09      	cmp	r2, #9
 800848a:	d903      	bls.n	8008494 <_svfiprintf_r+0x1a8>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0c5      	beq.n	800841c <_svfiprintf_r+0x130>
 8008490:	9105      	str	r1, [sp, #20]
 8008492:	e7c3      	b.n	800841c <_svfiprintf_r+0x130>
 8008494:	fb0c 2101 	mla	r1, ip, r1, r2
 8008498:	4604      	mov	r4, r0
 800849a:	2301      	movs	r3, #1
 800849c:	e7f0      	b.n	8008480 <_svfiprintf_r+0x194>
 800849e:	ab03      	add	r3, sp, #12
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	462a      	mov	r2, r5
 80084a4:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <_svfiprintf_r+0x1f8>)
 80084a6:	a904      	add	r1, sp, #16
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7fc fa3d 	bl	8004928 <_printf_float>
 80084ae:	1c42      	adds	r2, r0, #1
 80084b0:	4606      	mov	r6, r0
 80084b2:	d1d6      	bne.n	8008462 <_svfiprintf_r+0x176>
 80084b4:	89ab      	ldrh	r3, [r5, #12]
 80084b6:	065b      	lsls	r3, r3, #25
 80084b8:	f53f af2c 	bmi.w	8008314 <_svfiprintf_r+0x28>
 80084bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084be:	b01d      	add	sp, #116	; 0x74
 80084c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <_svfiprintf_r+0x1f8>)
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7fc fcce 	bl	8004e70 <_printf_i>
 80084d4:	e7eb      	b.n	80084ae <_svfiprintf_r+0x1c2>
 80084d6:	bf00      	nop
 80084d8:	0800a85c 	.word	0x0800a85c
 80084dc:	0800a866 	.word	0x0800a866
 80084e0:	08004929 	.word	0x08004929
 80084e4:	08008235 	.word	0x08008235
 80084e8:	0800a862 	.word	0x0800a862
 80084ec:	00000000 	.word	0x00000000

080084f0 <nan>:
 80084f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084f8 <nan+0x8>
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	00000000 	.word	0x00000000
 80084fc:	7ff80000 	.word	0x7ff80000

08008500 <_sbrk_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4d06      	ldr	r5, [pc, #24]	; (800851c <_sbrk_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	f7f9 fe04 	bl	8002118 <_sbrk>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_sbrk_r+0x1a>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	b103      	cbz	r3, 800851a <_sbrk_r+0x1a>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	20000314 	.word	0x20000314

08008520 <strncmp>:
 8008520:	b510      	push	{r4, lr}
 8008522:	b17a      	cbz	r2, 8008544 <strncmp+0x24>
 8008524:	4603      	mov	r3, r0
 8008526:	3901      	subs	r1, #1
 8008528:	1884      	adds	r4, r0, r2
 800852a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800852e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008532:	4290      	cmp	r0, r2
 8008534:	d101      	bne.n	800853a <strncmp+0x1a>
 8008536:	42a3      	cmp	r3, r4
 8008538:	d101      	bne.n	800853e <strncmp+0x1e>
 800853a:	1a80      	subs	r0, r0, r2
 800853c:	bd10      	pop	{r4, pc}
 800853e:	2800      	cmp	r0, #0
 8008540:	d1f3      	bne.n	800852a <strncmp+0xa>
 8008542:	e7fa      	b.n	800853a <strncmp+0x1a>
 8008544:	4610      	mov	r0, r2
 8008546:	e7f9      	b.n	800853c <strncmp+0x1c>

08008548 <__ascii_wctomb>:
 8008548:	b149      	cbz	r1, 800855e <__ascii_wctomb+0x16>
 800854a:	2aff      	cmp	r2, #255	; 0xff
 800854c:	bf85      	ittet	hi
 800854e:	238a      	movhi	r3, #138	; 0x8a
 8008550:	6003      	strhi	r3, [r0, #0]
 8008552:	700a      	strbls	r2, [r1, #0]
 8008554:	f04f 30ff 	movhi.w	r0, #4294967295
 8008558:	bf98      	it	ls
 800855a:	2001      	movls	r0, #1
 800855c:	4770      	bx	lr
 800855e:	4608      	mov	r0, r1
 8008560:	4770      	bx	lr
	...

08008564 <__assert_func>:
 8008564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008566:	4614      	mov	r4, r2
 8008568:	461a      	mov	r2, r3
 800856a:	4b09      	ldr	r3, [pc, #36]	; (8008590 <__assert_func+0x2c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4605      	mov	r5, r0
 8008570:	68d8      	ldr	r0, [r3, #12]
 8008572:	b14c      	cbz	r4, 8008588 <__assert_func+0x24>
 8008574:	4b07      	ldr	r3, [pc, #28]	; (8008594 <__assert_func+0x30>)
 8008576:	9100      	str	r1, [sp, #0]
 8008578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800857c:	4906      	ldr	r1, [pc, #24]	; (8008598 <__assert_func+0x34>)
 800857e:	462b      	mov	r3, r5
 8008580:	f000 f80e 	bl	80085a0 <fiprintf>
 8008584:	f000 fa8c 	bl	8008aa0 <abort>
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <__assert_func+0x38>)
 800858a:	461c      	mov	r4, r3
 800858c:	e7f3      	b.n	8008576 <__assert_func+0x12>
 800858e:	bf00      	nop
 8008590:	20000010 	.word	0x20000010
 8008594:	0800a86d 	.word	0x0800a86d
 8008598:	0800a87a 	.word	0x0800a87a
 800859c:	0800a8a8 	.word	0x0800a8a8

080085a0 <fiprintf>:
 80085a0:	b40e      	push	{r1, r2, r3}
 80085a2:	b503      	push	{r0, r1, lr}
 80085a4:	4601      	mov	r1, r0
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	4805      	ldr	r0, [pc, #20]	; (80085c0 <fiprintf+0x20>)
 80085aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ae:	6800      	ldr	r0, [r0, #0]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	f000 f885 	bl	80086c0 <_vfiprintf_r>
 80085b6:	b002      	add	sp, #8
 80085b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085bc:	b003      	add	sp, #12
 80085be:	4770      	bx	lr
 80085c0:	20000010 	.word	0x20000010

080085c4 <memmove>:
 80085c4:	4288      	cmp	r0, r1
 80085c6:	b510      	push	{r4, lr}
 80085c8:	eb01 0402 	add.w	r4, r1, r2
 80085cc:	d902      	bls.n	80085d4 <memmove+0x10>
 80085ce:	4284      	cmp	r4, r0
 80085d0:	4623      	mov	r3, r4
 80085d2:	d807      	bhi.n	80085e4 <memmove+0x20>
 80085d4:	1e43      	subs	r3, r0, #1
 80085d6:	42a1      	cmp	r1, r4
 80085d8:	d008      	beq.n	80085ec <memmove+0x28>
 80085da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085e2:	e7f8      	b.n	80085d6 <memmove+0x12>
 80085e4:	4402      	add	r2, r0
 80085e6:	4601      	mov	r1, r0
 80085e8:	428a      	cmp	r2, r1
 80085ea:	d100      	bne.n	80085ee <memmove+0x2a>
 80085ec:	bd10      	pop	{r4, pc}
 80085ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085f6:	e7f7      	b.n	80085e8 <memmove+0x24>

080085f8 <__malloc_lock>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__malloc_lock+0x8>)
 80085fa:	f000 bc11 	b.w	8008e20 <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	20000318 	.word	0x20000318

08008604 <__malloc_unlock>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__malloc_unlock+0x8>)
 8008606:	f000 bc0c 	b.w	8008e22 <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	20000318 	.word	0x20000318

08008610 <_realloc_r>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	4680      	mov	r8, r0
 8008616:	4614      	mov	r4, r2
 8008618:	460e      	mov	r6, r1
 800861a:	b921      	cbnz	r1, 8008626 <_realloc_r+0x16>
 800861c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	4611      	mov	r1, r2
 8008622:	f7ff bd93 	b.w	800814c <_malloc_r>
 8008626:	b92a      	cbnz	r2, 8008634 <_realloc_r+0x24>
 8008628:	f7ff fd24 	bl	8008074 <_free_r>
 800862c:	4625      	mov	r5, r4
 800862e:	4628      	mov	r0, r5
 8008630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008634:	f000 fc5c 	bl	8008ef0 <_malloc_usable_size_r>
 8008638:	4284      	cmp	r4, r0
 800863a:	4607      	mov	r7, r0
 800863c:	d802      	bhi.n	8008644 <_realloc_r+0x34>
 800863e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008642:	d812      	bhi.n	800866a <_realloc_r+0x5a>
 8008644:	4621      	mov	r1, r4
 8008646:	4640      	mov	r0, r8
 8008648:	f7ff fd80 	bl	800814c <_malloc_r>
 800864c:	4605      	mov	r5, r0
 800864e:	2800      	cmp	r0, #0
 8008650:	d0ed      	beq.n	800862e <_realloc_r+0x1e>
 8008652:	42bc      	cmp	r4, r7
 8008654:	4622      	mov	r2, r4
 8008656:	4631      	mov	r1, r6
 8008658:	bf28      	it	cs
 800865a:	463a      	movcs	r2, r7
 800865c:	f7ff f824 	bl	80076a8 <memcpy>
 8008660:	4631      	mov	r1, r6
 8008662:	4640      	mov	r0, r8
 8008664:	f7ff fd06 	bl	8008074 <_free_r>
 8008668:	e7e1      	b.n	800862e <_realloc_r+0x1e>
 800866a:	4635      	mov	r5, r6
 800866c:	e7df      	b.n	800862e <_realloc_r+0x1e>

0800866e <__sfputc_r>:
 800866e:	6893      	ldr	r3, [r2, #8]
 8008670:	3b01      	subs	r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	b410      	push	{r4}
 8008676:	6093      	str	r3, [r2, #8]
 8008678:	da08      	bge.n	800868c <__sfputc_r+0x1e>
 800867a:	6994      	ldr	r4, [r2, #24]
 800867c:	42a3      	cmp	r3, r4
 800867e:	db01      	blt.n	8008684 <__sfputc_r+0x16>
 8008680:	290a      	cmp	r1, #10
 8008682:	d103      	bne.n	800868c <__sfputc_r+0x1e>
 8008684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008688:	f000 b94a 	b.w	8008920 <__swbuf_r>
 800868c:	6813      	ldr	r3, [r2, #0]
 800868e:	1c58      	adds	r0, r3, #1
 8008690:	6010      	str	r0, [r2, #0]
 8008692:	7019      	strb	r1, [r3, #0]
 8008694:	4608      	mov	r0, r1
 8008696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800869a:	4770      	bx	lr

0800869c <__sfputs_r>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	4614      	mov	r4, r2
 80086a4:	18d5      	adds	r5, r2, r3
 80086a6:	42ac      	cmp	r4, r5
 80086a8:	d101      	bne.n	80086ae <__sfputs_r+0x12>
 80086aa:	2000      	movs	r0, #0
 80086ac:	e007      	b.n	80086be <__sfputs_r+0x22>
 80086ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b2:	463a      	mov	r2, r7
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7ff ffda 	bl	800866e <__sfputc_r>
 80086ba:	1c43      	adds	r3, r0, #1
 80086bc:	d1f3      	bne.n	80086a6 <__sfputs_r+0xa>
 80086be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086c0 <_vfiprintf_r>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	460d      	mov	r5, r1
 80086c6:	b09d      	sub	sp, #116	; 0x74
 80086c8:	4614      	mov	r4, r2
 80086ca:	4698      	mov	r8, r3
 80086cc:	4606      	mov	r6, r0
 80086ce:	b118      	cbz	r0, 80086d8 <_vfiprintf_r+0x18>
 80086d0:	6983      	ldr	r3, [r0, #24]
 80086d2:	b90b      	cbnz	r3, 80086d8 <_vfiprintf_r+0x18>
 80086d4:	f000 fb06 	bl	8008ce4 <__sinit>
 80086d8:	4b89      	ldr	r3, [pc, #548]	; (8008900 <_vfiprintf_r+0x240>)
 80086da:	429d      	cmp	r5, r3
 80086dc:	d11b      	bne.n	8008716 <_vfiprintf_r+0x56>
 80086de:	6875      	ldr	r5, [r6, #4]
 80086e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086e2:	07d9      	lsls	r1, r3, #31
 80086e4:	d405      	bmi.n	80086f2 <_vfiprintf_r+0x32>
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	059a      	lsls	r2, r3, #22
 80086ea:	d402      	bmi.n	80086f2 <_vfiprintf_r+0x32>
 80086ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ee:	f000 fb97 	bl	8008e20 <__retarget_lock_acquire_recursive>
 80086f2:	89ab      	ldrh	r3, [r5, #12]
 80086f4:	071b      	lsls	r3, r3, #28
 80086f6:	d501      	bpl.n	80086fc <_vfiprintf_r+0x3c>
 80086f8:	692b      	ldr	r3, [r5, #16]
 80086fa:	b9eb      	cbnz	r3, 8008738 <_vfiprintf_r+0x78>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4630      	mov	r0, r6
 8008700:	f000 f960 	bl	80089c4 <__swsetup_r>
 8008704:	b1c0      	cbz	r0, 8008738 <_vfiprintf_r+0x78>
 8008706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008708:	07dc      	lsls	r4, r3, #31
 800870a:	d50e      	bpl.n	800872a <_vfiprintf_r+0x6a>
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	b01d      	add	sp, #116	; 0x74
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008716:	4b7b      	ldr	r3, [pc, #492]	; (8008904 <_vfiprintf_r+0x244>)
 8008718:	429d      	cmp	r5, r3
 800871a:	d101      	bne.n	8008720 <_vfiprintf_r+0x60>
 800871c:	68b5      	ldr	r5, [r6, #8]
 800871e:	e7df      	b.n	80086e0 <_vfiprintf_r+0x20>
 8008720:	4b79      	ldr	r3, [pc, #484]	; (8008908 <_vfiprintf_r+0x248>)
 8008722:	429d      	cmp	r5, r3
 8008724:	bf08      	it	eq
 8008726:	68f5      	ldreq	r5, [r6, #12]
 8008728:	e7da      	b.n	80086e0 <_vfiprintf_r+0x20>
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	0598      	lsls	r0, r3, #22
 800872e:	d4ed      	bmi.n	800870c <_vfiprintf_r+0x4c>
 8008730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008732:	f000 fb76 	bl	8008e22 <__retarget_lock_release_recursive>
 8008736:	e7e9      	b.n	800870c <_vfiprintf_r+0x4c>
 8008738:	2300      	movs	r3, #0
 800873a:	9309      	str	r3, [sp, #36]	; 0x24
 800873c:	2320      	movs	r3, #32
 800873e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008742:	f8cd 800c 	str.w	r8, [sp, #12]
 8008746:	2330      	movs	r3, #48	; 0x30
 8008748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800890c <_vfiprintf_r+0x24c>
 800874c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008750:	f04f 0901 	mov.w	r9, #1
 8008754:	4623      	mov	r3, r4
 8008756:	469a      	mov	sl, r3
 8008758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800875c:	b10a      	cbz	r2, 8008762 <_vfiprintf_r+0xa2>
 800875e:	2a25      	cmp	r2, #37	; 0x25
 8008760:	d1f9      	bne.n	8008756 <_vfiprintf_r+0x96>
 8008762:	ebba 0b04 	subs.w	fp, sl, r4
 8008766:	d00b      	beq.n	8008780 <_vfiprintf_r+0xc0>
 8008768:	465b      	mov	r3, fp
 800876a:	4622      	mov	r2, r4
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff ff94 	bl	800869c <__sfputs_r>
 8008774:	3001      	adds	r0, #1
 8008776:	f000 80aa 	beq.w	80088ce <_vfiprintf_r+0x20e>
 800877a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800877c:	445a      	add	r2, fp
 800877e:	9209      	str	r2, [sp, #36]	; 0x24
 8008780:	f89a 3000 	ldrb.w	r3, [sl]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 80a2 	beq.w	80088ce <_vfiprintf_r+0x20e>
 800878a:	2300      	movs	r3, #0
 800878c:	f04f 32ff 	mov.w	r2, #4294967295
 8008790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008794:	f10a 0a01 	add.w	sl, sl, #1
 8008798:	9304      	str	r3, [sp, #16]
 800879a:	9307      	str	r3, [sp, #28]
 800879c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087a0:	931a      	str	r3, [sp, #104]	; 0x68
 80087a2:	4654      	mov	r4, sl
 80087a4:	2205      	movs	r2, #5
 80087a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087aa:	4858      	ldr	r0, [pc, #352]	; (800890c <_vfiprintf_r+0x24c>)
 80087ac:	f7f7 fd38 	bl	8000220 <memchr>
 80087b0:	9a04      	ldr	r2, [sp, #16]
 80087b2:	b9d8      	cbnz	r0, 80087ec <_vfiprintf_r+0x12c>
 80087b4:	06d1      	lsls	r1, r2, #27
 80087b6:	bf44      	itt	mi
 80087b8:	2320      	movmi	r3, #32
 80087ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087be:	0713      	lsls	r3, r2, #28
 80087c0:	bf44      	itt	mi
 80087c2:	232b      	movmi	r3, #43	; 0x2b
 80087c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087c8:	f89a 3000 	ldrb.w	r3, [sl]
 80087cc:	2b2a      	cmp	r3, #42	; 0x2a
 80087ce:	d015      	beq.n	80087fc <_vfiprintf_r+0x13c>
 80087d0:	9a07      	ldr	r2, [sp, #28]
 80087d2:	4654      	mov	r4, sl
 80087d4:	2000      	movs	r0, #0
 80087d6:	f04f 0c0a 	mov.w	ip, #10
 80087da:	4621      	mov	r1, r4
 80087dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087e0:	3b30      	subs	r3, #48	; 0x30
 80087e2:	2b09      	cmp	r3, #9
 80087e4:	d94e      	bls.n	8008884 <_vfiprintf_r+0x1c4>
 80087e6:	b1b0      	cbz	r0, 8008816 <_vfiprintf_r+0x156>
 80087e8:	9207      	str	r2, [sp, #28]
 80087ea:	e014      	b.n	8008816 <_vfiprintf_r+0x156>
 80087ec:	eba0 0308 	sub.w	r3, r0, r8
 80087f0:	fa09 f303 	lsl.w	r3, r9, r3
 80087f4:	4313      	orrs	r3, r2
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	46a2      	mov	sl, r4
 80087fa:	e7d2      	b.n	80087a2 <_vfiprintf_r+0xe2>
 80087fc:	9b03      	ldr	r3, [sp, #12]
 80087fe:	1d19      	adds	r1, r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	9103      	str	r1, [sp, #12]
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfbb      	ittet	lt
 8008808:	425b      	neglt	r3, r3
 800880a:	f042 0202 	orrlt.w	r2, r2, #2
 800880e:	9307      	strge	r3, [sp, #28]
 8008810:	9307      	strlt	r3, [sp, #28]
 8008812:	bfb8      	it	lt
 8008814:	9204      	strlt	r2, [sp, #16]
 8008816:	7823      	ldrb	r3, [r4, #0]
 8008818:	2b2e      	cmp	r3, #46	; 0x2e
 800881a:	d10c      	bne.n	8008836 <_vfiprintf_r+0x176>
 800881c:	7863      	ldrb	r3, [r4, #1]
 800881e:	2b2a      	cmp	r3, #42	; 0x2a
 8008820:	d135      	bne.n	800888e <_vfiprintf_r+0x1ce>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	9203      	str	r2, [sp, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	bfb8      	it	lt
 800882e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008832:	3402      	adds	r4, #2
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800891c <_vfiprintf_r+0x25c>
 800883a:	7821      	ldrb	r1, [r4, #0]
 800883c:	2203      	movs	r2, #3
 800883e:	4650      	mov	r0, sl
 8008840:	f7f7 fcee 	bl	8000220 <memchr>
 8008844:	b140      	cbz	r0, 8008858 <_vfiprintf_r+0x198>
 8008846:	2340      	movs	r3, #64	; 0x40
 8008848:	eba0 000a 	sub.w	r0, r0, sl
 800884c:	fa03 f000 	lsl.w	r0, r3, r0
 8008850:	9b04      	ldr	r3, [sp, #16]
 8008852:	4303      	orrs	r3, r0
 8008854:	3401      	adds	r4, #1
 8008856:	9304      	str	r3, [sp, #16]
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	482c      	ldr	r0, [pc, #176]	; (8008910 <_vfiprintf_r+0x250>)
 800885e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008862:	2206      	movs	r2, #6
 8008864:	f7f7 fcdc 	bl	8000220 <memchr>
 8008868:	2800      	cmp	r0, #0
 800886a:	d03f      	beq.n	80088ec <_vfiprintf_r+0x22c>
 800886c:	4b29      	ldr	r3, [pc, #164]	; (8008914 <_vfiprintf_r+0x254>)
 800886e:	bb1b      	cbnz	r3, 80088b8 <_vfiprintf_r+0x1f8>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	3307      	adds	r3, #7
 8008874:	f023 0307 	bic.w	r3, r3, #7
 8008878:	3308      	adds	r3, #8
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887e:	443b      	add	r3, r7
 8008880:	9309      	str	r3, [sp, #36]	; 0x24
 8008882:	e767      	b.n	8008754 <_vfiprintf_r+0x94>
 8008884:	fb0c 3202 	mla	r2, ip, r2, r3
 8008888:	460c      	mov	r4, r1
 800888a:	2001      	movs	r0, #1
 800888c:	e7a5      	b.n	80087da <_vfiprintf_r+0x11a>
 800888e:	2300      	movs	r3, #0
 8008890:	3401      	adds	r4, #1
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	4619      	mov	r1, r3
 8008896:	f04f 0c0a 	mov.w	ip, #10
 800889a:	4620      	mov	r0, r4
 800889c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a0:	3a30      	subs	r2, #48	; 0x30
 80088a2:	2a09      	cmp	r2, #9
 80088a4:	d903      	bls.n	80088ae <_vfiprintf_r+0x1ee>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0c5      	beq.n	8008836 <_vfiprintf_r+0x176>
 80088aa:	9105      	str	r1, [sp, #20]
 80088ac:	e7c3      	b.n	8008836 <_vfiprintf_r+0x176>
 80088ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b2:	4604      	mov	r4, r0
 80088b4:	2301      	movs	r3, #1
 80088b6:	e7f0      	b.n	800889a <_vfiprintf_r+0x1da>
 80088b8:	ab03      	add	r3, sp, #12
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	462a      	mov	r2, r5
 80088be:	4b16      	ldr	r3, [pc, #88]	; (8008918 <_vfiprintf_r+0x258>)
 80088c0:	a904      	add	r1, sp, #16
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7fc f830 	bl	8004928 <_printf_float>
 80088c8:	4607      	mov	r7, r0
 80088ca:	1c78      	adds	r0, r7, #1
 80088cc:	d1d6      	bne.n	800887c <_vfiprintf_r+0x1bc>
 80088ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088d0:	07d9      	lsls	r1, r3, #31
 80088d2:	d405      	bmi.n	80088e0 <_vfiprintf_r+0x220>
 80088d4:	89ab      	ldrh	r3, [r5, #12]
 80088d6:	059a      	lsls	r2, r3, #22
 80088d8:	d402      	bmi.n	80088e0 <_vfiprintf_r+0x220>
 80088da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088dc:	f000 faa1 	bl	8008e22 <__retarget_lock_release_recursive>
 80088e0:	89ab      	ldrh	r3, [r5, #12]
 80088e2:	065b      	lsls	r3, r3, #25
 80088e4:	f53f af12 	bmi.w	800870c <_vfiprintf_r+0x4c>
 80088e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ea:	e711      	b.n	8008710 <_vfiprintf_r+0x50>
 80088ec:	ab03      	add	r3, sp, #12
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	462a      	mov	r2, r5
 80088f2:	4b09      	ldr	r3, [pc, #36]	; (8008918 <_vfiprintf_r+0x258>)
 80088f4:	a904      	add	r1, sp, #16
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7fc faba 	bl	8004e70 <_printf_i>
 80088fc:	e7e4      	b.n	80088c8 <_vfiprintf_r+0x208>
 80088fe:	bf00      	nop
 8008900:	0800a8cc 	.word	0x0800a8cc
 8008904:	0800a8ec 	.word	0x0800a8ec
 8008908:	0800a8ac 	.word	0x0800a8ac
 800890c:	0800a85c 	.word	0x0800a85c
 8008910:	0800a866 	.word	0x0800a866
 8008914:	08004929 	.word	0x08004929
 8008918:	0800869d 	.word	0x0800869d
 800891c:	0800a862 	.word	0x0800a862

08008920 <__swbuf_r>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	460e      	mov	r6, r1
 8008924:	4614      	mov	r4, r2
 8008926:	4605      	mov	r5, r0
 8008928:	b118      	cbz	r0, 8008932 <__swbuf_r+0x12>
 800892a:	6983      	ldr	r3, [r0, #24]
 800892c:	b90b      	cbnz	r3, 8008932 <__swbuf_r+0x12>
 800892e:	f000 f9d9 	bl	8008ce4 <__sinit>
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <__swbuf_r+0x98>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d12b      	bne.n	8008990 <__swbuf_r+0x70>
 8008938:	686c      	ldr	r4, [r5, #4]
 800893a:	69a3      	ldr	r3, [r4, #24]
 800893c:	60a3      	str	r3, [r4, #8]
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	071a      	lsls	r2, r3, #28
 8008942:	d52f      	bpl.n	80089a4 <__swbuf_r+0x84>
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	b36b      	cbz	r3, 80089a4 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	1ac0      	subs	r0, r0, r3
 800894e:	6963      	ldr	r3, [r4, #20]
 8008950:	b2f6      	uxtb	r6, r6
 8008952:	4283      	cmp	r3, r0
 8008954:	4637      	mov	r7, r6
 8008956:	dc04      	bgt.n	8008962 <__swbuf_r+0x42>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f92e 	bl	8008bbc <_fflush_r>
 8008960:	bb30      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	3b01      	subs	r3, #1
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	701e      	strb	r6, [r3, #0]
 8008970:	6963      	ldr	r3, [r4, #20]
 8008972:	3001      	adds	r0, #1
 8008974:	4283      	cmp	r3, r0
 8008976:	d004      	beq.n	8008982 <__swbuf_r+0x62>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d506      	bpl.n	800898c <__swbuf_r+0x6c>
 800897e:	2e0a      	cmp	r6, #10
 8008980:	d104      	bne.n	800898c <__swbuf_r+0x6c>
 8008982:	4621      	mov	r1, r4
 8008984:	4628      	mov	r0, r5
 8008986:	f000 f919 	bl	8008bbc <_fflush_r>
 800898a:	b988      	cbnz	r0, 80089b0 <__swbuf_r+0x90>
 800898c:	4638      	mov	r0, r7
 800898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008990:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <__swbuf_r+0x9c>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d101      	bne.n	800899a <__swbuf_r+0x7a>
 8008996:	68ac      	ldr	r4, [r5, #8]
 8008998:	e7cf      	b.n	800893a <__swbuf_r+0x1a>
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <__swbuf_r+0xa0>)
 800899c:	429c      	cmp	r4, r3
 800899e:	bf08      	it	eq
 80089a0:	68ec      	ldreq	r4, [r5, #12]
 80089a2:	e7ca      	b.n	800893a <__swbuf_r+0x1a>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f80c 	bl	80089c4 <__swsetup_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d0cb      	beq.n	8008948 <__swbuf_r+0x28>
 80089b0:	f04f 37ff 	mov.w	r7, #4294967295
 80089b4:	e7ea      	b.n	800898c <__swbuf_r+0x6c>
 80089b6:	bf00      	nop
 80089b8:	0800a8cc 	.word	0x0800a8cc
 80089bc:	0800a8ec 	.word	0x0800a8ec
 80089c0:	0800a8ac 	.word	0x0800a8ac

080089c4 <__swsetup_r>:
 80089c4:	4b32      	ldr	r3, [pc, #200]	; (8008a90 <__swsetup_r+0xcc>)
 80089c6:	b570      	push	{r4, r5, r6, lr}
 80089c8:	681d      	ldr	r5, [r3, #0]
 80089ca:	4606      	mov	r6, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	b125      	cbz	r5, 80089da <__swsetup_r+0x16>
 80089d0:	69ab      	ldr	r3, [r5, #24]
 80089d2:	b913      	cbnz	r3, 80089da <__swsetup_r+0x16>
 80089d4:	4628      	mov	r0, r5
 80089d6:	f000 f985 	bl	8008ce4 <__sinit>
 80089da:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <__swsetup_r+0xd0>)
 80089dc:	429c      	cmp	r4, r3
 80089de:	d10f      	bne.n	8008a00 <__swsetup_r+0x3c>
 80089e0:	686c      	ldr	r4, [r5, #4]
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e8:	0719      	lsls	r1, r3, #28
 80089ea:	d42c      	bmi.n	8008a46 <__swsetup_r+0x82>
 80089ec:	06dd      	lsls	r5, r3, #27
 80089ee:	d411      	bmi.n	8008a14 <__swsetup_r+0x50>
 80089f0:	2309      	movs	r3, #9
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	e03e      	b.n	8008a7e <__swsetup_r+0xba>
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <__swsetup_r+0xd4>)
 8008a02:	429c      	cmp	r4, r3
 8008a04:	d101      	bne.n	8008a0a <__swsetup_r+0x46>
 8008a06:	68ac      	ldr	r4, [r5, #8]
 8008a08:	e7eb      	b.n	80089e2 <__swsetup_r+0x1e>
 8008a0a:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <__swsetup_r+0xd8>)
 8008a0c:	429c      	cmp	r4, r3
 8008a0e:	bf08      	it	eq
 8008a10:	68ec      	ldreq	r4, [r5, #12]
 8008a12:	e7e6      	b.n	80089e2 <__swsetup_r+0x1e>
 8008a14:	0758      	lsls	r0, r3, #29
 8008a16:	d512      	bpl.n	8008a3e <__swsetup_r+0x7a>
 8008a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a1a:	b141      	cbz	r1, 8008a2e <__swsetup_r+0x6a>
 8008a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a20:	4299      	cmp	r1, r3
 8008a22:	d002      	beq.n	8008a2a <__swsetup_r+0x66>
 8008a24:	4630      	mov	r0, r6
 8008a26:	f7ff fb25 	bl	8008074 <_free_r>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	f043 0308 	orr.w	r3, r3, #8
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	b94b      	cbnz	r3, 8008a5e <__swsetup_r+0x9a>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a54:	d003      	beq.n	8008a5e <__swsetup_r+0x9a>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4630      	mov	r0, r6
 8008a5a:	f000 fa09 	bl	8008e70 <__smakebuf_r>
 8008a5e:	89a0      	ldrh	r0, [r4, #12]
 8008a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a64:	f010 0301 	ands.w	r3, r0, #1
 8008a68:	d00a      	beq.n	8008a80 <__swsetup_r+0xbc>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	6963      	ldr	r3, [r4, #20]
 8008a70:	425b      	negs	r3, r3
 8008a72:	61a3      	str	r3, [r4, #24]
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	b943      	cbnz	r3, 8008a8a <__swsetup_r+0xc6>
 8008a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a7c:	d1ba      	bne.n	80089f4 <__swsetup_r+0x30>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	0781      	lsls	r1, r0, #30
 8008a82:	bf58      	it	pl
 8008a84:	6963      	ldrpl	r3, [r4, #20]
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	e7f4      	b.n	8008a74 <__swsetup_r+0xb0>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e7f7      	b.n	8008a7e <__swsetup_r+0xba>
 8008a8e:	bf00      	nop
 8008a90:	20000010 	.word	0x20000010
 8008a94:	0800a8cc 	.word	0x0800a8cc
 8008a98:	0800a8ec 	.word	0x0800a8ec
 8008a9c:	0800a8ac 	.word	0x0800a8ac

08008aa0 <abort>:
 8008aa0:	b508      	push	{r3, lr}
 8008aa2:	2006      	movs	r0, #6
 8008aa4:	f000 fa54 	bl	8008f50 <raise>
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	f7f9 faa7 	bl	8001ffc <_exit>
	...

08008ab0 <__sflush_r>:
 8008ab0:	898a      	ldrh	r2, [r1, #12]
 8008ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	0710      	lsls	r0, r2, #28
 8008aba:	460c      	mov	r4, r1
 8008abc:	d458      	bmi.n	8008b70 <__sflush_r+0xc0>
 8008abe:	684b      	ldr	r3, [r1, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dc05      	bgt.n	8008ad0 <__sflush_r+0x20>
 8008ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dc02      	bgt.n	8008ad0 <__sflush_r+0x20>
 8008aca:	2000      	movs	r0, #0
 8008acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	d0f9      	beq.n	8008aca <__sflush_r+0x1a>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008adc:	682f      	ldr	r7, [r5, #0]
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	d032      	beq.n	8008b48 <__sflush_r+0x98>
 8008ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	075a      	lsls	r2, r3, #29
 8008ae8:	d505      	bpl.n	8008af6 <__sflush_r+0x46>
 8008aea:	6863      	ldr	r3, [r4, #4]
 8008aec:	1ac0      	subs	r0, r0, r3
 8008aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008af0:	b10b      	cbz	r3, 8008af6 <__sflush_r+0x46>
 8008af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008af4:	1ac0      	subs	r0, r0, r3
 8008af6:	2300      	movs	r3, #0
 8008af8:	4602      	mov	r2, r0
 8008afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afc:	6a21      	ldr	r1, [r4, #32]
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b0      	blx	r6
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	d106      	bne.n	8008b16 <__sflush_r+0x66>
 8008b08:	6829      	ldr	r1, [r5, #0]
 8008b0a:	291d      	cmp	r1, #29
 8008b0c:	d82c      	bhi.n	8008b68 <__sflush_r+0xb8>
 8008b0e:	4a2a      	ldr	r2, [pc, #168]	; (8008bb8 <__sflush_r+0x108>)
 8008b10:	40ca      	lsrs	r2, r1
 8008b12:	07d6      	lsls	r6, r2, #31
 8008b14:	d528      	bpl.n	8008b68 <__sflush_r+0xb8>
 8008b16:	2200      	movs	r2, #0
 8008b18:	6062      	str	r2, [r4, #4]
 8008b1a:	04d9      	lsls	r1, r3, #19
 8008b1c:	6922      	ldr	r2, [r4, #16]
 8008b1e:	6022      	str	r2, [r4, #0]
 8008b20:	d504      	bpl.n	8008b2c <__sflush_r+0x7c>
 8008b22:	1c42      	adds	r2, r0, #1
 8008b24:	d101      	bne.n	8008b2a <__sflush_r+0x7a>
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	b903      	cbnz	r3, 8008b2c <__sflush_r+0x7c>
 8008b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2e:	602f      	str	r7, [r5, #0]
 8008b30:	2900      	cmp	r1, #0
 8008b32:	d0ca      	beq.n	8008aca <__sflush_r+0x1a>
 8008b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	d002      	beq.n	8008b42 <__sflush_r+0x92>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f7ff fa99 	bl	8008074 <_free_r>
 8008b42:	2000      	movs	r0, #0
 8008b44:	6360      	str	r0, [r4, #52]	; 0x34
 8008b46:	e7c1      	b.n	8008acc <__sflush_r+0x1c>
 8008b48:	6a21      	ldr	r1, [r4, #32]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b0      	blx	r6
 8008b50:	1c41      	adds	r1, r0, #1
 8008b52:	d1c7      	bne.n	8008ae4 <__sflush_r+0x34>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0c4      	beq.n	8008ae4 <__sflush_r+0x34>
 8008b5a:	2b1d      	cmp	r3, #29
 8008b5c:	d001      	beq.n	8008b62 <__sflush_r+0xb2>
 8008b5e:	2b16      	cmp	r3, #22
 8008b60:	d101      	bne.n	8008b66 <__sflush_r+0xb6>
 8008b62:	602f      	str	r7, [r5, #0]
 8008b64:	e7b1      	b.n	8008aca <__sflush_r+0x1a>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	e7ad      	b.n	8008acc <__sflush_r+0x1c>
 8008b70:	690f      	ldr	r7, [r1, #16]
 8008b72:	2f00      	cmp	r7, #0
 8008b74:	d0a9      	beq.n	8008aca <__sflush_r+0x1a>
 8008b76:	0793      	lsls	r3, r2, #30
 8008b78:	680e      	ldr	r6, [r1, #0]
 8008b7a:	bf08      	it	eq
 8008b7c:	694b      	ldreq	r3, [r1, #20]
 8008b7e:	600f      	str	r7, [r1, #0]
 8008b80:	bf18      	it	ne
 8008b82:	2300      	movne	r3, #0
 8008b84:	eba6 0807 	sub.w	r8, r6, r7
 8008b88:	608b      	str	r3, [r1, #8]
 8008b8a:	f1b8 0f00 	cmp.w	r8, #0
 8008b8e:	dd9c      	ble.n	8008aca <__sflush_r+0x1a>
 8008b90:	6a21      	ldr	r1, [r4, #32]
 8008b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b94:	4643      	mov	r3, r8
 8008b96:	463a      	mov	r2, r7
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b0      	blx	r6
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	dc06      	bgt.n	8008bae <__sflush_r+0xfe>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e78e      	b.n	8008acc <__sflush_r+0x1c>
 8008bae:	4407      	add	r7, r0
 8008bb0:	eba8 0800 	sub.w	r8, r8, r0
 8008bb4:	e7e9      	b.n	8008b8a <__sflush_r+0xda>
 8008bb6:	bf00      	nop
 8008bb8:	20400001 	.word	0x20400001

08008bbc <_fflush_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	690b      	ldr	r3, [r1, #16]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	b913      	cbnz	r3, 8008bcc <_fflush_r+0x10>
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	4628      	mov	r0, r5
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	b118      	cbz	r0, 8008bd6 <_fflush_r+0x1a>
 8008bce:	6983      	ldr	r3, [r0, #24]
 8008bd0:	b90b      	cbnz	r3, 8008bd6 <_fflush_r+0x1a>
 8008bd2:	f000 f887 	bl	8008ce4 <__sinit>
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <_fflush_r+0x6c>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	d11b      	bne.n	8008c14 <_fflush_r+0x58>
 8008bdc:	686c      	ldr	r4, [r5, #4]
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0ef      	beq.n	8008bc6 <_fflush_r+0xa>
 8008be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008be8:	07d0      	lsls	r0, r2, #31
 8008bea:	d404      	bmi.n	8008bf6 <_fflush_r+0x3a>
 8008bec:	0599      	lsls	r1, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_fflush_r+0x3a>
 8008bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf2:	f000 f915 	bl	8008e20 <__retarget_lock_acquire_recursive>
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	f7ff ff59 	bl	8008ab0 <__sflush_r>
 8008bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c00:	07da      	lsls	r2, r3, #31
 8008c02:	4605      	mov	r5, r0
 8008c04:	d4e0      	bmi.n	8008bc8 <_fflush_r+0xc>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	059b      	lsls	r3, r3, #22
 8008c0a:	d4dd      	bmi.n	8008bc8 <_fflush_r+0xc>
 8008c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0e:	f000 f908 	bl	8008e22 <__retarget_lock_release_recursive>
 8008c12:	e7d9      	b.n	8008bc8 <_fflush_r+0xc>
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <_fflush_r+0x70>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d101      	bne.n	8008c1e <_fflush_r+0x62>
 8008c1a:	68ac      	ldr	r4, [r5, #8]
 8008c1c:	e7df      	b.n	8008bde <_fflush_r+0x22>
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <_fflush_r+0x74>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	bf08      	it	eq
 8008c24:	68ec      	ldreq	r4, [r5, #12]
 8008c26:	e7da      	b.n	8008bde <_fflush_r+0x22>
 8008c28:	0800a8cc 	.word	0x0800a8cc
 8008c2c:	0800a8ec 	.word	0x0800a8ec
 8008c30:	0800a8ac 	.word	0x0800a8ac

08008c34 <std>:
 8008c34:	2300      	movs	r3, #0
 8008c36:	b510      	push	{r4, lr}
 8008c38:	4604      	mov	r4, r0
 8008c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c42:	6083      	str	r3, [r0, #8]
 8008c44:	8181      	strh	r1, [r0, #12]
 8008c46:	6643      	str	r3, [r0, #100]	; 0x64
 8008c48:	81c2      	strh	r2, [r0, #14]
 8008c4a:	6183      	str	r3, [r0, #24]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	2208      	movs	r2, #8
 8008c50:	305c      	adds	r0, #92	; 0x5c
 8008c52:	f7fb fdc1 	bl	80047d8 <memset>
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <std+0x38>)
 8008c58:	6263      	str	r3, [r4, #36]	; 0x24
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <std+0x3c>)
 8008c5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x40>)
 8008c60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <std+0x44>)
 8008c64:	6224      	str	r4, [r4, #32]
 8008c66:	6323      	str	r3, [r4, #48]	; 0x30
 8008c68:	bd10      	pop	{r4, pc}
 8008c6a:	bf00      	nop
 8008c6c:	08008f89 	.word	0x08008f89
 8008c70:	08008fab 	.word	0x08008fab
 8008c74:	08008fe3 	.word	0x08008fe3
 8008c78:	08009007 	.word	0x08009007

08008c7c <_cleanup_r>:
 8008c7c:	4901      	ldr	r1, [pc, #4]	; (8008c84 <_cleanup_r+0x8>)
 8008c7e:	f000 b8af 	b.w	8008de0 <_fwalk_reent>
 8008c82:	bf00      	nop
 8008c84:	08008bbd 	.word	0x08008bbd

08008c88 <__sfmoreglue>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	2268      	movs	r2, #104	; 0x68
 8008c8c:	1e4d      	subs	r5, r1, #1
 8008c8e:	4355      	muls	r5, r2
 8008c90:	460e      	mov	r6, r1
 8008c92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c96:	f7ff fa59 	bl	800814c <_malloc_r>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	b140      	cbz	r0, 8008cb0 <__sfmoreglue+0x28>
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ca4:	300c      	adds	r0, #12
 8008ca6:	60a0      	str	r0, [r4, #8]
 8008ca8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cac:	f7fb fd94 	bl	80047d8 <memset>
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}

08008cb4 <__sfp_lock_acquire>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__sfp_lock_acquire+0x8>)
 8008cb6:	f000 b8b3 	b.w	8008e20 <__retarget_lock_acquire_recursive>
 8008cba:	bf00      	nop
 8008cbc:	20000319 	.word	0x20000319

08008cc0 <__sfp_lock_release>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	; (8008cc8 <__sfp_lock_release+0x8>)
 8008cc2:	f000 b8ae 	b.w	8008e22 <__retarget_lock_release_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	20000319 	.word	0x20000319

08008ccc <__sinit_lock_acquire>:
 8008ccc:	4801      	ldr	r0, [pc, #4]	; (8008cd4 <__sinit_lock_acquire+0x8>)
 8008cce:	f000 b8a7 	b.w	8008e20 <__retarget_lock_acquire_recursive>
 8008cd2:	bf00      	nop
 8008cd4:	2000031a 	.word	0x2000031a

08008cd8 <__sinit_lock_release>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__sinit_lock_release+0x8>)
 8008cda:	f000 b8a2 	b.w	8008e22 <__retarget_lock_release_recursive>
 8008cde:	bf00      	nop
 8008ce0:	2000031a 	.word	0x2000031a

08008ce4 <__sinit>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	f7ff fff0 	bl	8008ccc <__sinit_lock_acquire>
 8008cec:	69a3      	ldr	r3, [r4, #24]
 8008cee:	b11b      	cbz	r3, 8008cf8 <__sinit+0x14>
 8008cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf4:	f7ff bff0 	b.w	8008cd8 <__sinit_lock_release>
 8008cf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cfc:	6523      	str	r3, [r4, #80]	; 0x50
 8008cfe:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <__sinit+0x68>)
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <__sinit+0x6c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	bf04      	itt	eq
 8008d0a:	2301      	moveq	r3, #1
 8008d0c:	61a3      	streq	r3, [r4, #24]
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 f820 	bl	8008d54 <__sfp>
 8008d14:	6060      	str	r0, [r4, #4]
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 f81c 	bl	8008d54 <__sfp>
 8008d1c:	60a0      	str	r0, [r4, #8]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 f818 	bl	8008d54 <__sfp>
 8008d24:	2200      	movs	r2, #0
 8008d26:	60e0      	str	r0, [r4, #12]
 8008d28:	2104      	movs	r1, #4
 8008d2a:	6860      	ldr	r0, [r4, #4]
 8008d2c:	f7ff ff82 	bl	8008c34 <std>
 8008d30:	68a0      	ldr	r0, [r4, #8]
 8008d32:	2201      	movs	r2, #1
 8008d34:	2109      	movs	r1, #9
 8008d36:	f7ff ff7d 	bl	8008c34 <std>
 8008d3a:	68e0      	ldr	r0, [r4, #12]
 8008d3c:	2202      	movs	r2, #2
 8008d3e:	2112      	movs	r1, #18
 8008d40:	f7ff ff78 	bl	8008c34 <std>
 8008d44:	2301      	movs	r3, #1
 8008d46:	61a3      	str	r3, [r4, #24]
 8008d48:	e7d2      	b.n	8008cf0 <__sinit+0xc>
 8008d4a:	bf00      	nop
 8008d4c:	0800a464 	.word	0x0800a464
 8008d50:	08008c7d 	.word	0x08008c7d

08008d54 <__sfp>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	4607      	mov	r7, r0
 8008d58:	f7ff ffac 	bl	8008cb4 <__sfp_lock_acquire>
 8008d5c:	4b1e      	ldr	r3, [pc, #120]	; (8008dd8 <__sfp+0x84>)
 8008d5e:	681e      	ldr	r6, [r3, #0]
 8008d60:	69b3      	ldr	r3, [r6, #24]
 8008d62:	b913      	cbnz	r3, 8008d6a <__sfp+0x16>
 8008d64:	4630      	mov	r0, r6
 8008d66:	f7ff ffbd 	bl	8008ce4 <__sinit>
 8008d6a:	3648      	adds	r6, #72	; 0x48
 8008d6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	d503      	bpl.n	8008d7c <__sfp+0x28>
 8008d74:	6833      	ldr	r3, [r6, #0]
 8008d76:	b30b      	cbz	r3, 8008dbc <__sfp+0x68>
 8008d78:	6836      	ldr	r6, [r6, #0]
 8008d7a:	e7f7      	b.n	8008d6c <__sfp+0x18>
 8008d7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d80:	b9d5      	cbnz	r5, 8008db8 <__sfp+0x64>
 8008d82:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <__sfp+0x88>)
 8008d84:	60e3      	str	r3, [r4, #12]
 8008d86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d8a:	6665      	str	r5, [r4, #100]	; 0x64
 8008d8c:	f000 f847 	bl	8008e1e <__retarget_lock_init_recursive>
 8008d90:	f7ff ff96 	bl	8008cc0 <__sfp_lock_release>
 8008d94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d9c:	6025      	str	r5, [r4, #0]
 8008d9e:	61a5      	str	r5, [r4, #24]
 8008da0:	2208      	movs	r2, #8
 8008da2:	4629      	mov	r1, r5
 8008da4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008da8:	f7fb fd16 	bl	80047d8 <memset>
 8008dac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008db0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008db4:	4620      	mov	r0, r4
 8008db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db8:	3468      	adds	r4, #104	; 0x68
 8008dba:	e7d9      	b.n	8008d70 <__sfp+0x1c>
 8008dbc:	2104      	movs	r1, #4
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f7ff ff62 	bl	8008c88 <__sfmoreglue>
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	6030      	str	r0, [r6, #0]
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d1d5      	bne.n	8008d78 <__sfp+0x24>
 8008dcc:	f7ff ff78 	bl	8008cc0 <__sfp_lock_release>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	e7ee      	b.n	8008db4 <__sfp+0x60>
 8008dd6:	bf00      	nop
 8008dd8:	0800a464 	.word	0x0800a464
 8008ddc:	ffff0001 	.word	0xffff0001

08008de0 <_fwalk_reent>:
 8008de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4606      	mov	r6, r0
 8008de6:	4688      	mov	r8, r1
 8008de8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dec:	2700      	movs	r7, #0
 8008dee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008df2:	f1b9 0901 	subs.w	r9, r9, #1
 8008df6:	d505      	bpl.n	8008e04 <_fwalk_reent+0x24>
 8008df8:	6824      	ldr	r4, [r4, #0]
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	d1f7      	bne.n	8008dee <_fwalk_reent+0xe>
 8008dfe:	4638      	mov	r0, r7
 8008e00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e04:	89ab      	ldrh	r3, [r5, #12]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d907      	bls.n	8008e1a <_fwalk_reent+0x3a>
 8008e0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	d003      	beq.n	8008e1a <_fwalk_reent+0x3a>
 8008e12:	4629      	mov	r1, r5
 8008e14:	4630      	mov	r0, r6
 8008e16:	47c0      	blx	r8
 8008e18:	4307      	orrs	r7, r0
 8008e1a:	3568      	adds	r5, #104	; 0x68
 8008e1c:	e7e9      	b.n	8008df2 <_fwalk_reent+0x12>

08008e1e <__retarget_lock_init_recursive>:
 8008e1e:	4770      	bx	lr

08008e20 <__retarget_lock_acquire_recursive>:
 8008e20:	4770      	bx	lr

08008e22 <__retarget_lock_release_recursive>:
 8008e22:	4770      	bx	lr

08008e24 <__swhatbuf_r>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	460e      	mov	r6, r1
 8008e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	b096      	sub	sp, #88	; 0x58
 8008e30:	4614      	mov	r4, r2
 8008e32:	461d      	mov	r5, r3
 8008e34:	da08      	bge.n	8008e48 <__swhatbuf_r+0x24>
 8008e36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	602a      	str	r2, [r5, #0]
 8008e3e:	061a      	lsls	r2, r3, #24
 8008e40:	d410      	bmi.n	8008e64 <__swhatbuf_r+0x40>
 8008e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e46:	e00e      	b.n	8008e66 <__swhatbuf_r+0x42>
 8008e48:	466a      	mov	r2, sp
 8008e4a:	f000 f903 	bl	8009054 <_fstat_r>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	dbf1      	blt.n	8008e36 <__swhatbuf_r+0x12>
 8008e52:	9a01      	ldr	r2, [sp, #4]
 8008e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e5c:	425a      	negs	r2, r3
 8008e5e:	415a      	adcs	r2, r3
 8008e60:	602a      	str	r2, [r5, #0]
 8008e62:	e7ee      	b.n	8008e42 <__swhatbuf_r+0x1e>
 8008e64:	2340      	movs	r3, #64	; 0x40
 8008e66:	2000      	movs	r0, #0
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	b016      	add	sp, #88	; 0x58
 8008e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e70 <__smakebuf_r>:
 8008e70:	898b      	ldrh	r3, [r1, #12]
 8008e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e74:	079d      	lsls	r5, r3, #30
 8008e76:	4606      	mov	r6, r0
 8008e78:	460c      	mov	r4, r1
 8008e7a:	d507      	bpl.n	8008e8c <__smakebuf_r+0x1c>
 8008e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	6123      	str	r3, [r4, #16]
 8008e84:	2301      	movs	r3, #1
 8008e86:	6163      	str	r3, [r4, #20]
 8008e88:	b002      	add	sp, #8
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	ab01      	add	r3, sp, #4
 8008e8e:	466a      	mov	r2, sp
 8008e90:	f7ff ffc8 	bl	8008e24 <__swhatbuf_r>
 8008e94:	9900      	ldr	r1, [sp, #0]
 8008e96:	4605      	mov	r5, r0
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f7ff f957 	bl	800814c <_malloc_r>
 8008e9e:	b948      	cbnz	r0, 8008eb4 <__smakebuf_r+0x44>
 8008ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea4:	059a      	lsls	r2, r3, #22
 8008ea6:	d4ef      	bmi.n	8008e88 <__smakebuf_r+0x18>
 8008ea8:	f023 0303 	bic.w	r3, r3, #3
 8008eac:	f043 0302 	orr.w	r3, r3, #2
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	e7e3      	b.n	8008e7c <__smakebuf_r+0xc>
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <__smakebuf_r+0x7c>)
 8008eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	6020      	str	r0, [r4, #0]
 8008ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	9b00      	ldr	r3, [sp, #0]
 8008ec4:	6163      	str	r3, [r4, #20]
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	6120      	str	r0, [r4, #16]
 8008eca:	b15b      	cbz	r3, 8008ee4 <__smakebuf_r+0x74>
 8008ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f8d1 	bl	8009078 <_isatty_r>
 8008ed6:	b128      	cbz	r0, 8008ee4 <__smakebuf_r+0x74>
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	f043 0301 	orr.w	r3, r3, #1
 8008ee2:	81a3      	strh	r3, [r4, #12]
 8008ee4:	89a0      	ldrh	r0, [r4, #12]
 8008ee6:	4305      	orrs	r5, r0
 8008ee8:	81a5      	strh	r5, [r4, #12]
 8008eea:	e7cd      	b.n	8008e88 <__smakebuf_r+0x18>
 8008eec:	08008c7d 	.word	0x08008c7d

08008ef0 <_malloc_usable_size_r>:
 8008ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef4:	1f18      	subs	r0, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bfbc      	itt	lt
 8008efa:	580b      	ldrlt	r3, [r1, r0]
 8008efc:	18c0      	addlt	r0, r0, r3
 8008efe:	4770      	bx	lr

08008f00 <_raise_r>:
 8008f00:	291f      	cmp	r1, #31
 8008f02:	b538      	push	{r3, r4, r5, lr}
 8008f04:	4604      	mov	r4, r0
 8008f06:	460d      	mov	r5, r1
 8008f08:	d904      	bls.n	8008f14 <_raise_r+0x14>
 8008f0a:	2316      	movs	r3, #22
 8008f0c:	6003      	str	r3, [r0, #0]
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f16:	b112      	cbz	r2, 8008f1e <_raise_r+0x1e>
 8008f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f1c:	b94b      	cbnz	r3, 8008f32 <_raise_r+0x32>
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 f830 	bl	8008f84 <_getpid_r>
 8008f24:	462a      	mov	r2, r5
 8008f26:	4601      	mov	r1, r0
 8008f28:	4620      	mov	r0, r4
 8008f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f2e:	f000 b817 	b.w	8008f60 <_kill_r>
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d00a      	beq.n	8008f4c <_raise_r+0x4c>
 8008f36:	1c59      	adds	r1, r3, #1
 8008f38:	d103      	bne.n	8008f42 <_raise_r+0x42>
 8008f3a:	2316      	movs	r3, #22
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	2001      	movs	r0, #1
 8008f40:	e7e7      	b.n	8008f12 <_raise_r+0x12>
 8008f42:	2400      	movs	r4, #0
 8008f44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	4798      	blx	r3
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e7e0      	b.n	8008f12 <_raise_r+0x12>

08008f50 <raise>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <raise+0xc>)
 8008f52:	4601      	mov	r1, r0
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	f7ff bfd3 	b.w	8008f00 <_raise_r>
 8008f5a:	bf00      	nop
 8008f5c:	20000010 	.word	0x20000010

08008f60 <_kill_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d07      	ldr	r5, [pc, #28]	; (8008f80 <_kill_r+0x20>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	602b      	str	r3, [r5, #0]
 8008f6e:	f7f9 f835 	bl	8001fdc <_kill>
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	d102      	bne.n	8008f7c <_kill_r+0x1c>
 8008f76:	682b      	ldr	r3, [r5, #0]
 8008f78:	b103      	cbz	r3, 8008f7c <_kill_r+0x1c>
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	bd38      	pop	{r3, r4, r5, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000314 	.word	0x20000314

08008f84 <_getpid_r>:
 8008f84:	f7f9 b822 	b.w	8001fcc <_getpid>

08008f88 <__sread>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f90:	f000 f894 	bl	80090bc <_read_r>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	bfab      	itete	ge
 8008f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f9c:	181b      	addge	r3, r3, r0
 8008f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fa2:	bfac      	ite	ge
 8008fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fa6:	81a3      	strhlt	r3, [r4, #12]
 8008fa8:	bd10      	pop	{r4, pc}

08008faa <__swrite>:
 8008faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fae:	461f      	mov	r7, r3
 8008fb0:	898b      	ldrh	r3, [r1, #12]
 8008fb2:	05db      	lsls	r3, r3, #23
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	4616      	mov	r6, r2
 8008fba:	d505      	bpl.n	8008fc8 <__swrite+0x1e>
 8008fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f000 f868 	bl	8009098 <_lseek_r>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	4632      	mov	r2, r6
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	4628      	mov	r0, r5
 8008fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fde:	f000 b817 	b.w	8009010 <_write_r>

08008fe2 <__sseek>:
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fea:	f000 f855 	bl	8009098 <_lseek_r>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	bf15      	itete	ne
 8008ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ffe:	81a3      	strheq	r3, [r4, #12]
 8009000:	bf18      	it	ne
 8009002:	81a3      	strhne	r3, [r4, #12]
 8009004:	bd10      	pop	{r4, pc}

08009006 <__sclose>:
 8009006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800900a:	f000 b813 	b.w	8009034 <_close_r>
	...

08009010 <_write_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4d07      	ldr	r5, [pc, #28]	; (8009030 <_write_r+0x20>)
 8009014:	4604      	mov	r4, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	2200      	movs	r2, #0
 800901c:	602a      	str	r2, [r5, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f7f9 f82a 	bl	8002078 <_write>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_write_r+0x1e>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_write_r+0x1e>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	20000314 	.word	0x20000314

08009034 <_close_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d06      	ldr	r5, [pc, #24]	; (8009050 <_close_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7f9 f836 	bl	80020b0 <_close>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_close_r+0x1a>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_close_r+0x1a>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20000314 	.word	0x20000314

08009054 <_fstat_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	; (8009074 <_fstat_r+0x20>)
 8009058:	2300      	movs	r3, #0
 800905a:	4604      	mov	r4, r0
 800905c:	4608      	mov	r0, r1
 800905e:	4611      	mov	r1, r2
 8009060:	602b      	str	r3, [r5, #0]
 8009062:	f7f9 f831 	bl	80020c8 <_fstat>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d102      	bne.n	8009070 <_fstat_r+0x1c>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	b103      	cbz	r3, 8009070 <_fstat_r+0x1c>
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	bd38      	pop	{r3, r4, r5, pc}
 8009072:	bf00      	nop
 8009074:	20000314 	.word	0x20000314

08009078 <_isatty_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d06      	ldr	r5, [pc, #24]	; (8009094 <_isatty_r+0x1c>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	602b      	str	r3, [r5, #0]
 8009084:	f7f9 f830 	bl	80020e8 <_isatty>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_isatty_r+0x1a>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_isatty_r+0x1a>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20000314 	.word	0x20000314

08009098 <_lseek_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d07      	ldr	r5, [pc, #28]	; (80090b8 <_lseek_r+0x20>)
 800909c:	4604      	mov	r4, r0
 800909e:	4608      	mov	r0, r1
 80090a0:	4611      	mov	r1, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f7f9 f829 	bl	80020fe <_lseek>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_lseek_r+0x1e>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_lseek_r+0x1e>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20000314 	.word	0x20000314

080090bc <_read_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	; (80090dc <_read_r+0x20>)
 80090c0:	4604      	mov	r4, r0
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	2200      	movs	r2, #0
 80090c8:	602a      	str	r2, [r5, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	f7f8 ffa0 	bl	8002010 <_read>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_read_r+0x1e>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_read_r+0x1e>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20000314 	.word	0x20000314

080090e0 <sin>:
 80090e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090e2:	ec53 2b10 	vmov	r2, r3, d0
 80090e6:	4828      	ldr	r0, [pc, #160]	; (8009188 <sin+0xa8>)
 80090e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090ec:	4281      	cmp	r1, r0
 80090ee:	dc07      	bgt.n	8009100 <sin+0x20>
 80090f0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009180 <sin+0xa0>
 80090f4:	2000      	movs	r0, #0
 80090f6:	b005      	add	sp, #20
 80090f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090fc:	f000 bf4c 	b.w	8009f98 <__kernel_sin>
 8009100:	4822      	ldr	r0, [pc, #136]	; (800918c <sin+0xac>)
 8009102:	4281      	cmp	r1, r0
 8009104:	dd09      	ble.n	800911a <sin+0x3a>
 8009106:	ee10 0a10 	vmov	r0, s0
 800910a:	4619      	mov	r1, r3
 800910c:	f7f7 f8dc 	bl	80002c8 <__aeabi_dsub>
 8009110:	ec41 0b10 	vmov	d0, r0, r1
 8009114:	b005      	add	sp, #20
 8009116:	f85d fb04 	ldr.w	pc, [sp], #4
 800911a:	4668      	mov	r0, sp
 800911c:	f000 f864 	bl	80091e8 <__ieee754_rem_pio2>
 8009120:	f000 0003 	and.w	r0, r0, #3
 8009124:	2801      	cmp	r0, #1
 8009126:	d00c      	beq.n	8009142 <sin+0x62>
 8009128:	2802      	cmp	r0, #2
 800912a:	d011      	beq.n	8009150 <sin+0x70>
 800912c:	b9f0      	cbnz	r0, 800916c <sin+0x8c>
 800912e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009132:	ed9d 0b00 	vldr	d0, [sp]
 8009136:	2001      	movs	r0, #1
 8009138:	f000 ff2e 	bl	8009f98 <__kernel_sin>
 800913c:	ec51 0b10 	vmov	r0, r1, d0
 8009140:	e7e6      	b.n	8009110 <sin+0x30>
 8009142:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009146:	ed9d 0b00 	vldr	d0, [sp]
 800914a:	f000 fb0d 	bl	8009768 <__kernel_cos>
 800914e:	e7f5      	b.n	800913c <sin+0x5c>
 8009150:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009154:	ed9d 0b00 	vldr	d0, [sp]
 8009158:	2001      	movs	r0, #1
 800915a:	f000 ff1d 	bl	8009f98 <__kernel_sin>
 800915e:	ec53 2b10 	vmov	r2, r3, d0
 8009162:	ee10 0a10 	vmov	r0, s0
 8009166:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800916a:	e7d1      	b.n	8009110 <sin+0x30>
 800916c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009170:	ed9d 0b00 	vldr	d0, [sp]
 8009174:	f000 faf8 	bl	8009768 <__kernel_cos>
 8009178:	e7f1      	b.n	800915e <sin+0x7e>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
	...
 8009188:	3fe921fb 	.word	0x3fe921fb
 800918c:	7fefffff 	.word	0x7fefffff

08009190 <sqrt>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	ed2d 8b02 	vpush	{d8}
 8009196:	ec55 4b10 	vmov	r4, r5, d0
 800919a:	f000 fa31 	bl	8009600 <__ieee754_sqrt>
 800919e:	4622      	mov	r2, r4
 80091a0:	462b      	mov	r3, r5
 80091a2:	4620      	mov	r0, r4
 80091a4:	4629      	mov	r1, r5
 80091a6:	eeb0 8a40 	vmov.f32	s16, s0
 80091aa:	eef0 8a60 	vmov.f32	s17, s1
 80091ae:	f7f7 fcdd 	bl	8000b6c <__aeabi_dcmpun>
 80091b2:	b990      	cbnz	r0, 80091da <sqrt+0x4a>
 80091b4:	2200      	movs	r2, #0
 80091b6:	2300      	movs	r3, #0
 80091b8:	4620      	mov	r0, r4
 80091ba:	4629      	mov	r1, r5
 80091bc:	f7f7 fcae 	bl	8000b1c <__aeabi_dcmplt>
 80091c0:	b158      	cbz	r0, 80091da <sqrt+0x4a>
 80091c2:	f7fb fadf 	bl	8004784 <__errno>
 80091c6:	2321      	movs	r3, #33	; 0x21
 80091c8:	6003      	str	r3, [r0, #0]
 80091ca:	2200      	movs	r2, #0
 80091cc:	2300      	movs	r3, #0
 80091ce:	4610      	mov	r0, r2
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7f7 fb5b 	bl	800088c <__aeabi_ddiv>
 80091d6:	ec41 0b18 	vmov	d8, r0, r1
 80091da:	eeb0 0a48 	vmov.f32	s0, s16
 80091de:	eef0 0a68 	vmov.f32	s1, s17
 80091e2:	ecbd 8b02 	vpop	{d8}
 80091e6:	bd38      	pop	{r3, r4, r5, pc}

080091e8 <__ieee754_rem_pio2>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	ed2d 8b02 	vpush	{d8}
 80091f0:	ec55 4b10 	vmov	r4, r5, d0
 80091f4:	4bca      	ldr	r3, [pc, #808]	; (8009520 <__ieee754_rem_pio2+0x338>)
 80091f6:	b08b      	sub	sp, #44	; 0x2c
 80091f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80091fc:	4598      	cmp	r8, r3
 80091fe:	4682      	mov	sl, r0
 8009200:	9502      	str	r5, [sp, #8]
 8009202:	dc08      	bgt.n	8009216 <__ieee754_rem_pio2+0x2e>
 8009204:	2200      	movs	r2, #0
 8009206:	2300      	movs	r3, #0
 8009208:	ed80 0b00 	vstr	d0, [r0]
 800920c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009210:	f04f 0b00 	mov.w	fp, #0
 8009214:	e028      	b.n	8009268 <__ieee754_rem_pio2+0x80>
 8009216:	4bc3      	ldr	r3, [pc, #780]	; (8009524 <__ieee754_rem_pio2+0x33c>)
 8009218:	4598      	cmp	r8, r3
 800921a:	dc78      	bgt.n	800930e <__ieee754_rem_pio2+0x126>
 800921c:	9b02      	ldr	r3, [sp, #8]
 800921e:	4ec2      	ldr	r6, [pc, #776]	; (8009528 <__ieee754_rem_pio2+0x340>)
 8009220:	2b00      	cmp	r3, #0
 8009222:	ee10 0a10 	vmov	r0, s0
 8009226:	a3b0      	add	r3, pc, #704	; (adr r3, 80094e8 <__ieee754_rem_pio2+0x300>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	4629      	mov	r1, r5
 800922e:	dd39      	ble.n	80092a4 <__ieee754_rem_pio2+0xbc>
 8009230:	f7f7 f84a 	bl	80002c8 <__aeabi_dsub>
 8009234:	45b0      	cmp	r8, r6
 8009236:	4604      	mov	r4, r0
 8009238:	460d      	mov	r5, r1
 800923a:	d01b      	beq.n	8009274 <__ieee754_rem_pio2+0x8c>
 800923c:	a3ac      	add	r3, pc, #688	; (adr r3, 80094f0 <__ieee754_rem_pio2+0x308>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 f841 	bl	80002c8 <__aeabi_dsub>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	e9ca 2300 	strd	r2, r3, [sl]
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 f839 	bl	80002c8 <__aeabi_dsub>
 8009256:	a3a6      	add	r3, pc, #664	; (adr r3, 80094f0 <__ieee754_rem_pio2+0x308>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	f7f7 f834 	bl	80002c8 <__aeabi_dsub>
 8009260:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009264:	f04f 0b01 	mov.w	fp, #1
 8009268:	4658      	mov	r0, fp
 800926a:	b00b      	add	sp, #44	; 0x2c
 800926c:	ecbd 8b02 	vpop	{d8}
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	a3a0      	add	r3, pc, #640	; (adr r3, 80094f8 <__ieee754_rem_pio2+0x310>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f7 f825 	bl	80002c8 <__aeabi_dsub>
 800927e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009500 <__ieee754_rem_pio2+0x318>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	f7f7 f81e 	bl	80002c8 <__aeabi_dsub>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	e9ca 2300 	strd	r2, r3, [sl]
 8009294:	4620      	mov	r0, r4
 8009296:	4629      	mov	r1, r5
 8009298:	f7f7 f816 	bl	80002c8 <__aeabi_dsub>
 800929c:	a398      	add	r3, pc, #608	; (adr r3, 8009500 <__ieee754_rem_pio2+0x318>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	e7db      	b.n	800925c <__ieee754_rem_pio2+0x74>
 80092a4:	f7f7 f812 	bl	80002cc <__adddf3>
 80092a8:	45b0      	cmp	r8, r6
 80092aa:	4604      	mov	r4, r0
 80092ac:	460d      	mov	r5, r1
 80092ae:	d016      	beq.n	80092de <__ieee754_rem_pio2+0xf6>
 80092b0:	a38f      	add	r3, pc, #572	; (adr r3, 80094f0 <__ieee754_rem_pio2+0x308>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f7 f809 	bl	80002cc <__adddf3>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	e9ca 2300 	strd	r2, r3, [sl]
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f6 ffff 	bl	80002c8 <__aeabi_dsub>
 80092ca:	a389      	add	r3, pc, #548	; (adr r3, 80094f0 <__ieee754_rem_pio2+0x308>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f6 fffc 	bl	80002cc <__adddf3>
 80092d4:	f04f 3bff 	mov.w	fp, #4294967295
 80092d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092dc:	e7c4      	b.n	8009268 <__ieee754_rem_pio2+0x80>
 80092de:	a386      	add	r3, pc, #536	; (adr r3, 80094f8 <__ieee754_rem_pio2+0x310>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f6 fff2 	bl	80002cc <__adddf3>
 80092e8:	a385      	add	r3, pc, #532	; (adr r3, 8009500 <__ieee754_rem_pio2+0x318>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	4604      	mov	r4, r0
 80092f0:	460d      	mov	r5, r1
 80092f2:	f7f6 ffeb 	bl	80002cc <__adddf3>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	e9ca 2300 	strd	r2, r3, [sl]
 80092fe:	4620      	mov	r0, r4
 8009300:	4629      	mov	r1, r5
 8009302:	f7f6 ffe1 	bl	80002c8 <__aeabi_dsub>
 8009306:	a37e      	add	r3, pc, #504	; (adr r3, 8009500 <__ieee754_rem_pio2+0x318>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	e7e0      	b.n	80092d0 <__ieee754_rem_pio2+0xe8>
 800930e:	4b87      	ldr	r3, [pc, #540]	; (800952c <__ieee754_rem_pio2+0x344>)
 8009310:	4598      	cmp	r8, r3
 8009312:	f300 80d9 	bgt.w	80094c8 <__ieee754_rem_pio2+0x2e0>
 8009316:	f000 fefd 	bl	800a114 <fabs>
 800931a:	ec55 4b10 	vmov	r4, r5, d0
 800931e:	ee10 0a10 	vmov	r0, s0
 8009322:	a379      	add	r3, pc, #484	; (adr r3, 8009508 <__ieee754_rem_pio2+0x320>)
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	4629      	mov	r1, r5
 800932a:	f7f7 f985 	bl	8000638 <__aeabi_dmul>
 800932e:	4b80      	ldr	r3, [pc, #512]	; (8009530 <__ieee754_rem_pio2+0x348>)
 8009330:	2200      	movs	r2, #0
 8009332:	f7f6 ffcb 	bl	80002cc <__adddf3>
 8009336:	f7f7 fc2f 	bl	8000b98 <__aeabi_d2iz>
 800933a:	4683      	mov	fp, r0
 800933c:	f7f7 f912 	bl	8000564 <__aeabi_i2d>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	ec43 2b18 	vmov	d8, r2, r3
 8009348:	a367      	add	r3, pc, #412	; (adr r3, 80094e8 <__ieee754_rem_pio2+0x300>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f7 f973 	bl	8000638 <__aeabi_dmul>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	f7f6 ffb5 	bl	80002c8 <__aeabi_dsub>
 800935e:	a364      	add	r3, pc, #400	; (adr r3, 80094f0 <__ieee754_rem_pio2+0x308>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	ec51 0b18 	vmov	r0, r1, d8
 800936c:	f7f7 f964 	bl	8000638 <__aeabi_dmul>
 8009370:	f1bb 0f1f 	cmp.w	fp, #31
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	dc0d      	bgt.n	8009396 <__ieee754_rem_pio2+0x1ae>
 800937a:	4b6e      	ldr	r3, [pc, #440]	; (8009534 <__ieee754_rem_pio2+0x34c>)
 800937c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009384:	4543      	cmp	r3, r8
 8009386:	d006      	beq.n	8009396 <__ieee754_rem_pio2+0x1ae>
 8009388:	4622      	mov	r2, r4
 800938a:	462b      	mov	r3, r5
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f6 ff9a 	bl	80002c8 <__aeabi_dsub>
 8009394:	e00f      	b.n	80093b6 <__ieee754_rem_pio2+0x1ce>
 8009396:	462b      	mov	r3, r5
 8009398:	4622      	mov	r2, r4
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f6 ff93 	bl	80002c8 <__aeabi_dsub>
 80093a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093a6:	9303      	str	r3, [sp, #12]
 80093a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80093b0:	f1b8 0f10 	cmp.w	r8, #16
 80093b4:	dc02      	bgt.n	80093bc <__ieee754_rem_pio2+0x1d4>
 80093b6:	e9ca 0100 	strd	r0, r1, [sl]
 80093ba:	e039      	b.n	8009430 <__ieee754_rem_pio2+0x248>
 80093bc:	a34e      	add	r3, pc, #312	; (adr r3, 80094f8 <__ieee754_rem_pio2+0x310>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	ec51 0b18 	vmov	r0, r1, d8
 80093c6:	f7f7 f937 	bl	8000638 <__aeabi_dmul>
 80093ca:	4604      	mov	r4, r0
 80093cc:	460d      	mov	r5, r1
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4630      	mov	r0, r6
 80093d4:	4639      	mov	r1, r7
 80093d6:	f7f6 ff77 	bl	80002c8 <__aeabi_dsub>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4680      	mov	r8, r0
 80093e0:	4689      	mov	r9, r1
 80093e2:	4630      	mov	r0, r6
 80093e4:	4639      	mov	r1, r7
 80093e6:	f7f6 ff6f 	bl	80002c8 <__aeabi_dsub>
 80093ea:	4622      	mov	r2, r4
 80093ec:	462b      	mov	r3, r5
 80093ee:	f7f6 ff6b 	bl	80002c8 <__aeabi_dsub>
 80093f2:	a343      	add	r3, pc, #268	; (adr r3, 8009500 <__ieee754_rem_pio2+0x318>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	ec51 0b18 	vmov	r0, r1, d8
 8009400:	f7f7 f91a 	bl	8000638 <__aeabi_dmul>
 8009404:	4622      	mov	r2, r4
 8009406:	462b      	mov	r3, r5
 8009408:	f7f6 ff5e 	bl	80002c8 <__aeabi_dsub>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4604      	mov	r4, r0
 8009412:	460d      	mov	r5, r1
 8009414:	4640      	mov	r0, r8
 8009416:	4649      	mov	r1, r9
 8009418:	f7f6 ff56 	bl	80002c8 <__aeabi_dsub>
 800941c:	9a03      	ldr	r2, [sp, #12]
 800941e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	2b31      	cmp	r3, #49	; 0x31
 8009426:	dc24      	bgt.n	8009472 <__ieee754_rem_pio2+0x28a>
 8009428:	e9ca 0100 	strd	r0, r1, [sl]
 800942c:	4646      	mov	r6, r8
 800942e:	464f      	mov	r7, r9
 8009430:	e9da 8900 	ldrd	r8, r9, [sl]
 8009434:	4630      	mov	r0, r6
 8009436:	4642      	mov	r2, r8
 8009438:	464b      	mov	r3, r9
 800943a:	4639      	mov	r1, r7
 800943c:	f7f6 ff44 	bl	80002c8 <__aeabi_dsub>
 8009440:	462b      	mov	r3, r5
 8009442:	4622      	mov	r2, r4
 8009444:	f7f6 ff40 	bl	80002c8 <__aeabi_dsub>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009450:	f6bf af0a 	bge.w	8009268 <__ieee754_rem_pio2+0x80>
 8009454:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009458:	f8ca 3004 	str.w	r3, [sl, #4]
 800945c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009460:	f8ca 8000 	str.w	r8, [sl]
 8009464:	f8ca 0008 	str.w	r0, [sl, #8]
 8009468:	f8ca 300c 	str.w	r3, [sl, #12]
 800946c:	f1cb 0b00 	rsb	fp, fp, #0
 8009470:	e6fa      	b.n	8009268 <__ieee754_rem_pio2+0x80>
 8009472:	a327      	add	r3, pc, #156	; (adr r3, 8009510 <__ieee754_rem_pio2+0x328>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	ec51 0b18 	vmov	r0, r1, d8
 800947c:	f7f7 f8dc 	bl	8000638 <__aeabi_dmul>
 8009480:	4604      	mov	r4, r0
 8009482:	460d      	mov	r5, r1
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f6 ff1c 	bl	80002c8 <__aeabi_dsub>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4606      	mov	r6, r0
 8009496:	460f      	mov	r7, r1
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f6 ff14 	bl	80002c8 <__aeabi_dsub>
 80094a0:	4622      	mov	r2, r4
 80094a2:	462b      	mov	r3, r5
 80094a4:	f7f6 ff10 	bl	80002c8 <__aeabi_dsub>
 80094a8:	a31b      	add	r3, pc, #108	; (adr r3, 8009518 <__ieee754_rem_pio2+0x330>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	ec51 0b18 	vmov	r0, r1, d8
 80094b6:	f7f7 f8bf 	bl	8000638 <__aeabi_dmul>
 80094ba:	4622      	mov	r2, r4
 80094bc:	462b      	mov	r3, r5
 80094be:	f7f6 ff03 	bl	80002c8 <__aeabi_dsub>
 80094c2:	4604      	mov	r4, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	e75f      	b.n	8009388 <__ieee754_rem_pio2+0x1a0>
 80094c8:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <__ieee754_rem_pio2+0x350>)
 80094ca:	4598      	cmp	r8, r3
 80094cc:	dd36      	ble.n	800953c <__ieee754_rem_pio2+0x354>
 80094ce:	ee10 2a10 	vmov	r2, s0
 80094d2:	462b      	mov	r3, r5
 80094d4:	4620      	mov	r0, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	f7f6 fef6 	bl	80002c8 <__aeabi_dsub>
 80094dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094e0:	e9ca 0100 	strd	r0, r1, [sl]
 80094e4:	e694      	b.n	8009210 <__ieee754_rem_pio2+0x28>
 80094e6:	bf00      	nop
 80094e8:	54400000 	.word	0x54400000
 80094ec:	3ff921fb 	.word	0x3ff921fb
 80094f0:	1a626331 	.word	0x1a626331
 80094f4:	3dd0b461 	.word	0x3dd0b461
 80094f8:	1a600000 	.word	0x1a600000
 80094fc:	3dd0b461 	.word	0x3dd0b461
 8009500:	2e037073 	.word	0x2e037073
 8009504:	3ba3198a 	.word	0x3ba3198a
 8009508:	6dc9c883 	.word	0x6dc9c883
 800950c:	3fe45f30 	.word	0x3fe45f30
 8009510:	2e000000 	.word	0x2e000000
 8009514:	3ba3198a 	.word	0x3ba3198a
 8009518:	252049c1 	.word	0x252049c1
 800951c:	397b839a 	.word	0x397b839a
 8009520:	3fe921fb 	.word	0x3fe921fb
 8009524:	4002d97b 	.word	0x4002d97b
 8009528:	3ff921fb 	.word	0x3ff921fb
 800952c:	413921fb 	.word	0x413921fb
 8009530:	3fe00000 	.word	0x3fe00000
 8009534:	0800a90c 	.word	0x0800a90c
 8009538:	7fefffff 	.word	0x7fefffff
 800953c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009540:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009544:	ee10 0a10 	vmov	r0, s0
 8009548:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800954c:	ee10 6a10 	vmov	r6, s0
 8009550:	460f      	mov	r7, r1
 8009552:	f7f7 fb21 	bl	8000b98 <__aeabi_d2iz>
 8009556:	f7f7 f805 	bl	8000564 <__aeabi_i2d>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009566:	f7f6 feaf 	bl	80002c8 <__aeabi_dsub>
 800956a:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <__ieee754_rem_pio2+0x410>)
 800956c:	2200      	movs	r2, #0
 800956e:	f7f7 f863 	bl	8000638 <__aeabi_dmul>
 8009572:	460f      	mov	r7, r1
 8009574:	4606      	mov	r6, r0
 8009576:	f7f7 fb0f 	bl	8000b98 <__aeabi_d2iz>
 800957a:	f7f6 fff3 	bl	8000564 <__aeabi_i2d>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800958a:	f7f6 fe9d 	bl	80002c8 <__aeabi_dsub>
 800958e:	4b1a      	ldr	r3, [pc, #104]	; (80095f8 <__ieee754_rem_pio2+0x410>)
 8009590:	2200      	movs	r2, #0
 8009592:	f7f7 f851 	bl	8000638 <__aeabi_dmul>
 8009596:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800959a:	ad04      	add	r5, sp, #16
 800959c:	f04f 0803 	mov.w	r8, #3
 80095a0:	46a9      	mov	r9, r5
 80095a2:	2600      	movs	r6, #0
 80095a4:	2700      	movs	r7, #0
 80095a6:	4632      	mov	r2, r6
 80095a8:	463b      	mov	r3, r7
 80095aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80095ae:	46c3      	mov	fp, r8
 80095b0:	3d08      	subs	r5, #8
 80095b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80095b6:	f7f7 faa7 	bl	8000b08 <__aeabi_dcmpeq>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d1f3      	bne.n	80095a6 <__ieee754_rem_pio2+0x3be>
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <__ieee754_rem_pio2+0x414>)
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	2302      	movs	r3, #2
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	4622      	mov	r2, r4
 80095c8:	465b      	mov	r3, fp
 80095ca:	4651      	mov	r1, sl
 80095cc:	4648      	mov	r0, r9
 80095ce:	f000 f993 	bl	80098f8 <__kernel_rem_pio2>
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	4683      	mov	fp, r0
 80095d8:	f6bf ae46 	bge.w	8009268 <__ieee754_rem_pio2+0x80>
 80095dc:	e9da 2100 	ldrd	r2, r1, [sl]
 80095e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095e4:	e9ca 2300 	strd	r2, r3, [sl]
 80095e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80095ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80095f4:	e73a      	b.n	800946c <__ieee754_rem_pio2+0x284>
 80095f6:	bf00      	nop
 80095f8:	41700000 	.word	0x41700000
 80095fc:	0800a98c 	.word	0x0800a98c

08009600 <__ieee754_sqrt>:
 8009600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009604:	ec55 4b10 	vmov	r4, r5, d0
 8009608:	4e55      	ldr	r6, [pc, #340]	; (8009760 <__ieee754_sqrt+0x160>)
 800960a:	43ae      	bics	r6, r5
 800960c:	ee10 0a10 	vmov	r0, s0
 8009610:	ee10 3a10 	vmov	r3, s0
 8009614:	462a      	mov	r2, r5
 8009616:	4629      	mov	r1, r5
 8009618:	d110      	bne.n	800963c <__ieee754_sqrt+0x3c>
 800961a:	ee10 2a10 	vmov	r2, s0
 800961e:	462b      	mov	r3, r5
 8009620:	f7f7 f80a 	bl	8000638 <__aeabi_dmul>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4620      	mov	r0, r4
 800962a:	4629      	mov	r1, r5
 800962c:	f7f6 fe4e 	bl	80002cc <__adddf3>
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	ec45 4b10 	vmov	d0, r4, r5
 8009638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800963c:	2d00      	cmp	r5, #0
 800963e:	dc10      	bgt.n	8009662 <__ieee754_sqrt+0x62>
 8009640:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009644:	4330      	orrs	r0, r6
 8009646:	d0f5      	beq.n	8009634 <__ieee754_sqrt+0x34>
 8009648:	b15d      	cbz	r5, 8009662 <__ieee754_sqrt+0x62>
 800964a:	ee10 2a10 	vmov	r2, s0
 800964e:	462b      	mov	r3, r5
 8009650:	ee10 0a10 	vmov	r0, s0
 8009654:	f7f6 fe38 	bl	80002c8 <__aeabi_dsub>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	f7f7 f916 	bl	800088c <__aeabi_ddiv>
 8009660:	e7e6      	b.n	8009630 <__ieee754_sqrt+0x30>
 8009662:	1512      	asrs	r2, r2, #20
 8009664:	d074      	beq.n	8009750 <__ieee754_sqrt+0x150>
 8009666:	07d4      	lsls	r4, r2, #31
 8009668:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800966c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009674:	bf5e      	ittt	pl
 8009676:	0fda      	lsrpl	r2, r3, #31
 8009678:	005b      	lslpl	r3, r3, #1
 800967a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800967e:	2400      	movs	r4, #0
 8009680:	0fda      	lsrs	r2, r3, #31
 8009682:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009686:	107f      	asrs	r7, r7, #1
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	2516      	movs	r5, #22
 800968c:	4620      	mov	r0, r4
 800968e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009692:	1886      	adds	r6, r0, r2
 8009694:	428e      	cmp	r6, r1
 8009696:	bfde      	ittt	le
 8009698:	1b89      	suble	r1, r1, r6
 800969a:	18b0      	addle	r0, r6, r2
 800969c:	18a4      	addle	r4, r4, r2
 800969e:	0049      	lsls	r1, r1, #1
 80096a0:	3d01      	subs	r5, #1
 80096a2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80096a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80096aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096ae:	d1f0      	bne.n	8009692 <__ieee754_sqrt+0x92>
 80096b0:	462a      	mov	r2, r5
 80096b2:	f04f 0e20 	mov.w	lr, #32
 80096b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096ba:	4281      	cmp	r1, r0
 80096bc:	eb06 0c05 	add.w	ip, r6, r5
 80096c0:	dc02      	bgt.n	80096c8 <__ieee754_sqrt+0xc8>
 80096c2:	d113      	bne.n	80096ec <__ieee754_sqrt+0xec>
 80096c4:	459c      	cmp	ip, r3
 80096c6:	d811      	bhi.n	80096ec <__ieee754_sqrt+0xec>
 80096c8:	f1bc 0f00 	cmp.w	ip, #0
 80096cc:	eb0c 0506 	add.w	r5, ip, r6
 80096d0:	da43      	bge.n	800975a <__ieee754_sqrt+0x15a>
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	db41      	blt.n	800975a <__ieee754_sqrt+0x15a>
 80096d6:	f100 0801 	add.w	r8, r0, #1
 80096da:	1a09      	subs	r1, r1, r0
 80096dc:	459c      	cmp	ip, r3
 80096de:	bf88      	it	hi
 80096e0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80096e4:	eba3 030c 	sub.w	r3, r3, ip
 80096e8:	4432      	add	r2, r6
 80096ea:	4640      	mov	r0, r8
 80096ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80096f0:	f1be 0e01 	subs.w	lr, lr, #1
 80096f4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80096f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009700:	d1db      	bne.n	80096ba <__ieee754_sqrt+0xba>
 8009702:	430b      	orrs	r3, r1
 8009704:	d006      	beq.n	8009714 <__ieee754_sqrt+0x114>
 8009706:	1c50      	adds	r0, r2, #1
 8009708:	bf13      	iteet	ne
 800970a:	3201      	addne	r2, #1
 800970c:	3401      	addeq	r4, #1
 800970e:	4672      	moveq	r2, lr
 8009710:	f022 0201 	bicne.w	r2, r2, #1
 8009714:	1063      	asrs	r3, r4, #1
 8009716:	0852      	lsrs	r2, r2, #1
 8009718:	07e1      	lsls	r1, r4, #31
 800971a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800971e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009722:	bf48      	it	mi
 8009724:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009728:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800972c:	4614      	mov	r4, r2
 800972e:	e781      	b.n	8009634 <__ieee754_sqrt+0x34>
 8009730:	0ad9      	lsrs	r1, r3, #11
 8009732:	3815      	subs	r0, #21
 8009734:	055b      	lsls	r3, r3, #21
 8009736:	2900      	cmp	r1, #0
 8009738:	d0fa      	beq.n	8009730 <__ieee754_sqrt+0x130>
 800973a:	02cd      	lsls	r5, r1, #11
 800973c:	d50a      	bpl.n	8009754 <__ieee754_sqrt+0x154>
 800973e:	f1c2 0420 	rsb	r4, r2, #32
 8009742:	fa23 f404 	lsr.w	r4, r3, r4
 8009746:	1e55      	subs	r5, r2, #1
 8009748:	4093      	lsls	r3, r2
 800974a:	4321      	orrs	r1, r4
 800974c:	1b42      	subs	r2, r0, r5
 800974e:	e78a      	b.n	8009666 <__ieee754_sqrt+0x66>
 8009750:	4610      	mov	r0, r2
 8009752:	e7f0      	b.n	8009736 <__ieee754_sqrt+0x136>
 8009754:	0049      	lsls	r1, r1, #1
 8009756:	3201      	adds	r2, #1
 8009758:	e7ef      	b.n	800973a <__ieee754_sqrt+0x13a>
 800975a:	4680      	mov	r8, r0
 800975c:	e7bd      	b.n	80096da <__ieee754_sqrt+0xda>
 800975e:	bf00      	nop
 8009760:	7ff00000 	.word	0x7ff00000
 8009764:	00000000 	.word	0x00000000

08009768 <__kernel_cos>:
 8009768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	ec57 6b10 	vmov	r6, r7, d0
 8009770:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009774:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009778:	ed8d 1b00 	vstr	d1, [sp]
 800977c:	da07      	bge.n	800978e <__kernel_cos+0x26>
 800977e:	ee10 0a10 	vmov	r0, s0
 8009782:	4639      	mov	r1, r7
 8009784:	f7f7 fa08 	bl	8000b98 <__aeabi_d2iz>
 8009788:	2800      	cmp	r0, #0
 800978a:	f000 8088 	beq.w	800989e <__kernel_cos+0x136>
 800978e:	4632      	mov	r2, r6
 8009790:	463b      	mov	r3, r7
 8009792:	4630      	mov	r0, r6
 8009794:	4639      	mov	r1, r7
 8009796:	f7f6 ff4f 	bl	8000638 <__aeabi_dmul>
 800979a:	4b51      	ldr	r3, [pc, #324]	; (80098e0 <__kernel_cos+0x178>)
 800979c:	2200      	movs	r2, #0
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	f7f6 ff49 	bl	8000638 <__aeabi_dmul>
 80097a6:	a340      	add	r3, pc, #256	; (adr r3, 80098a8 <__kernel_cos+0x140>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	4682      	mov	sl, r0
 80097ae:	468b      	mov	fp, r1
 80097b0:	4620      	mov	r0, r4
 80097b2:	4629      	mov	r1, r5
 80097b4:	f7f6 ff40 	bl	8000638 <__aeabi_dmul>
 80097b8:	a33d      	add	r3, pc, #244	; (adr r3, 80098b0 <__kernel_cos+0x148>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fd85 	bl	80002cc <__adddf3>
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f6 ff37 	bl	8000638 <__aeabi_dmul>
 80097ca:	a33b      	add	r3, pc, #236	; (adr r3, 80098b8 <__kernel_cos+0x150>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fd7a 	bl	80002c8 <__aeabi_dsub>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 ff2e 	bl	8000638 <__aeabi_dmul>
 80097dc:	a338      	add	r3, pc, #224	; (adr r3, 80098c0 <__kernel_cos+0x158>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fd73 	bl	80002cc <__adddf3>
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	f7f6 ff25 	bl	8000638 <__aeabi_dmul>
 80097ee:	a336      	add	r3, pc, #216	; (adr r3, 80098c8 <__kernel_cos+0x160>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f7f6 fd68 	bl	80002c8 <__aeabi_dsub>
 80097f8:	4622      	mov	r2, r4
 80097fa:	462b      	mov	r3, r5
 80097fc:	f7f6 ff1c 	bl	8000638 <__aeabi_dmul>
 8009800:	a333      	add	r3, pc, #204	; (adr r3, 80098d0 <__kernel_cos+0x168>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f7f6 fd61 	bl	80002cc <__adddf3>
 800980a:	4622      	mov	r2, r4
 800980c:	462b      	mov	r3, r5
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	4622      	mov	r2, r4
 8009814:	462b      	mov	r3, r5
 8009816:	f7f6 ff0f 	bl	8000638 <__aeabi_dmul>
 800981a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800981e:	4604      	mov	r4, r0
 8009820:	460d      	mov	r5, r1
 8009822:	4630      	mov	r0, r6
 8009824:	4639      	mov	r1, r7
 8009826:	f7f6 ff07 	bl	8000638 <__aeabi_dmul>
 800982a:	460b      	mov	r3, r1
 800982c:	4602      	mov	r2, r0
 800982e:	4629      	mov	r1, r5
 8009830:	4620      	mov	r0, r4
 8009832:	f7f6 fd49 	bl	80002c8 <__aeabi_dsub>
 8009836:	4b2b      	ldr	r3, [pc, #172]	; (80098e4 <__kernel_cos+0x17c>)
 8009838:	4598      	cmp	r8, r3
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	dc10      	bgt.n	8009862 <__kernel_cos+0xfa>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4650      	mov	r0, sl
 8009846:	4659      	mov	r1, fp
 8009848:	f7f6 fd3e 	bl	80002c8 <__aeabi_dsub>
 800984c:	460b      	mov	r3, r1
 800984e:	4926      	ldr	r1, [pc, #152]	; (80098e8 <__kernel_cos+0x180>)
 8009850:	4602      	mov	r2, r0
 8009852:	2000      	movs	r0, #0
 8009854:	f7f6 fd38 	bl	80002c8 <__aeabi_dsub>
 8009858:	ec41 0b10 	vmov	d0, r0, r1
 800985c:	b003      	add	sp, #12
 800985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009862:	4b22      	ldr	r3, [pc, #136]	; (80098ec <__kernel_cos+0x184>)
 8009864:	4920      	ldr	r1, [pc, #128]	; (80098e8 <__kernel_cos+0x180>)
 8009866:	4598      	cmp	r8, r3
 8009868:	bfcc      	ite	gt
 800986a:	4d21      	ldrgt	r5, [pc, #132]	; (80098f0 <__kernel_cos+0x188>)
 800986c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009870:	2400      	movs	r4, #0
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	2000      	movs	r0, #0
 8009878:	f7f6 fd26 	bl	80002c8 <__aeabi_dsub>
 800987c:	4622      	mov	r2, r4
 800987e:	4680      	mov	r8, r0
 8009880:	4689      	mov	r9, r1
 8009882:	462b      	mov	r3, r5
 8009884:	4650      	mov	r0, sl
 8009886:	4659      	mov	r1, fp
 8009888:	f7f6 fd1e 	bl	80002c8 <__aeabi_dsub>
 800988c:	4632      	mov	r2, r6
 800988e:	463b      	mov	r3, r7
 8009890:	f7f6 fd1a 	bl	80002c8 <__aeabi_dsub>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4640      	mov	r0, r8
 800989a:	4649      	mov	r1, r9
 800989c:	e7da      	b.n	8009854 <__kernel_cos+0xec>
 800989e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80098d8 <__kernel_cos+0x170>
 80098a2:	e7db      	b.n	800985c <__kernel_cos+0xf4>
 80098a4:	f3af 8000 	nop.w
 80098a8:	be8838d4 	.word	0xbe8838d4
 80098ac:	bda8fae9 	.word	0xbda8fae9
 80098b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80098b4:	3e21ee9e 	.word	0x3e21ee9e
 80098b8:	809c52ad 	.word	0x809c52ad
 80098bc:	3e927e4f 	.word	0x3e927e4f
 80098c0:	19cb1590 	.word	0x19cb1590
 80098c4:	3efa01a0 	.word	0x3efa01a0
 80098c8:	16c15177 	.word	0x16c15177
 80098cc:	3f56c16c 	.word	0x3f56c16c
 80098d0:	5555554c 	.word	0x5555554c
 80098d4:	3fa55555 	.word	0x3fa55555
 80098d8:	00000000 	.word	0x00000000
 80098dc:	3ff00000 	.word	0x3ff00000
 80098e0:	3fe00000 	.word	0x3fe00000
 80098e4:	3fd33332 	.word	0x3fd33332
 80098e8:	3ff00000 	.word	0x3ff00000
 80098ec:	3fe90000 	.word	0x3fe90000
 80098f0:	3fd20000 	.word	0x3fd20000
 80098f4:	00000000 	.word	0x00000000

080098f8 <__kernel_rem_pio2>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	ed2d 8b02 	vpush	{d8}
 8009900:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009904:	f112 0f14 	cmn.w	r2, #20
 8009908:	9308      	str	r3, [sp, #32]
 800990a:	9101      	str	r1, [sp, #4]
 800990c:	4bc4      	ldr	r3, [pc, #784]	; (8009c20 <__kernel_rem_pio2+0x328>)
 800990e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009910:	900b      	str	r0, [sp, #44]	; 0x2c
 8009912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009916:	9302      	str	r3, [sp, #8]
 8009918:	9b08      	ldr	r3, [sp, #32]
 800991a:	f103 33ff 	add.w	r3, r3, #4294967295
 800991e:	bfa8      	it	ge
 8009920:	1ed4      	subge	r4, r2, #3
 8009922:	9306      	str	r3, [sp, #24]
 8009924:	bfb2      	itee	lt
 8009926:	2400      	movlt	r4, #0
 8009928:	2318      	movge	r3, #24
 800992a:	fb94 f4f3 	sdivge	r4, r4, r3
 800992e:	f06f 0317 	mvn.w	r3, #23
 8009932:	fb04 3303 	mla	r3, r4, r3, r3
 8009936:	eb03 0a02 	add.w	sl, r3, r2
 800993a:	9b02      	ldr	r3, [sp, #8]
 800993c:	9a06      	ldr	r2, [sp, #24]
 800993e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009c10 <__kernel_rem_pio2+0x318>
 8009942:	eb03 0802 	add.w	r8, r3, r2
 8009946:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009948:	1aa7      	subs	r7, r4, r2
 800994a:	ae22      	add	r6, sp, #136	; 0x88
 800994c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009950:	2500      	movs	r5, #0
 8009952:	4545      	cmp	r5, r8
 8009954:	dd13      	ble.n	800997e <__kernel_rem_pio2+0x86>
 8009956:	9b08      	ldr	r3, [sp, #32]
 8009958:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009c10 <__kernel_rem_pio2+0x318>
 800995c:	aa22      	add	r2, sp, #136	; 0x88
 800995e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009962:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009966:	f04f 0800 	mov.w	r8, #0
 800996a:	9b02      	ldr	r3, [sp, #8]
 800996c:	4598      	cmp	r8, r3
 800996e:	dc2f      	bgt.n	80099d0 <__kernel_rem_pio2+0xd8>
 8009970:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009974:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009978:	462f      	mov	r7, r5
 800997a:	2600      	movs	r6, #0
 800997c:	e01b      	b.n	80099b6 <__kernel_rem_pio2+0xbe>
 800997e:	42ef      	cmn	r7, r5
 8009980:	d407      	bmi.n	8009992 <__kernel_rem_pio2+0x9a>
 8009982:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009986:	f7f6 fded 	bl	8000564 <__aeabi_i2d>
 800998a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800998e:	3501      	adds	r5, #1
 8009990:	e7df      	b.n	8009952 <__kernel_rem_pio2+0x5a>
 8009992:	ec51 0b18 	vmov	r0, r1, d8
 8009996:	e7f8      	b.n	800998a <__kernel_rem_pio2+0x92>
 8009998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800999c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80099a0:	f7f6 fe4a 	bl	8000638 <__aeabi_dmul>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099ac:	f7f6 fc8e 	bl	80002cc <__adddf3>
 80099b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099b4:	3601      	adds	r6, #1
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	429e      	cmp	r6, r3
 80099ba:	f1a7 0708 	sub.w	r7, r7, #8
 80099be:	ddeb      	ble.n	8009998 <__kernel_rem_pio2+0xa0>
 80099c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80099c4:	f108 0801 	add.w	r8, r8, #1
 80099c8:	ecab 7b02 	vstmia	fp!, {d7}
 80099cc:	3508      	adds	r5, #8
 80099ce:	e7cc      	b.n	800996a <__kernel_rem_pio2+0x72>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	aa0e      	add	r2, sp, #56	; 0x38
 80099d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099d8:	930d      	str	r3, [sp, #52]	; 0x34
 80099da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80099dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80099e0:	9c02      	ldr	r4, [sp, #8]
 80099e2:	930c      	str	r3, [sp, #48]	; 0x30
 80099e4:	00e3      	lsls	r3, r4, #3
 80099e6:	930a      	str	r3, [sp, #40]	; 0x28
 80099e8:	ab9a      	add	r3, sp, #616	; 0x268
 80099ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80099f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80099f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80099f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80099fc:	46c3      	mov	fp, r8
 80099fe:	46a1      	mov	r9, r4
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	f1a5 0508 	sub.w	r5, r5, #8
 8009a08:	dc77      	bgt.n	8009afa <__kernel_rem_pio2+0x202>
 8009a0a:	ec47 6b10 	vmov	d0, r6, r7
 8009a0e:	4650      	mov	r0, sl
 8009a10:	f000 fc0a 	bl	800a228 <scalbn>
 8009a14:	ec57 6b10 	vmov	r6, r7, d0
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009a1e:	ee10 0a10 	vmov	r0, s0
 8009a22:	4639      	mov	r1, r7
 8009a24:	f7f6 fe08 	bl	8000638 <__aeabi_dmul>
 8009a28:	ec41 0b10 	vmov	d0, r0, r1
 8009a2c:	f000 fb7c 	bl	800a128 <floor>
 8009a30:	4b7c      	ldr	r3, [pc, #496]	; (8009c24 <__kernel_rem_pio2+0x32c>)
 8009a32:	ec51 0b10 	vmov	r0, r1, d0
 8009a36:	2200      	movs	r2, #0
 8009a38:	f7f6 fdfe 	bl	8000638 <__aeabi_dmul>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4630      	mov	r0, r6
 8009a42:	4639      	mov	r1, r7
 8009a44:	f7f6 fc40 	bl	80002c8 <__aeabi_dsub>
 8009a48:	460f      	mov	r7, r1
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	f7f7 f8a4 	bl	8000b98 <__aeabi_d2iz>
 8009a50:	9004      	str	r0, [sp, #16]
 8009a52:	f7f6 fd87 	bl	8000564 <__aeabi_i2d>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	f7f6 fc33 	bl	80002c8 <__aeabi_dsub>
 8009a62:	f1ba 0f00 	cmp.w	sl, #0
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	dd6d      	ble.n	8009b48 <__kernel_rem_pio2+0x250>
 8009a6c:	1e62      	subs	r2, r4, #1
 8009a6e:	ab0e      	add	r3, sp, #56	; 0x38
 8009a70:	9d04      	ldr	r5, [sp, #16]
 8009a72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009a76:	f1ca 0118 	rsb	r1, sl, #24
 8009a7a:	fa40 f301 	asr.w	r3, r0, r1
 8009a7e:	441d      	add	r5, r3
 8009a80:	408b      	lsls	r3, r1
 8009a82:	1ac0      	subs	r0, r0, r3
 8009a84:	ab0e      	add	r3, sp, #56	; 0x38
 8009a86:	9504      	str	r5, [sp, #16]
 8009a88:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009a8c:	f1ca 0317 	rsb	r3, sl, #23
 8009a90:	fa40 fb03 	asr.w	fp, r0, r3
 8009a94:	f1bb 0f00 	cmp.w	fp, #0
 8009a98:	dd65      	ble.n	8009b66 <__kernel_rem_pio2+0x26e>
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	4615      	mov	r5, r2
 8009aa4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009aa8:	4294      	cmp	r4, r2
 8009aaa:	f300 809c 	bgt.w	8009be6 <__kernel_rem_pio2+0x2ee>
 8009aae:	f1ba 0f00 	cmp.w	sl, #0
 8009ab2:	dd07      	ble.n	8009ac4 <__kernel_rem_pio2+0x1cc>
 8009ab4:	f1ba 0f01 	cmp.w	sl, #1
 8009ab8:	f000 80c0 	beq.w	8009c3c <__kernel_rem_pio2+0x344>
 8009abc:	f1ba 0f02 	cmp.w	sl, #2
 8009ac0:	f000 80c6 	beq.w	8009c50 <__kernel_rem_pio2+0x358>
 8009ac4:	f1bb 0f02 	cmp.w	fp, #2
 8009ac8:	d14d      	bne.n	8009b66 <__kernel_rem_pio2+0x26e>
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	4956      	ldr	r1, [pc, #344]	; (8009c28 <__kernel_rem_pio2+0x330>)
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7f6 fbf9 	bl	80002c8 <__aeabi_dsub>
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	2d00      	cmp	r5, #0
 8009adc:	d043      	beq.n	8009b66 <__kernel_rem_pio2+0x26e>
 8009ade:	4650      	mov	r0, sl
 8009ae0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009c18 <__kernel_rem_pio2+0x320>
 8009ae4:	f000 fba0 	bl	800a228 <scalbn>
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	ec53 2b10 	vmov	r2, r3, d0
 8009af0:	f7f6 fbea 	bl	80002c8 <__aeabi_dsub>
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	e035      	b.n	8009b66 <__kernel_rem_pio2+0x26e>
 8009afa:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <__kernel_rem_pio2+0x334>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fd99 	bl	8000638 <__aeabi_dmul>
 8009b06:	f7f7 f847 	bl	8000b98 <__aeabi_d2iz>
 8009b0a:	f7f6 fd2b 	bl	8000564 <__aeabi_i2d>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	ec43 2b18 	vmov	d8, r2, r3
 8009b16:	4b46      	ldr	r3, [pc, #280]	; (8009c30 <__kernel_rem_pio2+0x338>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f7f6 fd8d 	bl	8000638 <__aeabi_dmul>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	f7f6 fbcf 	bl	80002c8 <__aeabi_dsub>
 8009b2a:	f7f7 f835 	bl	8000b98 <__aeabi_d2iz>
 8009b2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b32:	f84b 0b04 	str.w	r0, [fp], #4
 8009b36:	ec51 0b18 	vmov	r0, r1, d8
 8009b3a:	f7f6 fbc7 	bl	80002cc <__adddf3>
 8009b3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	e75b      	b.n	8009a00 <__kernel_rem_pio2+0x108>
 8009b48:	d106      	bne.n	8009b58 <__kernel_rem_pio2+0x260>
 8009b4a:	1e63      	subs	r3, r4, #1
 8009b4c:	aa0e      	add	r2, sp, #56	; 0x38
 8009b4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009b52:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009b56:	e79d      	b.n	8009a94 <__kernel_rem_pio2+0x19c>
 8009b58:	4b36      	ldr	r3, [pc, #216]	; (8009c34 <__kernel_rem_pio2+0x33c>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f7f6 fff2 	bl	8000b44 <__aeabi_dcmpge>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d13d      	bne.n	8009be0 <__kernel_rem_pio2+0x2e8>
 8009b64:	4683      	mov	fp, r0
 8009b66:	2200      	movs	r2, #0
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	f7f6 ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f000 80c0 	beq.w	8009cf8 <__kernel_rem_pio2+0x400>
 8009b78:	1e65      	subs	r5, r4, #1
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	9902      	ldr	r1, [sp, #8]
 8009b80:	428b      	cmp	r3, r1
 8009b82:	da6c      	bge.n	8009c5e <__kernel_rem_pio2+0x366>
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	f000 8089 	beq.w	8009c9c <__kernel_rem_pio2+0x3a4>
 8009b8a:	ab0e      	add	r3, sp, #56	; 0x38
 8009b8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009b90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80ad 	beq.w	8009cf4 <__kernel_rem_pio2+0x3fc>
 8009b9a:	4650      	mov	r0, sl
 8009b9c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009c18 <__kernel_rem_pio2+0x320>
 8009ba0:	f000 fb42 	bl	800a228 <scalbn>
 8009ba4:	ab9a      	add	r3, sp, #616	; 0x268
 8009ba6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009baa:	ec57 6b10 	vmov	r6, r7, d0
 8009bae:	00ec      	lsls	r4, r5, #3
 8009bb0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009bb4:	46aa      	mov	sl, r5
 8009bb6:	f1ba 0f00 	cmp.w	sl, #0
 8009bba:	f280 80d6 	bge.w	8009d6a <__kernel_rem_pio2+0x472>
 8009bbe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009c10 <__kernel_rem_pio2+0x318>
 8009bc2:	462e      	mov	r6, r5
 8009bc4:	2e00      	cmp	r6, #0
 8009bc6:	f2c0 8104 	blt.w	8009dd2 <__kernel_rem_pio2+0x4da>
 8009bca:	ab72      	add	r3, sp, #456	; 0x1c8
 8009bcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009bd0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009c38 <__kernel_rem_pio2+0x340>
 8009bd4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009bd8:	f04f 0800 	mov.w	r8, #0
 8009bdc:	1baf      	subs	r7, r5, r6
 8009bde:	e0ea      	b.n	8009db6 <__kernel_rem_pio2+0x4be>
 8009be0:	f04f 0b02 	mov.w	fp, #2
 8009be4:	e759      	b.n	8009a9a <__kernel_rem_pio2+0x1a2>
 8009be6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bea:	b955      	cbnz	r5, 8009c02 <__kernel_rem_pio2+0x30a>
 8009bec:	b123      	cbz	r3, 8009bf8 <__kernel_rem_pio2+0x300>
 8009bee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009bf2:	f8c8 3000 	str.w	r3, [r8]
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	3201      	adds	r2, #1
 8009bfa:	f108 0804 	add.w	r8, r8, #4
 8009bfe:	461d      	mov	r5, r3
 8009c00:	e752      	b.n	8009aa8 <__kernel_rem_pio2+0x1b0>
 8009c02:	1acb      	subs	r3, r1, r3
 8009c04:	f8c8 3000 	str.w	r3, [r8]
 8009c08:	462b      	mov	r3, r5
 8009c0a:	e7f5      	b.n	8009bf8 <__kernel_rem_pio2+0x300>
 8009c0c:	f3af 8000 	nop.w
	...
 8009c1c:	3ff00000 	.word	0x3ff00000
 8009c20:	0800aad8 	.word	0x0800aad8
 8009c24:	40200000 	.word	0x40200000
 8009c28:	3ff00000 	.word	0x3ff00000
 8009c2c:	3e700000 	.word	0x3e700000
 8009c30:	41700000 	.word	0x41700000
 8009c34:	3fe00000 	.word	0x3fe00000
 8009c38:	0800aa98 	.word	0x0800aa98
 8009c3c:	1e62      	subs	r2, r4, #1
 8009c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8009c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009c48:	a90e      	add	r1, sp, #56	; 0x38
 8009c4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009c4e:	e739      	b.n	8009ac4 <__kernel_rem_pio2+0x1cc>
 8009c50:	1e62      	subs	r2, r4, #1
 8009c52:	ab0e      	add	r3, sp, #56	; 0x38
 8009c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009c5c:	e7f4      	b.n	8009c48 <__kernel_rem_pio2+0x350>
 8009c5e:	a90e      	add	r1, sp, #56	; 0x38
 8009c60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	430a      	orrs	r2, r1
 8009c68:	e789      	b.n	8009b7e <__kernel_rem_pio2+0x286>
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009c70:	2900      	cmp	r1, #0
 8009c72:	d0fa      	beq.n	8009c6a <__kernel_rem_pio2+0x372>
 8009c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009c7a:	446a      	add	r2, sp
 8009c7c:	3a98      	subs	r2, #152	; 0x98
 8009c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8009c80:	9a08      	ldr	r2, [sp, #32]
 8009c82:	18e3      	adds	r3, r4, r3
 8009c84:	18a5      	adds	r5, r4, r2
 8009c86:	aa22      	add	r2, sp, #136	; 0x88
 8009c88:	f104 0801 	add.w	r8, r4, #1
 8009c8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	4543      	cmp	r3, r8
 8009c96:	da04      	bge.n	8009ca2 <__kernel_rem_pio2+0x3aa>
 8009c98:	461c      	mov	r4, r3
 8009c9a:	e6a3      	b.n	80099e4 <__kernel_rem_pio2+0xec>
 8009c9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e7e4      	b.n	8009c6c <__kernel_rem_pio2+0x374>
 8009ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ca4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009ca8:	f7f6 fc5c 	bl	8000564 <__aeabi_i2d>
 8009cac:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cb2:	46ab      	mov	fp, r5
 8009cb4:	461c      	mov	r4, r3
 8009cb6:	f04f 0900 	mov.w	r9, #0
 8009cba:	2600      	movs	r6, #0
 8009cbc:	2700      	movs	r7, #0
 8009cbe:	9b06      	ldr	r3, [sp, #24]
 8009cc0:	4599      	cmp	r9, r3
 8009cc2:	dd06      	ble.n	8009cd2 <__kernel_rem_pio2+0x3da>
 8009cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009cca:	f108 0801 	add.w	r8, r8, #1
 8009cce:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd0:	e7df      	b.n	8009c92 <__kernel_rem_pio2+0x39a>
 8009cd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009cd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009cda:	f7f6 fcad 	bl	8000638 <__aeabi_dmul>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 faf1 	bl	80002cc <__adddf3>
 8009cea:	f109 0901 	add.w	r9, r9, #1
 8009cee:	4606      	mov	r6, r0
 8009cf0:	460f      	mov	r7, r1
 8009cf2:	e7e4      	b.n	8009cbe <__kernel_rem_pio2+0x3c6>
 8009cf4:	3d01      	subs	r5, #1
 8009cf6:	e748      	b.n	8009b8a <__kernel_rem_pio2+0x292>
 8009cf8:	ec47 6b10 	vmov	d0, r6, r7
 8009cfc:	f1ca 0000 	rsb	r0, sl, #0
 8009d00:	f000 fa92 	bl	800a228 <scalbn>
 8009d04:	ec57 6b10 	vmov	r6, r7, d0
 8009d08:	4ba0      	ldr	r3, [pc, #640]	; (8009f8c <__kernel_rem_pio2+0x694>)
 8009d0a:	ee10 0a10 	vmov	r0, s0
 8009d0e:	2200      	movs	r2, #0
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7f6 ff17 	bl	8000b44 <__aeabi_dcmpge>
 8009d16:	b1f8      	cbz	r0, 8009d58 <__kernel_rem_pio2+0x460>
 8009d18:	4b9d      	ldr	r3, [pc, #628]	; (8009f90 <__kernel_rem_pio2+0x698>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	4639      	mov	r1, r7
 8009d20:	f7f6 fc8a 	bl	8000638 <__aeabi_dmul>
 8009d24:	f7f6 ff38 	bl	8000b98 <__aeabi_d2iz>
 8009d28:	4680      	mov	r8, r0
 8009d2a:	f7f6 fc1b 	bl	8000564 <__aeabi_i2d>
 8009d2e:	4b97      	ldr	r3, [pc, #604]	; (8009f8c <__kernel_rem_pio2+0x694>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	f7f6 fc81 	bl	8000638 <__aeabi_dmul>
 8009d36:	460b      	mov	r3, r1
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7f6 fac3 	bl	80002c8 <__aeabi_dsub>
 8009d42:	f7f6 ff29 	bl	8000b98 <__aeabi_d2iz>
 8009d46:	1c65      	adds	r5, r4, #1
 8009d48:	ab0e      	add	r3, sp, #56	; 0x38
 8009d4a:	f10a 0a18 	add.w	sl, sl, #24
 8009d4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009d52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009d56:	e720      	b.n	8009b9a <__kernel_rem_pio2+0x2a2>
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 ff1c 	bl	8000b98 <__aeabi_d2iz>
 8009d60:	ab0e      	add	r3, sp, #56	; 0x38
 8009d62:	4625      	mov	r5, r4
 8009d64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009d68:	e717      	b.n	8009b9a <__kernel_rem_pio2+0x2a2>
 8009d6a:	ab0e      	add	r3, sp, #56	; 0x38
 8009d6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009d70:	f7f6 fbf8 	bl	8000564 <__aeabi_i2d>
 8009d74:	4632      	mov	r2, r6
 8009d76:	463b      	mov	r3, r7
 8009d78:	f7f6 fc5e 	bl	8000638 <__aeabi_dmul>
 8009d7c:	4b84      	ldr	r3, [pc, #528]	; (8009f90 <__kernel_rem_pio2+0x698>)
 8009d7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009d82:	2200      	movs	r2, #0
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fc56 	bl	8000638 <__aeabi_dmul>
 8009d8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d90:	4606      	mov	r6, r0
 8009d92:	460f      	mov	r7, r1
 8009d94:	e70f      	b.n	8009bb6 <__kernel_rem_pio2+0x2be>
 8009d96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009d9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009d9e:	f7f6 fc4b 	bl	8000638 <__aeabi_dmul>
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009daa:	f7f6 fa8f 	bl	80002cc <__adddf3>
 8009dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009db2:	f108 0801 	add.w	r8, r8, #1
 8009db6:	9b02      	ldr	r3, [sp, #8]
 8009db8:	4598      	cmp	r8, r3
 8009dba:	dc01      	bgt.n	8009dc0 <__kernel_rem_pio2+0x4c8>
 8009dbc:	45b8      	cmp	r8, r7
 8009dbe:	ddea      	ble.n	8009d96 <__kernel_rem_pio2+0x49e>
 8009dc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009dc4:	ab4a      	add	r3, sp, #296	; 0x128
 8009dc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009dca:	ed87 7b00 	vstr	d7, [r7]
 8009dce:	3e01      	subs	r6, #1
 8009dd0:	e6f8      	b.n	8009bc4 <__kernel_rem_pio2+0x2cc>
 8009dd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	dc0b      	bgt.n	8009df0 <__kernel_rem_pio2+0x4f8>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dc35      	bgt.n	8009e48 <__kernel_rem_pio2+0x550>
 8009ddc:	d059      	beq.n	8009e92 <__kernel_rem_pio2+0x59a>
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	f003 0007 	and.w	r0, r3, #7
 8009de4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009de8:	ecbd 8b02 	vpop	{d8}
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d1f3      	bne.n	8009dde <__kernel_rem_pio2+0x4e6>
 8009df6:	ab4a      	add	r3, sp, #296	; 0x128
 8009df8:	4423      	add	r3, r4
 8009dfa:	9306      	str	r3, [sp, #24]
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	469a      	mov	sl, r3
 8009e00:	9502      	str	r5, [sp, #8]
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f1aa 0a08 	sub.w	sl, sl, #8
 8009e0a:	dc6b      	bgt.n	8009ee4 <__kernel_rem_pio2+0x5ec>
 8009e0c:	46aa      	mov	sl, r5
 8009e0e:	f1ba 0f01 	cmp.w	sl, #1
 8009e12:	f1a4 0408 	sub.w	r4, r4, #8
 8009e16:	f300 8085 	bgt.w	8009f24 <__kernel_rem_pio2+0x62c>
 8009e1a:	9c06      	ldr	r4, [sp, #24]
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	3408      	adds	r4, #8
 8009e20:	2100      	movs	r1, #0
 8009e22:	2d01      	cmp	r5, #1
 8009e24:	f300 809d 	bgt.w	8009f62 <__kernel_rem_pio2+0x66a>
 8009e28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009e2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009e30:	f1bb 0f00 	cmp.w	fp, #0
 8009e34:	f040 809b 	bne.w	8009f6e <__kernel_rem_pio2+0x676>
 8009e38:	9b01      	ldr	r3, [sp, #4]
 8009e3a:	e9c3 5600 	strd	r5, r6, [r3]
 8009e3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009e42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009e46:	e7ca      	b.n	8009dde <__kernel_rem_pio2+0x4e6>
 8009e48:	3408      	adds	r4, #8
 8009e4a:	ab4a      	add	r3, sp, #296	; 0x128
 8009e4c:	441c      	add	r4, r3
 8009e4e:	462e      	mov	r6, r5
 8009e50:	2000      	movs	r0, #0
 8009e52:	2100      	movs	r1, #0
 8009e54:	2e00      	cmp	r6, #0
 8009e56:	da36      	bge.n	8009ec6 <__kernel_rem_pio2+0x5ce>
 8009e58:	f1bb 0f00 	cmp.w	fp, #0
 8009e5c:	d039      	beq.n	8009ed2 <__kernel_rem_pio2+0x5da>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e64:	9c01      	ldr	r4, [sp, #4]
 8009e66:	e9c4 2300 	strd	r2, r3, [r4]
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009e72:	f7f6 fa29 	bl	80002c8 <__aeabi_dsub>
 8009e76:	ae4c      	add	r6, sp, #304	; 0x130
 8009e78:	2401      	movs	r4, #1
 8009e7a:	42a5      	cmp	r5, r4
 8009e7c:	da2c      	bge.n	8009ed8 <__kernel_rem_pio2+0x5e0>
 8009e7e:	f1bb 0f00 	cmp.w	fp, #0
 8009e82:	d002      	beq.n	8009e8a <__kernel_rem_pio2+0x592>
 8009e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e88:	4619      	mov	r1, r3
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009e90:	e7a5      	b.n	8009dde <__kernel_rem_pio2+0x4e6>
 8009e92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009e96:	eb0d 0403 	add.w	r4, sp, r3
 8009e9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	da09      	bge.n	8009eba <__kernel_rem_pio2+0x5c2>
 8009ea6:	f1bb 0f00 	cmp.w	fp, #0
 8009eaa:	d002      	beq.n	8009eb2 <__kernel_rem_pio2+0x5ba>
 8009eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	e9c3 0100 	strd	r0, r1, [r3]
 8009eb8:	e791      	b.n	8009dde <__kernel_rem_pio2+0x4e6>
 8009eba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ebe:	f7f6 fa05 	bl	80002cc <__adddf3>
 8009ec2:	3d01      	subs	r5, #1
 8009ec4:	e7ed      	b.n	8009ea2 <__kernel_rem_pio2+0x5aa>
 8009ec6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009eca:	f7f6 f9ff 	bl	80002cc <__adddf3>
 8009ece:	3e01      	subs	r6, #1
 8009ed0:	e7c0      	b.n	8009e54 <__kernel_rem_pio2+0x55c>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	e7c5      	b.n	8009e64 <__kernel_rem_pio2+0x56c>
 8009ed8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009edc:	f7f6 f9f6 	bl	80002cc <__adddf3>
 8009ee0:	3401      	adds	r4, #1
 8009ee2:	e7ca      	b.n	8009e7a <__kernel_rem_pio2+0x582>
 8009ee4:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ee8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009eec:	9b02      	ldr	r3, [sp, #8]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	4649      	mov	r1, r9
 8009efa:	f7f6 f9e7 	bl	80002cc <__adddf3>
 8009efe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4640      	mov	r0, r8
 8009f08:	4649      	mov	r1, r9
 8009f0a:	f7f6 f9dd 	bl	80002c8 <__aeabi_dsub>
 8009f0e:	4632      	mov	r2, r6
 8009f10:	463b      	mov	r3, r7
 8009f12:	f7f6 f9db 	bl	80002cc <__adddf3>
 8009f16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f1e:	ed8a 7b00 	vstr	d7, [sl]
 8009f22:	e76e      	b.n	8009e02 <__kernel_rem_pio2+0x50a>
 8009f24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009f28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4632      	mov	r2, r6
 8009f30:	463b      	mov	r3, r7
 8009f32:	4649      	mov	r1, r9
 8009f34:	f7f6 f9ca 	bl	80002cc <__adddf3>
 8009f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4640      	mov	r0, r8
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7f6 f9c0 	bl	80002c8 <__aeabi_dsub>
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	f7f6 f9be 	bl	80002cc <__adddf3>
 8009f50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f58:	ed84 7b00 	vstr	d7, [r4]
 8009f5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f60:	e755      	b.n	8009e0e <__kernel_rem_pio2+0x516>
 8009f62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f66:	f7f6 f9b1 	bl	80002cc <__adddf3>
 8009f6a:	3d01      	subs	r5, #1
 8009f6c:	e759      	b.n	8009e22 <__kernel_rem_pio2+0x52a>
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	9a01      	ldr	r2, [sp, #4]
 8009f72:	601d      	str	r5, [r3, #0]
 8009f74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009f78:	605c      	str	r4, [r3, #4]
 8009f7a:	609f      	str	r7, [r3, #8]
 8009f7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009f80:	60d3      	str	r3, [r2, #12]
 8009f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f86:	6110      	str	r0, [r2, #16]
 8009f88:	6153      	str	r3, [r2, #20]
 8009f8a:	e728      	b.n	8009dde <__kernel_rem_pio2+0x4e6>
 8009f8c:	41700000 	.word	0x41700000
 8009f90:	3e700000 	.word	0x3e700000
 8009f94:	00000000 	.word	0x00000000

08009f98 <__kernel_sin>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	ed2d 8b04 	vpush	{d8-d9}
 8009fa0:	eeb0 8a41 	vmov.f32	s16, s2
 8009fa4:	eef0 8a61 	vmov.f32	s17, s3
 8009fa8:	ec55 4b10 	vmov	r4, r5, d0
 8009fac:	b083      	sub	sp, #12
 8009fae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009fb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009fb6:	9001      	str	r0, [sp, #4]
 8009fb8:	da06      	bge.n	8009fc8 <__kernel_sin+0x30>
 8009fba:	ee10 0a10 	vmov	r0, s0
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	f7f6 fdea 	bl	8000b98 <__aeabi_d2iz>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d051      	beq.n	800a06c <__kernel_sin+0xd4>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	462b      	mov	r3, r5
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fb32 	bl	8000638 <__aeabi_dmul>
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	468b      	mov	fp, r1
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fb2a 	bl	8000638 <__aeabi_dmul>
 8009fe4:	a341      	add	r3, pc, #260	; (adr r3, 800a0ec <__kernel_sin+0x154>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	4680      	mov	r8, r0
 8009fec:	4689      	mov	r9, r1
 8009fee:	4650      	mov	r0, sl
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	f7f6 fb21 	bl	8000638 <__aeabi_dmul>
 8009ff6:	a33f      	add	r3, pc, #252	; (adr r3, 800a0f4 <__kernel_sin+0x15c>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f964 	bl	80002c8 <__aeabi_dsub>
 800a000:	4652      	mov	r2, sl
 800a002:	465b      	mov	r3, fp
 800a004:	f7f6 fb18 	bl	8000638 <__aeabi_dmul>
 800a008:	a33c      	add	r3, pc, #240	; (adr r3, 800a0fc <__kernel_sin+0x164>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 f95d 	bl	80002cc <__adddf3>
 800a012:	4652      	mov	r2, sl
 800a014:	465b      	mov	r3, fp
 800a016:	f7f6 fb0f 	bl	8000638 <__aeabi_dmul>
 800a01a:	a33a      	add	r3, pc, #232	; (adr r3, 800a104 <__kernel_sin+0x16c>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 f952 	bl	80002c8 <__aeabi_dsub>
 800a024:	4652      	mov	r2, sl
 800a026:	465b      	mov	r3, fp
 800a028:	f7f6 fb06 	bl	8000638 <__aeabi_dmul>
 800a02c:	a337      	add	r3, pc, #220	; (adr r3, 800a10c <__kernel_sin+0x174>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f94b 	bl	80002cc <__adddf3>
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	4606      	mov	r6, r0
 800a03a:	460f      	mov	r7, r1
 800a03c:	b9eb      	cbnz	r3, 800a07a <__kernel_sin+0xe2>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	f7f6 faf7 	bl	8000638 <__aeabi_dmul>
 800a04a:	a325      	add	r3, pc, #148	; (adr r3, 800a0e0 <__kernel_sin+0x148>)
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	f7f6 f93a 	bl	80002c8 <__aeabi_dsub>
 800a054:	4642      	mov	r2, r8
 800a056:	464b      	mov	r3, r9
 800a058:	f7f6 faee 	bl	8000638 <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4620      	mov	r0, r4
 800a062:	4629      	mov	r1, r5
 800a064:	f7f6 f932 	bl	80002cc <__adddf3>
 800a068:	4604      	mov	r4, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	ec45 4b10 	vmov	d0, r4, r5
 800a070:	b003      	add	sp, #12
 800a072:	ecbd 8b04 	vpop	{d8-d9}
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07a:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <__kernel_sin+0x150>)
 800a07c:	ec51 0b18 	vmov	r0, r1, d8
 800a080:	2200      	movs	r2, #0
 800a082:	f7f6 fad9 	bl	8000638 <__aeabi_dmul>
 800a086:	4632      	mov	r2, r6
 800a088:	ec41 0b19 	vmov	d9, r0, r1
 800a08c:	463b      	mov	r3, r7
 800a08e:	4640      	mov	r0, r8
 800a090:	4649      	mov	r1, r9
 800a092:	f7f6 fad1 	bl	8000638 <__aeabi_dmul>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	ec51 0b19 	vmov	r0, r1, d9
 800a09e:	f7f6 f913 	bl	80002c8 <__aeabi_dsub>
 800a0a2:	4652      	mov	r2, sl
 800a0a4:	465b      	mov	r3, fp
 800a0a6:	f7f6 fac7 	bl	8000638 <__aeabi_dmul>
 800a0aa:	ec53 2b18 	vmov	r2, r3, d8
 800a0ae:	f7f6 f90b 	bl	80002c8 <__aeabi_dsub>
 800a0b2:	a30b      	add	r3, pc, #44	; (adr r3, 800a0e0 <__kernel_sin+0x148>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	4640      	mov	r0, r8
 800a0be:	4649      	mov	r1, r9
 800a0c0:	f7f6 faba 	bl	8000638 <__aeabi_dmul>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 f8fe 	bl	80002cc <__adddf3>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 f8f6 	bl	80002c8 <__aeabi_dsub>
 800a0dc:	e7c4      	b.n	800a068 <__kernel_sin+0xd0>
 800a0de:	bf00      	nop
 800a0e0:	55555549 	.word	0x55555549
 800a0e4:	3fc55555 	.word	0x3fc55555
 800a0e8:	3fe00000 	.word	0x3fe00000
 800a0ec:	5acfd57c 	.word	0x5acfd57c
 800a0f0:	3de5d93a 	.word	0x3de5d93a
 800a0f4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a0f8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a0fc:	57b1fe7d 	.word	0x57b1fe7d
 800a100:	3ec71de3 	.word	0x3ec71de3
 800a104:	19c161d5 	.word	0x19c161d5
 800a108:	3f2a01a0 	.word	0x3f2a01a0
 800a10c:	1110f8a6 	.word	0x1110f8a6
 800a110:	3f811111 	.word	0x3f811111

0800a114 <fabs>:
 800a114:	ec51 0b10 	vmov	r0, r1, d0
 800a118:	ee10 2a10 	vmov	r2, s0
 800a11c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a120:	ec43 2b10 	vmov	d0, r2, r3
 800a124:	4770      	bx	lr
	...

0800a128 <floor>:
 800a128:	ec51 0b10 	vmov	r0, r1, d0
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a134:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a138:	2e13      	cmp	r6, #19
 800a13a:	ee10 5a10 	vmov	r5, s0
 800a13e:	ee10 8a10 	vmov	r8, s0
 800a142:	460c      	mov	r4, r1
 800a144:	dc32      	bgt.n	800a1ac <floor+0x84>
 800a146:	2e00      	cmp	r6, #0
 800a148:	da14      	bge.n	800a174 <floor+0x4c>
 800a14a:	a333      	add	r3, pc, #204	; (adr r3, 800a218 <floor+0xf0>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f7f6 f8bc 	bl	80002cc <__adddf3>
 800a154:	2200      	movs	r2, #0
 800a156:	2300      	movs	r3, #0
 800a158:	f7f6 fcfe 	bl	8000b58 <__aeabi_dcmpgt>
 800a15c:	b138      	cbz	r0, 800a16e <floor+0x46>
 800a15e:	2c00      	cmp	r4, #0
 800a160:	da57      	bge.n	800a212 <floor+0xea>
 800a162:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a166:	431d      	orrs	r5, r3
 800a168:	d001      	beq.n	800a16e <floor+0x46>
 800a16a:	4c2d      	ldr	r4, [pc, #180]	; (800a220 <floor+0xf8>)
 800a16c:	2500      	movs	r5, #0
 800a16e:	4621      	mov	r1, r4
 800a170:	4628      	mov	r0, r5
 800a172:	e025      	b.n	800a1c0 <floor+0x98>
 800a174:	4f2b      	ldr	r7, [pc, #172]	; (800a224 <floor+0xfc>)
 800a176:	4137      	asrs	r7, r6
 800a178:	ea01 0307 	and.w	r3, r1, r7
 800a17c:	4303      	orrs	r3, r0
 800a17e:	d01f      	beq.n	800a1c0 <floor+0x98>
 800a180:	a325      	add	r3, pc, #148	; (adr r3, 800a218 <floor+0xf0>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 f8a1 	bl	80002cc <__adddf3>
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	f7f6 fce3 	bl	8000b58 <__aeabi_dcmpgt>
 800a192:	2800      	cmp	r0, #0
 800a194:	d0eb      	beq.n	800a16e <floor+0x46>
 800a196:	2c00      	cmp	r4, #0
 800a198:	bfbe      	ittt	lt
 800a19a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a19e:	fa43 f606 	asrlt.w	r6, r3, r6
 800a1a2:	19a4      	addlt	r4, r4, r6
 800a1a4:	ea24 0407 	bic.w	r4, r4, r7
 800a1a8:	2500      	movs	r5, #0
 800a1aa:	e7e0      	b.n	800a16e <floor+0x46>
 800a1ac:	2e33      	cmp	r6, #51	; 0x33
 800a1ae:	dd0b      	ble.n	800a1c8 <floor+0xa0>
 800a1b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a1b4:	d104      	bne.n	800a1c0 <floor+0x98>
 800a1b6:	ee10 2a10 	vmov	r2, s0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	f7f6 f886 	bl	80002cc <__adddf3>
 800a1c0:	ec41 0b10 	vmov	d0, r0, r1
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d0:	fa23 f707 	lsr.w	r7, r3, r7
 800a1d4:	4207      	tst	r7, r0
 800a1d6:	d0f3      	beq.n	800a1c0 <floor+0x98>
 800a1d8:	a30f      	add	r3, pc, #60	; (adr r3, 800a218 <floor+0xf0>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 f875 	bl	80002cc <__adddf3>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f7f6 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d0bf      	beq.n	800a16e <floor+0x46>
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	da02      	bge.n	800a1f8 <floor+0xd0>
 800a1f2:	2e14      	cmp	r6, #20
 800a1f4:	d103      	bne.n	800a1fe <floor+0xd6>
 800a1f6:	3401      	adds	r4, #1
 800a1f8:	ea25 0507 	bic.w	r5, r5, r7
 800a1fc:	e7b7      	b.n	800a16e <floor+0x46>
 800a1fe:	2301      	movs	r3, #1
 800a200:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a204:	fa03 f606 	lsl.w	r6, r3, r6
 800a208:	4435      	add	r5, r6
 800a20a:	4545      	cmp	r5, r8
 800a20c:	bf38      	it	cc
 800a20e:	18e4      	addcc	r4, r4, r3
 800a210:	e7f2      	b.n	800a1f8 <floor+0xd0>
 800a212:	2500      	movs	r5, #0
 800a214:	462c      	mov	r4, r5
 800a216:	e7aa      	b.n	800a16e <floor+0x46>
 800a218:	8800759c 	.word	0x8800759c
 800a21c:	7e37e43c 	.word	0x7e37e43c
 800a220:	bff00000 	.word	0xbff00000
 800a224:	000fffff 	.word	0x000fffff

0800a228 <scalbn>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	ec55 4b10 	vmov	r4, r5, d0
 800a22e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a232:	4606      	mov	r6, r0
 800a234:	462b      	mov	r3, r5
 800a236:	b99a      	cbnz	r2, 800a260 <scalbn+0x38>
 800a238:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a23c:	4323      	orrs	r3, r4
 800a23e:	d036      	beq.n	800a2ae <scalbn+0x86>
 800a240:	4b39      	ldr	r3, [pc, #228]	; (800a328 <scalbn+0x100>)
 800a242:	4629      	mov	r1, r5
 800a244:	ee10 0a10 	vmov	r0, s0
 800a248:	2200      	movs	r2, #0
 800a24a:	f7f6 f9f5 	bl	8000638 <__aeabi_dmul>
 800a24e:	4b37      	ldr	r3, [pc, #220]	; (800a32c <scalbn+0x104>)
 800a250:	429e      	cmp	r6, r3
 800a252:	4604      	mov	r4, r0
 800a254:	460d      	mov	r5, r1
 800a256:	da10      	bge.n	800a27a <scalbn+0x52>
 800a258:	a32b      	add	r3, pc, #172	; (adr r3, 800a308 <scalbn+0xe0>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	e03a      	b.n	800a2d6 <scalbn+0xae>
 800a260:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a264:	428a      	cmp	r2, r1
 800a266:	d10c      	bne.n	800a282 <scalbn+0x5a>
 800a268:	ee10 2a10 	vmov	r2, s0
 800a26c:	4620      	mov	r0, r4
 800a26e:	4629      	mov	r1, r5
 800a270:	f7f6 f82c 	bl	80002cc <__adddf3>
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	e019      	b.n	800a2ae <scalbn+0x86>
 800a27a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a27e:	460b      	mov	r3, r1
 800a280:	3a36      	subs	r2, #54	; 0x36
 800a282:	4432      	add	r2, r6
 800a284:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a288:	428a      	cmp	r2, r1
 800a28a:	dd08      	ble.n	800a29e <scalbn+0x76>
 800a28c:	2d00      	cmp	r5, #0
 800a28e:	a120      	add	r1, pc, #128	; (adr r1, 800a310 <scalbn+0xe8>)
 800a290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a294:	da1c      	bge.n	800a2d0 <scalbn+0xa8>
 800a296:	a120      	add	r1, pc, #128	; (adr r1, 800a318 <scalbn+0xf0>)
 800a298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a29c:	e018      	b.n	800a2d0 <scalbn+0xa8>
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	dd08      	ble.n	800a2b4 <scalbn+0x8c>
 800a2a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2ae:	ec45 4b10 	vmov	d0, r4, r5
 800a2b2:	bd70      	pop	{r4, r5, r6, pc}
 800a2b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a2b8:	da19      	bge.n	800a2ee <scalbn+0xc6>
 800a2ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a2be:	429e      	cmp	r6, r3
 800a2c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a2c4:	dd0a      	ble.n	800a2dc <scalbn+0xb4>
 800a2c6:	a112      	add	r1, pc, #72	; (adr r1, 800a310 <scalbn+0xe8>)
 800a2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e2      	bne.n	800a296 <scalbn+0x6e>
 800a2d0:	a30f      	add	r3, pc, #60	; (adr r3, 800a310 <scalbn+0xe8>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f7f6 f9af 	bl	8000638 <__aeabi_dmul>
 800a2da:	e7cb      	b.n	800a274 <scalbn+0x4c>
 800a2dc:	a10a      	add	r1, pc, #40	; (adr r1, 800a308 <scalbn+0xe0>)
 800a2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0b8      	beq.n	800a258 <scalbn+0x30>
 800a2e6:	a10e      	add	r1, pc, #56	; (adr r1, 800a320 <scalbn+0xf8>)
 800a2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ec:	e7b4      	b.n	800a258 <scalbn+0x30>
 800a2ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2f2:	3236      	adds	r2, #54	; 0x36
 800a2f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	; (800a330 <scalbn+0x108>)
 800a300:	2200      	movs	r2, #0
 800a302:	e7e8      	b.n	800a2d6 <scalbn+0xae>
 800a304:	f3af 8000 	nop.w
 800a308:	c2f8f359 	.word	0xc2f8f359
 800a30c:	01a56e1f 	.word	0x01a56e1f
 800a310:	8800759c 	.word	0x8800759c
 800a314:	7e37e43c 	.word	0x7e37e43c
 800a318:	8800759c 	.word	0x8800759c
 800a31c:	fe37e43c 	.word	0xfe37e43c
 800a320:	c2f8f359 	.word	0xc2f8f359
 800a324:	81a56e1f 	.word	0x81a56e1f
 800a328:	43500000 	.word	0x43500000
 800a32c:	ffff3cb0 	.word	0xffff3cb0
 800a330:	3c900000 	.word	0x3c900000

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
